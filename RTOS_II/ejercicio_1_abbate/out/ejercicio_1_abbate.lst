
Mis_programas/RTOS_II/ejercicio_1_abbate/out/ejercicio_1_abbate.elf:     file format elf32-littlearm
Mis_programas/RTOS_II/ejercicio_1_abbate/out/ejercicio_1_abbate.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0006b9

Program Header:
0x70000001 off    0x000150e0 vaddr 0x1a0050e0 paddr 0x1a0050e0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002b80 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000050e8 memsz 0x000050e8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0050e8 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050dc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a0050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002b80  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a0050dc  1a0050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0050e0  1a0050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002c24  10002c24  000200a4  2**2
                  CONTENTS
 19 .debug_info   0002f2da  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006094  00000000  00000000  0004f37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000d257  00000000  00000000  00055412  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000f58  00000000  00000000  00062669  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000011b8  00000000  00000000  000635c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000103f3  00000000  00000000  00064779  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001ccfb  00000000  00000000  00074b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f923  00000000  00000000  00091867  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000c118a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000c11f2  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002fe8  00000000  00000000  000c1224  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0050dc l    d  .init_array	00000000 .init_array
1a0050e0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c24 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 utilities.c
00000000 l    df *ABS*	00000000 rtos_clase_1.c
00000000 l    df *ABS*	00000000 tareas.c
00000000 l    df *ABS*	00000000 fsm_debounce.c
100000a4 l     O .bss	00000001 contFalling.14494
100000a5 l     O .bss	00000001 contRising.14495
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 system.c
100000a8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a00080c l     F .text	00000064 prvHeapInit
100000b0 l     O .bss	00002000 ucHeap
1a000870 l     F .text	00000058 prvInsertBlockIntoFreeList
100000ac l     O .bss	00000004 pxEnd
100020b0 l     O .bss	00000004 xBlockAllocatedBit
100020b4 l     O .bss	00000004 xFreeBytesRemaining
100020b8 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020bc l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000a54 l     F .text	0000001e prvIsQueueFull
1a000a72 l     F .text	0000001a prvIsQueueEmpty
1a000a8c l     F .text	00000076 prvCopyDataToQueue
1a000b02 l     F .text	00000024 prvCopyDataFromQueue
1a000b26 l     F .text	0000006e prvUnlockQueue
1a000c18 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c4 l     O .bss	00000168 uxIdleTaskStack.10813
1000222c l     O .bss	000005a0 uxTimerTaskStack.10820
100027cc l     O .bss	00000060 xIdleTaskTCB.10812
1000282c l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001264 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001290 l     F .text	00000090 prvInitialiseNewTask
1a001320 l     F .text	00000068 prvInitialiseTaskLists
1a001388 l     F .text	000000ac prvAddNewTaskToReadyList
1a001434 l     F .text	00000038 prvDeleteTCB
1a00146c l     F .text	0000004c prvCheckTasksWaitingTermination
1a0014b8 l     F .text	00000028 prvIdleTask
1a0014e0 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002890 l     O .bss	00000004 pxDelayedTaskList
10002894 l     O .bss	00000004 pxOverflowDelayedTaskList
10002898 l     O .bss	0000008c pxReadyTasksLists
10002924 l     O .bss	00000004 uxCurrentNumberOfTasks
10002928 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000292c l     O .bss	00000004 uxPendedTicks
10002930 l     O .bss	00000004 uxSchedulerSuspended
10002934 l     O .bss	00000004 uxTaskNumber
10002938 l     O .bss	00000004 uxTopReadyPriority
1000293c l     O .bss	00000014 xDelayedTaskList1
10002950 l     O .bss	00000014 xDelayedTaskList2
10002964 l     O .bss	00000004 xNextTaskUnblockTime
10002968 l     O .bss	00000004 xNumOfOverflows
1000296c l     O .bss	00000014 xPendingReadyList
10002980 l     O .bss	00000004 xSchedulerRunning
10002984 l     O .bss	00000014 xSuspendedTaskList
10002998 l     O .bss	00000014 xTasksWaitingTermination
100029ac l     O .bss	00000004 xTickCount
100029b0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001d40 l     F .text	00000020 prvGetNextExpireTime
1a001d60 l     F .text	00000048 prvInsertTimerInActiveList
1a001da8 l     F .text	00000070 prvCheckForValidListAndQueue
1a00215c l     F .text	00000016 prvTimerTask
1a001ee8 l     F .text	00000078 prvSwitchTimerLists
1a001f60 l     F .text	0000002c prvSampleTimeNow
1a001f8c l     F .text	00000060 prvProcessExpiredTimer
1a001fec l     F .text	00000074 prvProcessTimerOrBlockTask
1a002060 l     F .text	000000fc prvProcessReceivedCommands
100029b4 l     O .bss	00000004 pxCurrentTimerList
100029b8 l     O .bss	00000004 pxOverflowTimerList
100029bc l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10002a5c l     O .bss	00000014 xActiveTimerList1
10002a70 l     O .bss	00000014 xActiveTimerList2
10002a84 l     O .bss	00000004 xLastTime.11863
10002a88 l     O .bss	00000050 xStaticTimerQueue.11913
10002ad8 l     O .bss	00000004 xTimerQueue
10002adc l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002174 l     F .text	00000040 prvTaskExitError
1a0021b4 l     F .text	00000022 prvPortStartFirstTask
1a0021dc l     F .text	0000000e vPortEnableVFP
1a002240 l       .text	00000000 pxCurrentTCBConst2
1a002320 l       .text	00000000 pxCurrentTCBConst
10002ae0 l     O .bss	00000001 ucMaxSysCallPriority
10002ae4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002514 l     F .text	00000044 Board_LED_Init
1a002558 l     F .text	00000040 Board_TEC_Init
1a002598 l     F .text	00000040 Board_GPIO_Init
1a0025d8 l     F .text	00000030 Board_ADC_Init
1a002608 l     F .text	00000038 Board_SPI_Init
1a002640 l     F .text	00000024 Board_I2C_Init
1a004da0 l     O .text	00000008 GpioButtons
1a004da8 l     O .text	0000000c GpioLeds
1a004db4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004dcc l     O .text	00000004 InitClkStates
1a004dd0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0027b4 l     F .text	0000002c Chip_UART_GetIndex
1a004e44 l     O .text	00000008 UART_BClock
1a004e4c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002950 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002964 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002a18 l     F .text	000000a0 pll_calc_divs
1a002ab8 l     F .text	0000010c pll_get_frac
1a002bc4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002e38 l     F .text	00000022 Chip_Clock_GetDivRate
10002aec l     O .bss	00000008 audio_usb_pll_freq
1a004e60 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004ecc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003114 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003128 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004f14 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003314 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002af4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003aec l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003ea0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0050e0 l       .init_array	00000000 __init_array_end
1a0050dc l       .bss_RAM5	00000000 __preinit_array_end
1a0050dc l       .init_array	00000000 __init_array_start
1a0050dc l       .bss_RAM5	00000000 __preinit_array_start
1a004c70 g     F .text	00000010 _malloc_usable_size_r
1a002c5c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000758 g     F .text	00000012 _isatty_r
1a000534 g     F .text	00000018 buttonReleased
1a004488 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00076a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002288 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004458 g     F .text	00000030 printf
1a0026fa g     F .text	00000008 __stdio_init
10002c18 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00460e g     F .text	00000024 __sseek
1a003b9c g     F .text	00000070 __sinit
1a00463c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0010f0 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003b40 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002a0a g     F .text	0000000c Chip_ADC_SetResolution
1a004970 g     F .text	0000000c __malloc_unlock
1a002324 g     F .text	0000002c SysTick_Handler
1a002834 g     F .text	00000040 Chip_UART_SetBaud
10002c19 g     O .bss	00000001 __lock___arc4random_mutex
1a0006b6  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00269c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004930 g     F .text	00000034 memmove
1a0022c0 g     F .text	00000064 PendSV_Handler
1a000e9c g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a0050e8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000288c g     O .bss	00000004 pxCurrentTCB
1a00074e g     F .text	0000000a _fstat_r
53ff71d6 g       *ABS*	00000000 __valid_user_code_checksum
1a0050e8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001bc4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002eda g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002388 g     F .text	00000110 xPortStartScheduler
1a003d22 g     F .text	0000001c memcpy
1a001ad0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003b34 g     F .text	0000000c _cleanup_r
1a004a80 g     F .text	000001f0 _svfprintf_r
1a002350  w    F .text	00000038 vPortSetupTimerInterrupt
1a003664 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c24 g       .noinit	00000000 _noinit
1a004564 g     F .text	00000010 puts
1a0009e4 g     F .text	00000070 vPortFree
10002c10 g     O .bss	00000004 SystemCoreClock
1a0027e0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002498 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002f58 g     F .text	0000004c Chip_Clock_GetRate
1a00115e g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00273c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003694 g     F .text	000002d0 .hidden __udivmoddi4
1a0007ec g     F .text	00000020 _sbrk_r
1a004d9c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000774 g     F .text	0000004e _read_r
1a001158 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000f6c g     F .text	0000015c xQueueReceive
10002bd0 g     O .bss	00000040 xQueueRegistry
1a0011e8 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0050e0 g       .ARM.exidx	00000000 __exidx_start
10002c1a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10002c1b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0050a4 g     O .text	00000004 _global_impure_ptr
1a00497c g     F .text	0000004c _realloc_r
1a003cd4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0008c8 g     F .text	0000011c pvPortMalloc
10002b00 g     O .bss	0000000c tecla_2
1a0026b8 g     F .text	00000030 Board_Init
1a000742  w    F .text	00000002 _init
1a001142 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0016f4 g     F .text	0000000c xTaskGetTickCount
1a000d1c g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c24 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000672 g     F .text	00000044 QMPool_get
1a0006b8 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00320c g     F .text	00000038 Chip_I2C_SetClockRate
1a001c8c g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002c10 g     F .text	0000004c Chip_Clock_EnableCrystal
10002c1c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001b38 g     F .text	0000008c xTaskRemoveFromEventList
1a00122c  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0003dc g     F .text	00000078 tarea_a
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005044 g     O .text	00000020 __sf_fake_stderr
1a0031e8 g     F .text	00000024 Chip_I2C_Init
1a003d20 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002dcc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0049c8 g     F .text	000000b6 __ssputs_r
1a004f5c g     O .text	000000e6 gpioPinsInit
1a001200  w    F .text	0000002c vAssertCalled
1a003140 g     F .text	00000012 Chip_SSP_SetClockRate
1a0035c6 g     F .text	00000016 gpioToggle
1a003ece g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003b6c g     F .text	0000000c __sfp_lock_acquire
1a004890 g     F .text	00000000 memchr
1a001bdc g     F .text	00000084 xTaskCheckForTimeOut
1a003d50 g     F .text	0000009c _free_r
1a002eb4 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a4 g       .bss	00000000 _bss
1a0029d8 g     F .text	00000032 Chip_ADC_SetSampleRate
10002b0c g     O .bss	0000000c tecla_1
10002ae8 g     O .bss	00000004 freeRtosInterruptCallback
1a0016e4 g     F .text	00000010 vTaskSuspendAll
10002b18 g     O .bss	00000008 teclas
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000300 g     F .text	00000022 seccionCriticaEntrar
1a003152 g     F .text	0000003e Chip_SSP_SetBitRate
1a0011a8 g     F .text	00000026 uxListRemove
1a000454 g     F .text	00000024 tarea_b
1a002fb8 g     F .text	00000002 Chip_GPIO_Init
1a004dc8 g     O .text	00000004 OscRateIn
1a003298 g     F .text	0000007c uartInit
1a001578 g     F .text	00000072 xTaskCreateStatic
10002c24 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001a04 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000c3a g     F .text	00000092 xQueueGenericCreateStatic
1a001b00 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000528 g     F .text	0000000c buttonPressed
1a000744 g     F .text	0000000a _close_r
1a003348 g     F .text	000001ac gpioInit
1a0011d0 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001e7c g     F .text	0000006c xTimerGenericCommand
1a0046e0 g     F .text	000000dc __swsetup_r
1a001248  w    F .text	0000001c vApplicationStackOverflowHook
1a003964  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003c0c g     F .text	0000008c __sfp
1a003b90 g     F .text	0000000c __sinit_lock_release
1a0045b4 g     F .text	00000022 __sread
1a000322 g     F .text	00000010 seccionCriticaSalir
1a0035dc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004964 g     F .text	0000000c __malloc_lock
1a002688 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003a74 g     F .text	00000078 _fflush_r
1a005064 g     O .text	00000020 __sf_fake_stdin
1a002c78 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003d1e g     F .text	00000002 __retarget_lock_acquire_recursive
1a003d3e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000334 g     F .text	000000a8 main
1a003d1c g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001174 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002220 g     F .text	00000024 SVC_Handler
1a004632 g     F .text	00000008 __sclose
1a001e18 g     F .text	00000064 xTimerCreateTimerTask
1a003dec g     F .text	000000b4 _malloc_r
1a001914 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002ee8 g     F .text	0000003c Chip_Clock_EnableOpts
1a0026f2 g     F .text	00000008 __stdio_getchar
10002b20 g     O .bss	00000014 objeto
1a000ccc g     F .text	0000004e xQueueGenericCreate
1a002c94 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002d4c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00055c g     F .text	000000a4 fsmButtonUpdate
1a003244 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0034f4 g     F .text	0000006a gpioWrite
1a000740  w    F .text	00000002 _fini
1a004458 g     F .text	00000030 iprintf
1a001818 g     F .text	000000fc xTaskResumeAll
1a004574 g     F .text	00000040 sprintf
1a0004b4 g     F .text	00000074 mensaje_tecla
1a001650 g     F .text	00000094 vTaskStartScheduler
1a002998 g     F .text	00000040 Chip_ADC_Init
10002c14 g     O .bss	00000004 g_pUsbApi
1a002704 g     F .text	00000038 Board_SetupMuxing
1a00064c g     F .text	00000026 QMPool_put
1a002874 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0007c2 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004144 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a003968 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004a80 g     F .text	000001f0 _svfiprintf_r
10002b34 g     O .bss	00000096 array
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001c60 g     F .text	0000000c vTaskMissedYield
10002c24 g       .bss	00000000 _pvHeapStart
1a000478 g     F .text	0000003c tarea_c
1a000178 g       .text	00000000 __section_table_end
1a003190 g     F .text	00000038 Chip_SSP_Init
1a0010c8 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001700 g     F .text	00000118 xTaskIncrementTick
1a0047bc g     F .text	00000048 __swhatbuf_r
1a0024f4 g     F .text	00000020 DAC_IRQHandler
1a002664 g     F .text	00000024 Board_Debug_Init
1a0026e8 g     F .text	0000000a __stdio_putchar
1a000b94 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a0031c8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002c1d g     O .bss	00000001 __lock___at_quick_exit_mutex
10002bcc g     O .bss	00000004 cola
1a0015ea g     F .text	00000066 xTaskCreate
1a002fbc g     F .text	00000158 Chip_SetupCoreClock
1a0045d6 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003ef4 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003c98 g     F .text	0000003c _fwalk_reent
1a002fa4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0019b8 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003b78 g     F .text	0000000c __sfp_lock_release
1a005084 g     O .text	00000020 __sf_fake_stdout
1a004574 g     F .text	00000040 siprintf
1a000600 g     F .text	0000004c QMPool_init
1a001c6c g     F .text	00000020 xTaskGetSchedulerState
1a003964  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10002c1e g     O .bss	00000001 __lock___dd_hash_mutex
1a004804 g     F .text	00000080 __smakebuf_r
10002c1f g     O .bss	00000001 __lock___tz_mutex
1a0021f0 g     F .text	0000002c pxPortInitialiseStack
1a004230 g     F .text	00000228 _printf_i
1a002f24 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002afc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00355e g     F .text	00000068 gpioRead
1a0035f8 g     F .text	0000006c boardInit
1a002244 g     F .text	00000044 vPortEnterCritical
10002af8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003ef4 g     F .text	00000250 _vfprintf_r
1a00054c g     F .text	0000000e fsmButtonInit
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002e5c g     F .text	00000058 Chip_Clock_SetBaseClock
1a00327c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10002c20 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a003b84 g     F .text	0000000c __sinit_lock_acquire
1a0027a8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b9 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a d6 71 ff 53     }............q.S
	...
1a00002c:	21 22 00 1a 85 01 00 1a 00 00 00 00 c1 22 00 1a     !"..........."..
1a00003c:	25 23 00 1a                                         %#..

1a000040 <g_pfnVendorVectors>:
1a000040:	f5 24 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .$..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	dd 35 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .5..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0050e8 	.word	0x1a0050e8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a0050e8 	.word	0x1a0050e8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0050e8 	.word	0x1a0050e8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0050e8 	.word	0x1a0050e8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0050e8 	.word	0x1a0050e8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002b80 	.word	0x00002b80
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <seccionCriticaEntrar>:
#include "task.h"

//workaround para resolver la entrada a seccino critica desde dentro o fuera de una ISR
//Esto implica que todas las funciones tienen qeu tener un parametro mas que implique que esta
//o no en una ISR
uint32_t seccionCriticaEntrar(uint8_t enIsr){
1a000300:	b508      	push	{r3, lr}
   uint32_t basepri = 0;
   if ( enIsr ) {
1a000302:	b150      	cbz	r0, 1a00031a <seccionCriticaEntrar+0x1a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000304:	f3ef 8011 	mrs	r0, BASEPRI
1a000308:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00030c:	f383 8811 	msr	BASEPRI, r3
1a000310:	f3bf 8f6f 	isb	sy
1a000314:	f3bf 8f4f 	dsb	sy
   }
   else {
      portENTER_CRITICAL ( );
   }
   return basepri;
}
1a000318:	bd08      	pop	{r3, pc}
      portENTER_CRITICAL ( );
1a00031a:	f001 ff93 	bl	1a002244 <vPortEnterCritical>
   uint32_t basepri = 0;
1a00031e:	2000      	movs	r0, #0
   return basepri;
1a000320:	e7fa      	b.n	1a000318 <seccionCriticaEntrar+0x18>

1a000322 <seccionCriticaSalir>:
void seccionCriticaSalir(uint8_t enIsr, uint32_t basepri){
   if(enIsr){
1a000322:	b110      	cbz	r0, 1a00032a <seccionCriticaSalir+0x8>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000324:	f381 8811 	msr	BASEPRI, r1
1a000328:	4770      	bx	lr
void seccionCriticaSalir(uint8_t enIsr, uint32_t basepri){
1a00032a:	b508      	push	{r3, lr}
      taskEXIT_CRITICAL_FROM_ISR(basepri);
   }
   else{
      portEXIT_CRITICAL();
1a00032c:	f001 ffac 	bl	1a002288 <vPortExitCritical>
   }
}
1a000330:	bd08      	pop	{r3, pc}
1a000332:	Address 0x000000001a000332 is out of bounds.


1a000334 <main>:
QMPool objeto;

char array[5*30]; // 5 bloques de 30 bytes

int main(void)
{
1a000334:	b500      	push	{lr}
1a000336:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a000338:	f003 f95e 	bl	1a0035f8 <boardInit>

   // UART for debug messages
   uartInit( UART_USB, 115200 );
1a00033c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000340:	2003      	movs	r0, #3
1a000342:	f002 ffa9 	bl	1a003298 <uartInit>
   QMPool_init(&objeto,array,5,30); 	// QM_pool_init(&pool,array,#bloques,bytes de c/bloque)
1a000346:	231e      	movs	r3, #30
1a000348:	2205      	movs	r2, #5
1a00034a:	4918      	ldr	r1, [pc, #96]	; (1a0003ac <main+0x78>)
1a00034c:	4818      	ldr	r0, [pc, #96]	; (1a0003b0 <main+0x7c>)
1a00034e:	f000 f957 	bl	1a000600 <QMPool_init>

   //

   // Inicializo parámetros de las tareas
   tecla_1.name = TEC1;
1a000352:	4a18      	ldr	r2, [pc, #96]	; (1a0003b4 <main+0x80>)
1a000354:	2324      	movs	r3, #36	; 0x24
1a000356:	7053      	strb	r3, [r2, #1]
   tecla_2.name = TEC2;
1a000358:	4b17      	ldr	r3, [pc, #92]	; (1a0003b8 <main+0x84>)
1a00035a:	2125      	movs	r1, #37	; 0x25
1a00035c:	7059      	strb	r1, [r3, #1]
   teclas.tecla_1 = &tecla_1;
1a00035e:	4e17      	ldr	r6, [pc, #92]	; (1a0003bc <main+0x88>)
1a000360:	6032      	str	r2, [r6, #0]
   teclas.tecla_2 = &tecla_2;
1a000362:	6073      	str	r3, [r6, #4]

   // Tarea A: Enciende periódicamente un LED y envía el mensaje "LED ON"
   xTaskCreate(
1a000364:	2400      	movs	r4, #0
1a000366:	9401      	str	r4, [sp, #4]
1a000368:	2501      	movs	r5, #1
1a00036a:	9500      	str	r5, [sp, #0]
1a00036c:	4623      	mov	r3, r4
1a00036e:	22b4      	movs	r2, #180	; 0xb4
1a000370:	4913      	ldr	r1, [pc, #76]	; (1a0003c0 <main+0x8c>)
1a000372:	4814      	ldr	r0, [pc, #80]	; (1a0003c4 <main+0x90>)
1a000374:	f001 f939 	bl	1a0015ea <xTaskCreate>
      0
   );

   // Tarea B: Maneja el antirrebote de las teclas, mide el tiempo de pulsación, y envía el mensaje "TECx yyyy"
   // Recibe como parámetro una estructura que tiene los punteros a las instancias de las teclas
   xTaskCreate(
1a000378:	9401      	str	r4, [sp, #4]
1a00037a:	9500      	str	r5, [sp, #0]
1a00037c:	4633      	mov	r3, r6
1a00037e:	22b4      	movs	r2, #180	; 0xb4
1a000380:	4911      	ldr	r1, [pc, #68]	; (1a0003c8 <main+0x94>)
1a000382:	4812      	ldr	r0, [pc, #72]	; (1a0003cc <main+0x98>)
1a000384:	f001 f931 	bl	1a0015ea <xTaskCreate>
      tskIDLE_PRIORITY+1,         
      0                           
   );

   // Tarea C: Recibe mensajes de las tareas A y B
   xTaskCreate(
1a000388:	9401      	str	r4, [sp, #4]
1a00038a:	9500      	str	r5, [sp, #0]
1a00038c:	4623      	mov	r3, r4
1a00038e:	22b4      	movs	r2, #180	; 0xb4
1a000390:	490f      	ldr	r1, [pc, #60]	; (1a0003d0 <main+0x9c>)
1a000392:	4810      	ldr	r0, [pc, #64]	; (1a0003d4 <main+0xa0>)
1a000394:	f001 f929 	bl	1a0015ea <xTaskCreate>
      tskIDLE_PRIORITY+1,         
      0                           
   );

   // Creación de colas de mensajes
   cola = xQueueCreate(10, sizeof(msg_t));
1a000398:	4622      	mov	r2, r4
1a00039a:	2104      	movs	r1, #4
1a00039c:	200a      	movs	r0, #10
1a00039e:	f000 fc95 	bl	1a000ccc <xQueueGenericCreate>
1a0003a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0003d8 <main+0xa4>)
1a0003a4:	6018      	str	r0, [r3, #0]

   // Iniciar scheduler
   vTaskStartScheduler();
1a0003a6:	f001 f953 	bl	1a001650 <vTaskStartScheduler>

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {
      // Si cae en este while 1 significa que no pudo iniciar el scheduler
   }
1a0003aa:	e7fe      	b.n	1a0003aa <main+0x76>
1a0003ac:	10002b34 	.word	0x10002b34
1a0003b0:	10002b20 	.word	0x10002b20
1a0003b4:	10002b0c 	.word	0x10002b0c
1a0003b8:	10002b00 	.word	0x10002b00
1a0003bc:	10002b18 	.word	0x10002b18
1a0003c0:	1a004c80 	.word	0x1a004c80
1a0003c4:	1a0003dd 	.word	0x1a0003dd
1a0003c8:	1a004c88 	.word	0x1a004c88
1a0003cc:	1a000455 	.word	0x1a000455
1a0003d0:	1a004c90 	.word	0x1a004c90
1a0003d4:	1a000479 	.word	0x1a000479
1a0003d8:	10002bcc 	.word	0x10002bcc

1a0003dc <tarea_a>:
extern QMPool objeto;
extern char array[];

// Parpadea un led cada 1 segundo y envía "LED ON"
void tarea_a( void* taskParmPtr )
{
1a0003dc:	b500      	push	{lr}
1a0003de:	b085      	sub	sp, #20
    // Tarea periodica cada 1000 ms
    portTickType xPeriodicity =  1000 / portTICK_RATE_MS;
    portTickType xLastWakeTime = xTaskGetTickCount();
1a0003e0:	f001 f988 	bl	1a0016f4 <xTaskGetTickCount>
1a0003e4:	9003      	str	r0, [sp, #12]
    const char mensaje[] = "LED ON"; // Mensaje a enviar, de 7 caracteres
1a0003e6:	4b18      	ldr	r3, [pc, #96]	; (1a000448 <tarea_a+0x6c>)
1a0003e8:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003ec:	9001      	str	r0, [sp, #4]
1a0003ee:	f8ad 1008 	strh.w	r1, [sp, #8]
1a0003f2:	0c09      	lsrs	r1, r1, #16
1a0003f4:	f88d 100a 	strb.w	r1, [sp, #10]
1a0003f8:	e004      	b.n	1a000404 <tarea_a+0x28>
			memcpy(p,mensaje, 7);       // Inicializo el mensaje nuevo

			xQueueSend(cola, (void *) &p, portMAX_DELAY); // Envío en la cola el puntero al nuevo mensaje
        }

        vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0003fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0003fe:	a803      	add	r0, sp, #12
1a000400:	f001 fa88 	bl	1a001914 <vTaskDelayUntil>
        gpioToggle( LED1 );
1a000404:	202b      	movs	r0, #43	; 0x2b
1a000406:	f003 f8de 	bl	1a0035c6 <gpioToggle>
        portENTER_CRITICAL ( ); 			// Entrada a seccion critica
1a00040a:	f001 ff1b 	bl	1a002244 <vPortEnterCritical>
        p = QMPool_get(&objeto,0,0);		// "malloc"
1a00040e:	2200      	movs	r2, #0
1a000410:	4611      	mov	r1, r2
1a000412:	480e      	ldr	r0, [pc, #56]	; (1a00044c <tarea_a+0x70>)
1a000414:	f000 f92d 	bl	1a000672 <QMPool_get>
1a000418:	9000      	str	r0, [sp, #0]
        portEXIT_CRITICAL ( );				// Salida de seccion critica
1a00041a:	f001 ff35 	bl	1a002288 <vPortExitCritical>
        if (p != NULL){
1a00041e:	9b00      	ldr	r3, [sp, #0]
1a000420:	2b00      	cmp	r3, #0
1a000422:	d0ea      	beq.n	1a0003fa <tarea_a+0x1e>
			memcpy(p,mensaje, 7);       // Inicializo el mensaje nuevo
1a000424:	9801      	ldr	r0, [sp, #4]
1a000426:	6018      	str	r0, [r3, #0]
1a000428:	f8bd 1008 	ldrh.w	r1, [sp, #8]
1a00042c:	f89d 200a 	ldrb.w	r2, [sp, #10]
1a000430:	8099      	strh	r1, [r3, #4]
1a000432:	719a      	strb	r2, [r3, #6]
			xQueueSend(cola, (void *) &p, portMAX_DELAY); // Envío en la cola el puntero al nuevo mensaje
1a000434:	2300      	movs	r3, #0
1a000436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00043a:	4669      	mov	r1, sp
1a00043c:	4804      	ldr	r0, [pc, #16]	; (1a000450 <tarea_a+0x74>)
1a00043e:	6800      	ldr	r0, [r0, #0]
1a000440:	f000 fc6c 	bl	1a000d1c <xQueueGenericSend>
1a000444:	e7d9      	b.n	1a0003fa <tarea_a+0x1e>
1a000446:	bf00      	nop
1a000448:	1a004c98 	.word	0x1a004c98
1a00044c:	10002b20 	.word	0x10002b20
1a000450:	10002bcc 	.word	0x10002bcc

1a000454 <tarea_b>:
}


// Debounce de cada tecla instanciada (en este caso 2) y envío de mensaje (lo hace dentro de máquina de estados)
void tarea_b(void* taskParmPtr )
{
1a000454:	b510      	push	{r4, lr}
1a000456:	4604      	mov	r4, r0
    teclas_t *teclas = (teclas_t *)taskParmPtr;
    fsmButtonInit(teclas->tecla_1);
1a000458:	6800      	ldr	r0, [r0, #0]
1a00045a:	f000 f877 	bl	1a00054c <fsmButtonInit>
    fsmButtonInit(teclas->tecla_2);
1a00045e:	6860      	ldr	r0, [r4, #4]
1a000460:	f000 f874 	bl	1a00054c <fsmButtonInit>

    while (TRUE)
    {
        fsmButtonUpdate(teclas->tecla_1);
1a000464:	6820      	ldr	r0, [r4, #0]
1a000466:	f000 f879 	bl	1a00055c <fsmButtonUpdate>
        fsmButtonUpdate(teclas->tecla_2);
1a00046a:	6860      	ldr	r0, [r4, #4]
1a00046c:	f000 f876 	bl	1a00055c <fsmButtonUpdate>
        vTaskDelay( 1 / portTICK_RATE_MS);
1a000470:	2001      	movs	r0, #1
1a000472:	f001 faa1 	bl	1a0019b8 <vTaskDelay>
1a000476:	e7f5      	b.n	1a000464 <tarea_b+0x10>

1a000478 <tarea_c>:
    }
}

// Recibe los mensajes, los imprime, y libera la memoria alocada
void tarea_c( void* taskParmPtr )
{
1a000478:	b500      	push	{lr}
1a00047a:	b083      	sub	sp, #12
    char * mensaje;

    while(TRUE) {
        xQueueReceive(cola, &mensaje, portMAX_DELAY);
1a00047c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000480:	a901      	add	r1, sp, #4
1a000482:	4b09      	ldr	r3, [pc, #36]	; (1a0004a8 <tarea_c+0x30>)
1a000484:	6818      	ldr	r0, [r3, #0]
1a000486:	f000 fd71 	bl	1a000f6c <xQueueReceive>
        
        printf("Mensaje: %s\r\n", mensaje);
1a00048a:	9901      	ldr	r1, [sp, #4]
1a00048c:	4807      	ldr	r0, [pc, #28]	; (1a0004ac <tarea_c+0x34>)
1a00048e:	f003 ffe3 	bl	1a004458 <iprintf>
        // Reemplazar aca
        //vPortFree(mensaje);

        //void QMPool_put(QMPool * const me, void *b,uint8_t enISR )

        portENTER_CRITICAL ( ); 			// Entrada a seccion critica
1a000492:	f001 fed7 	bl	1a002244 <vPortEnterCritical>
        QMPool_put(&objeto , (void*)mensaje , 0);
1a000496:	2200      	movs	r2, #0
1a000498:	9901      	ldr	r1, [sp, #4]
1a00049a:	4805      	ldr	r0, [pc, #20]	; (1a0004b0 <tarea_c+0x38>)
1a00049c:	f000 f8d6 	bl	1a00064c <QMPool_put>
        portEXIT_CRITICAL ( );				// Salida de seccion critica
1a0004a0:	f001 fef2 	bl	1a002288 <vPortExitCritical>
1a0004a4:	e7ea      	b.n	1a00047c <tarea_c+0x4>
1a0004a6:	bf00      	nop
1a0004a8:	10002bcc 	.word	0x10002bcc
1a0004ac:	1a004ca0 	.word	0x1a004ca0
1a0004b0:	10002b20 	.word	0x10002b20

1a0004b4 <mensaje_tecla>:

extern xQueueHandle cola;
extern QMPool objeto;

void mensaje_tecla(gpioMap_t tecla, portTickType pressedElapsedTime)
{
1a0004b4:	b570      	push	{r4, r5, r6, lr}
1a0004b6:	b086      	sub	sp, #24
1a0004b8:	4605      	mov	r5, r0
1a0004ba:	460e      	mov	r6, r1
   // Armo el mensaje a mandar
   char msg[] = "TECx Tyyyy\r\n";
1a0004bc:	4b16      	ldr	r3, [pc, #88]	; (1a000518 <mensaje_tecla+0x64>)
1a0004be:	ac02      	add	r4, sp, #8
1a0004c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0004c2:	c407      	stmia	r4!, {r0, r1, r2}
1a0004c4:	7023      	strb	r3, [r4, #0]
   sprintf(msg,"TECx T%04d\r\n",pressedElapsedTime);
1a0004c6:	4632      	mov	r2, r6
1a0004c8:	4914      	ldr	r1, [pc, #80]	; (1a00051c <mensaje_tecla+0x68>)
1a0004ca:	a802      	add	r0, sp, #8
1a0004cc:	f004 f852 	bl	1a004574 <siprintf>
   msg[3] = tecla == TEC1 ? (const char)'1' : (const char)'2';
1a0004d0:	2d24      	cmp	r5, #36	; 0x24
1a0004d2:	d01e      	beq.n	1a000512 <mensaje_tecla+0x5e>
1a0004d4:	2332      	movs	r3, #50	; 0x32
1a0004d6:	f88d 300b 	strb.w	r3, [sp, #11]

   // Aloco memoria para el mensaje
   //char *p = pvPortMalloc(10);
   
   // --
   portENTER_CRITICAL ( ); 			// Entrada a seccion critica
1a0004da:	f001 feb3 	bl	1a002244 <vPortEnterCritical>

   void* p;

   p = QMPool_get(&objeto,0,0);		// "malloc"
1a0004de:	2200      	movs	r2, #0
1a0004e0:	4611      	mov	r1, r2
1a0004e2:	480f      	ldr	r0, [pc, #60]	; (1a000520 <mensaje_tecla+0x6c>)
1a0004e4:	f000 f8c5 	bl	1a000672 <QMPool_get>
1a0004e8:	9001      	str	r0, [sp, #4]

   portEXIT_CRITICAL ( );				// Salida de seccion critica
1a0004ea:	f001 fecd 	bl	1a002288 <vPortExitCritical>
   // --

   if (p != NULL){
1a0004ee:	9b01      	ldr	r3, [sp, #4]
1a0004f0:	b16b      	cbz	r3, 1a00050e <mensaje_tecla+0x5a>
	   	   // Inicializo la memoria recién alocada, con el mesaje
	   memcpy(p,msg, 10);
1a0004f2:	aa02      	add	r2, sp, #8
1a0004f4:	ca03      	ldmia	r2!, {r0, r1}
1a0004f6:	6018      	str	r0, [r3, #0]
1a0004f8:	6059      	str	r1, [r3, #4]
1a0004fa:	8812      	ldrh	r2, [r2, #0]
1a0004fc:	811a      	strh	r2, [r3, #8]
	   // Envío a la cola el puntero al mensaje
	   xQueueSend(cola, (void *) &p, portMAX_DELAY);
1a0004fe:	2300      	movs	r3, #0
1a000500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000504:	a901      	add	r1, sp, #4
1a000506:	4807      	ldr	r0, [pc, #28]	; (1a000524 <mensaje_tecla+0x70>)
1a000508:	6800      	ldr	r0, [r0, #0]
1a00050a:	f000 fc07 	bl	1a000d1c <xQueueGenericSend>
   }


}
1a00050e:	b006      	add	sp, #24
1a000510:	bd70      	pop	{r4, r5, r6, pc}
   msg[3] = tecla == TEC1 ? (const char)'1' : (const char)'2';
1a000512:	2331      	movs	r3, #49	; 0x31
1a000514:	e7df      	b.n	1a0004d6 <mensaje_tecla+0x22>
1a000516:	bf00      	nop
1a000518:	1a004cc0 	.word	0x1a004cc0
1a00051c:	1a004cb0 	.word	0x1a004cb0
1a000520:	10002b20 	.word	0x10002b20
1a000524:	10002bcc 	.word	0x10002bcc

1a000528 <buttonPressed>:


void buttonPressed(  debouncedButton_t *button  )
{
1a000528:	b510      	push	{r4, lr}
1a00052a:	4604      	mov	r4, r0
   //Acá cuento inicio tiempo
   button->pressedTime = xTaskGetTickCount();
1a00052c:	f001 f8e2 	bl	1a0016f4 <xTaskGetTickCount>
1a000530:	6060      	str	r0, [r4, #4]
   // printf("PRESSED %d\r\n",button->name);
}
1a000532:	bd10      	pop	{r4, pc}

1a000534 <buttonReleased>:

void buttonReleased( debouncedButton_t *button   )
{
1a000534:	b510      	push	{r4, lr}
1a000536:	4604      	mov	r4, r0
   //Aca cuento fin tiempo
   button->pressedElapsedTime = xTaskGetTickCount() - button->pressedTime;
1a000538:	f001 f8dc 	bl	1a0016f4 <xTaskGetTickCount>
1a00053c:	6861      	ldr	r1, [r4, #4]
1a00053e:	1a41      	subs	r1, r0, r1
1a000540:	60a1      	str	r1, [r4, #8]
   mensaje_tecla(button->name,button->pressedElapsedTime);
1a000542:	f994 0001 	ldrsb.w	r0, [r4, #1]
1a000546:	f7ff ffb5 	bl	1a0004b4 <mensaje_tecla>
}
1a00054a:	bd10      	pop	{r4, pc}

1a00054c <fsmButtonInit>:
//    fsmButtonState = BUTTON_UP;
// }

void fsmButtonInit( debouncedButton_t *button  )
{
   button->state = BUTTON_UP;  // Set initial state
1a00054c:	2300      	movs	r3, #0
1a00054e:	7003      	strb	r3, [r0, #0]
   button->pressedTime = 0;
1a000550:	6043      	str	r3, [r0, #4]
   button->pressedElapsedTime = 500;
1a000552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a000556:	6083      	str	r3, [r0, #8]
   //button->name = TEC1;
   // printf("INIT\r\n");
}
1a000558:	4770      	bx	lr
1a00055a:	Address 0x000000001a00055a is out of bounds.


1a00055c <fsmButtonUpdate>:

// FSM Update Sate Function
void fsmButtonUpdate( debouncedButton_t *button )
{
1a00055c:	b510      	push	{r4, lr}
1a00055e:	4604      	mov	r4, r0
   static uint8_t contFalling = 0;
   static uint8_t contRising = 0;
   
   switch( button->state ){
1a000560:	7803      	ldrb	r3, [r0, #0]
1a000562:	2b03      	cmp	r3, #3
1a000564:	d81b      	bhi.n	1a00059e <fsmButtonUpdate+0x42>
1a000566:	e8df f003 	tbb	[pc, r3]
1a00056a:	0a02      	.short	0x0a02
1a00056c:	2c12      	.short	0x2c12

      case STATE_BUTTON_UP: 
         /* CHECK TRANSITION CONDITIONS */
         if( !gpioRead(button->name) ){
1a00056e:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a000572:	f002 fff4 	bl	1a00355e <gpioRead>
1a000576:	b990      	cbnz	r0, 1a00059e <fsmButtonUpdate+0x42>
            button->state = STATE_BUTTON_FALLING;
1a000578:	2302      	movs	r3, #2
1a00057a:	7023      	strb	r3, [r4, #0]
1a00057c:	e00f      	b.n	1a00059e <fsmButtonUpdate+0x42>
         }
      break;

      case STATE_BUTTON_DOWN:
         /* CHECK TRANSITION CONDITIONS */
         if( gpioRead(button->name) ){
1a00057e:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a000582:	f002 ffec 	bl	1a00355e <gpioRead>
1a000586:	b150      	cbz	r0, 1a00059e <fsmButtonUpdate+0x42>
            button->state = STATE_BUTTON_RISING;
1a000588:	2303      	movs	r3, #3
1a00058a:	7023      	strb	r3, [r4, #0]
1a00058c:	e007      	b.n	1a00059e <fsmButtonUpdate+0x42>
         }
      break;

      case STATE_BUTTON_FALLING:          
         /* CHECK TRANSITION CONDITIONS */
         if( contFalling >= 40 ){
1a00058e:	4b1a      	ldr	r3, [pc, #104]	; (1a0005f8 <fsmButtonUpdate+0x9c>)
1a000590:	781b      	ldrb	r3, [r3, #0]
1a000592:	2b27      	cmp	r3, #39	; 0x27
1a000594:	d804      	bhi.n	1a0005a0 <fsmButtonUpdate+0x44>
            } else{
               button->state = STATE_BUTTON_UP;
            }
            contFalling = 0;
         }
         contFalling++;
1a000596:	4a18      	ldr	r2, [pc, #96]	; (1a0005f8 <fsmButtonUpdate+0x9c>)
1a000598:	7813      	ldrb	r3, [r2, #0]
1a00059a:	3301      	adds	r3, #1
1a00059c:	7013      	strb	r3, [r2, #0]

      default:
         //fsmButtonError();
      break;
   }
}
1a00059e:	bd10      	pop	{r4, pc}
            if( !gpioRead(button->name) ){
1a0005a0:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a0005a4:	f002 ffdb 	bl	1a00355e <gpioRead>
1a0005a8:	b128      	cbz	r0, 1a0005b6 <fsmButtonUpdate+0x5a>
               button->state = STATE_BUTTON_UP;
1a0005aa:	2300      	movs	r3, #0
1a0005ac:	7023      	strb	r3, [r4, #0]
            contFalling = 0;
1a0005ae:	4b12      	ldr	r3, [pc, #72]	; (1a0005f8 <fsmButtonUpdate+0x9c>)
1a0005b0:	2200      	movs	r2, #0
1a0005b2:	701a      	strb	r2, [r3, #0]
1a0005b4:	e7ef      	b.n	1a000596 <fsmButtonUpdate+0x3a>
               button->state = STATE_BUTTON_DOWN;
1a0005b6:	2301      	movs	r3, #1
1a0005b8:	7023      	strb	r3, [r4, #0]
               buttonPressed(button);
1a0005ba:	4620      	mov	r0, r4
1a0005bc:	f7ff ffb4 	bl	1a000528 <buttonPressed>
1a0005c0:	e7f5      	b.n	1a0005ae <fsmButtonUpdate+0x52>
         if( contRising >= 40 ){
1a0005c2:	4b0e      	ldr	r3, [pc, #56]	; (1a0005fc <fsmButtonUpdate+0xa0>)
1a0005c4:	781b      	ldrb	r3, [r3, #0]
1a0005c6:	2b27      	cmp	r3, #39	; 0x27
1a0005c8:	d804      	bhi.n	1a0005d4 <fsmButtonUpdate+0x78>
         contRising++;
1a0005ca:	4a0c      	ldr	r2, [pc, #48]	; (1a0005fc <fsmButtonUpdate+0xa0>)
1a0005cc:	7813      	ldrb	r3, [r2, #0]
1a0005ce:	3301      	adds	r3, #1
1a0005d0:	7013      	strb	r3, [r2, #0]
}
1a0005d2:	e7e4      	b.n	1a00059e <fsmButtonUpdate+0x42>
            if( gpioRead(button->name) ){
1a0005d4:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a0005d8:	f002 ffc1 	bl	1a00355e <gpioRead>
1a0005dc:	b928      	cbnz	r0, 1a0005ea <fsmButtonUpdate+0x8e>
               button->state = STATE_BUTTON_DOWN;
1a0005de:	2301      	movs	r3, #1
1a0005e0:	7023      	strb	r3, [r4, #0]
            contRising = 0;
1a0005e2:	4b06      	ldr	r3, [pc, #24]	; (1a0005fc <fsmButtonUpdate+0xa0>)
1a0005e4:	2200      	movs	r2, #0
1a0005e6:	701a      	strb	r2, [r3, #0]
1a0005e8:	e7ef      	b.n	1a0005ca <fsmButtonUpdate+0x6e>
               button->state = STATE_BUTTON_UP;
1a0005ea:	2300      	movs	r3, #0
1a0005ec:	7023      	strb	r3, [r4, #0]
               buttonReleased(button);
1a0005ee:	4620      	mov	r0, r4
1a0005f0:	f7ff ffa0 	bl	1a000534 <buttonReleased>
1a0005f4:	e7f5      	b.n	1a0005e2 <fsmButtonUpdate+0x86>
1a0005f6:	bf00      	nop
1a0005f8:	100000a4 	.word	0x100000a4
1a0005fc:	100000a5 	.word	0x100000a5

1a000600 <QMPool_init>:
#include "FreeRTOS.h"
#include "qmpool.h"
#include "utilities.h"

void QMPool_init(QMPool * const me, void * const poolSto, uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a000600:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock       *fb;
    uint_fast16_t nblocks;
    me->free_head = poolSto;
1a000602:	6001      	str	r1, [r0, #0]
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock); /* round up the blockSize to fit an integer free blocks, no division */
1a000604:	2404      	movs	r4, #4
1a000606:	8184      	strh	r4, [r0, #12]
    nblocks       = (uint_fast16_t)1;               /* start with just one */
1a000608:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) { /* #free blocks that fit in one memory block */
1a00060a:	8984      	ldrh	r4, [r0, #12]
1a00060c:	b29d      	uxth	r5, r3
1a00060e:	42ac      	cmp	r4, r5
1a000610:	d203      	bcs.n	1a00061a <QMPool_init+0x1a>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a000612:	3404      	adds	r4, #4
1a000614:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000616:	3601      	adds	r6, #1
1a000618:	e7f7      	b.n	1a00060a <QMPool_init+0xa>
    }
    blockSize = (uint_fast16_t)me->blockSize;       /* round-up to nearest block */
1a00061a:	4627      	mov	r7, r4
    poolSize -= (uint_fast32_t)blockSize;           /* don't count the last block */
1a00061c:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;                       /* the last block already in the pool */
1a00061e:	2301      	movs	r3, #1
1a000620:	81c3      	strh	r3, [r0, #14]
    fb        = (QFreeBlock *)me->free_head;        /* start at the head of the free list */
1a000622:	6803      	ldr	r3, [r0, #0]
    while (poolSize >= (uint_fast32_t)blockSize) {  /* chain all blocks together in a free-list... */
1a000624:	e007      	b.n	1a000636 <QMPool_init+0x36>
        fb->next  = &fb[nblocks];                   /* point next link to next block */
1a000626:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a00062a:	601a      	str	r2, [r3, #0]
        fb        = fb->next;                       /* advance to the next block */
1a00062c:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize;       /* reduce available pool size */
1a00062e:	1be4      	subs	r4, r4, r7
        ++me->nTot;                                 /* increment the number of blocks so far */
1a000630:	89c5      	ldrh	r5, [r0, #14]
1a000632:	3501      	adds	r5, #1
1a000634:	81c5      	strh	r5, [r0, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {  /* chain all blocks together in a free-list... */
1a000636:	42bc      	cmp	r4, r7
1a000638:	d2f5      	bcs.n	1a000626 <QMPool_init+0x26>
    }
    fb->next  = (QFreeBlock *)0;                    /* the last link points to NULL */
1a00063a:	2200      	movs	r2, #0
1a00063c:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;                           /* all blocks are free */
1a00063e:	89c2      	ldrh	r2, [r0, #14]
1a000640:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;                           /* the minimum number of free blocks */
1a000642:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;                            /* the original start this pool buffer */
1a000644:	6041      	str	r1, [r0, #4]
    me->end   = fb;                                 /* the last block in this pool */
1a000646:	6083      	str	r3, [r0, #8]
}
1a000648:	bcf0      	pop	{r4, r5, r6, r7}
1a00064a:	4770      	bx	lr

1a00064c <QMPool_put>:

void QMPool_put(QMPool * const me, void *b,uint8_t enISR )
{
1a00064c:	b570      	push	{r4, r5, r6, lr}
1a00064e:	4604      	mov	r4, r0
1a000650:	460e      	mov	r6, r1
1a000652:	4615      	mov	r5, r2
   uint32_t basepri = 0;
   basepri= seccionCriticaEntrar(enISR);
1a000654:	4610      	mov	r0, r2
1a000656:	f7ff fe53 	bl	1a000300 <seccionCriticaEntrar>
      ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head; /* link into list */
1a00065a:	6823      	ldr	r3, [r4, #0]
1a00065c:	6033      	str	r3, [r6, #0]
      me->free_head = b;                                     /* set as new head of the free list */
1a00065e:	6026      	str	r6, [r4, #0]
      ++me->nFree;                                           /* one more free block in this pool */
1a000660:	8a23      	ldrh	r3, [r4, #16]
1a000662:	3301      	adds	r3, #1
1a000664:	b29b      	uxth	r3, r3
1a000666:	8223      	strh	r3, [r4, #16]
   seccionCriticaSalir(enISR,basepri);
1a000668:	4601      	mov	r1, r0
1a00066a:	4628      	mov	r0, r5
1a00066c:	f7ff fe59 	bl	1a000322 <seccionCriticaSalir>
}
1a000670:	bd70      	pop	{r4, r5, r6, pc}

1a000672 <QMPool_get>:

void *QMPool_get(QMPool * const me, uint_fast16_t const margin,uint8_t enISR )
{
1a000672:	b570      	push	{r4, r5, r6, lr}
1a000674:	4604      	mov	r4, r0
1a000676:	460d      	mov	r5, r1
1a000678:	4616      	mov	r6, r2
   QFreeBlock *fb;
   uint32_t basepri = 0;
   basepri= seccionCriticaEntrar(enISR);
1a00067a:	4610      	mov	r0, r2
1a00067c:	f7ff fe40 	bl	1a000300 <seccionCriticaEntrar>
1a000680:	4601      	mov	r1, r0
      if (me->nFree > (QMPoolCtr)margin) {               /* have more free blocks than the requested margin? */
1a000682:	8a23      	ldrh	r3, [r4, #16]
1a000684:	b29b      	uxth	r3, r3
1a000686:	b2ad      	uxth	r5, r5
1a000688:	42ab      	cmp	r3, r5
1a00068a:	d912      	bls.n	1a0006b2 <QMPool_get+0x40>
         fb            = (QFreeBlock *)me->free_head;    /* get a free block */
1a00068c:	6825      	ldr	r5, [r4, #0]
         me->free_head = fb->next;                       /* set the head to the next free block */
1a00068e:	682b      	ldr	r3, [r5, #0]
1a000690:	6023      	str	r3, [r4, #0]
         --me->nFree;                                    /* one less free block */
1a000692:	8a23      	ldrh	r3, [r4, #16]
1a000694:	3b01      	subs	r3, #1
1a000696:	b29b      	uxth	r3, r3
1a000698:	8223      	strh	r3, [r4, #16]
         if (me->nMin > me->nFree) me->nMin = me->nFree; /* remember the new minimum */
1a00069a:	8a62      	ldrh	r2, [r4, #18]
1a00069c:	8a23      	ldrh	r3, [r4, #16]
1a00069e:	b29b      	uxth	r3, r3
1a0006a0:	429a      	cmp	r2, r3
1a0006a2:	d901      	bls.n	1a0006a8 <QMPool_get+0x36>
1a0006a4:	8a23      	ldrh	r3, [r4, #16]
1a0006a6:	8263      	strh	r3, [r4, #18]
      }
      else
         fb = (QFreeBlock *)0;
   seccionCriticaSalir(enISR,basepri);
1a0006a8:	4630      	mov	r0, r6
1a0006aa:	f7ff fe3a 	bl	1a000322 <seccionCriticaSalir>
   return fb;                                         /* return the block or NULL pointer to the caller */
}
1a0006ae:	4628      	mov	r0, r5
1a0006b0:	bd70      	pop	{r4, r5, r6, pc}
         fb = (QFreeBlock *)0;
1a0006b2:	2500      	movs	r5, #0
1a0006b4:	e7f8      	b.n	1a0006a8 <QMPool_get+0x36>

1a0006b6 <initialise_monitor_handles>:
}
1a0006b6:	4770      	bx	lr

1a0006b8 <Reset_Handler>:
void Reset_Handler(void) {
1a0006b8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0006ba:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0006bc:	4b19      	ldr	r3, [pc, #100]	; (1a000724 <Reset_Handler+0x6c>)
1a0006be:	4a1a      	ldr	r2, [pc, #104]	; (1a000728 <Reset_Handler+0x70>)
1a0006c0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0006c2:	3304      	adds	r3, #4
1a0006c4:	4a19      	ldr	r2, [pc, #100]	; (1a00072c <Reset_Handler+0x74>)
1a0006c6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006c8:	2300      	movs	r3, #0
1a0006ca:	e005      	b.n	1a0006d8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006cc:	4a18      	ldr	r2, [pc, #96]	; (1a000730 <Reset_Handler+0x78>)
1a0006ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006d6:	3301      	adds	r3, #1
1a0006d8:	2b07      	cmp	r3, #7
1a0006da:	d9f7      	bls.n	1a0006cc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0006dc:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0006de:	4b15      	ldr	r3, [pc, #84]	; (1a000734 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0006e0:	e007      	b.n	1a0006f2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0006e2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0006e6:	689a      	ldr	r2, [r3, #8]
1a0006e8:	6859      	ldr	r1, [r3, #4]
1a0006ea:	6818      	ldr	r0, [r3, #0]
1a0006ec:	f7ff fd4d 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0006f0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0006f2:	4a11      	ldr	r2, [pc, #68]	; (1a000738 <Reset_Handler+0x80>)
1a0006f4:	4293      	cmp	r3, r2
1a0006f6:	d3f4      	bcc.n	1a0006e2 <Reset_Handler+0x2a>
1a0006f8:	e006      	b.n	1a000708 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0006fa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0006fc:	6859      	ldr	r1, [r3, #4]
1a0006fe:	f854 0b08 	ldr.w	r0, [r4], #8
1a000702:	f7ff fd51 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000706:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000708:	4a0c      	ldr	r2, [pc, #48]	; (1a00073c <Reset_Handler+0x84>)
1a00070a:	4293      	cmp	r3, r2
1a00070c:	d3f5      	bcc.n	1a0006fa <Reset_Handler+0x42>
    SystemInit();
1a00070e:	f002 fd99 	bl	1a003244 <SystemInit>
    __libc_init_array();
1a000712:	f003 fadf 	bl	1a003cd4 <__libc_init_array>
    initialise_monitor_handles();
1a000716:	f7ff ffce 	bl	1a0006b6 <initialise_monitor_handles>
    main();
1a00071a:	f7ff fe0b 	bl	1a000334 <main>
        __asm__ volatile("wfi");
1a00071e:	bf30      	wfi
1a000720:	e7fd      	b.n	1a00071e <Reset_Handler+0x66>
1a000722:	bf00      	nop
1a000724:	40053100 	.word	0x40053100
1a000728:	10df1000 	.word	0x10df1000
1a00072c:	01dff7ff 	.word	0x01dff7ff
1a000730:	e000e280 	.word	0xe000e280
1a000734:	1a000114 	.word	0x1a000114
1a000738:	1a000150 	.word	0x1a000150
1a00073c:	1a000178 	.word	0x1a000178

1a000740 <_fini>:
void _fini(void) {}
1a000740:	4770      	bx	lr

1a000742 <_init>:
void _init(void) {}
1a000742:	4770      	bx	lr

1a000744 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000744:	2309      	movs	r3, #9
1a000746:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00074c:	4770      	bx	lr

1a00074e <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00074e:	2358      	movs	r3, #88	; 0x58
1a000750:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000756:	4770      	bx	lr

1a000758 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000758:	2902      	cmp	r1, #2
1a00075a:	d904      	bls.n	1a000766 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00075c:	2309      	movs	r3, #9
1a00075e:	6003      	str	r3, [r0, #0]
       return -1;
1a000760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000764:	4770      	bx	lr
       return 1;
1a000766:	2001      	movs	r0, #1
   }
}
1a000768:	4770      	bx	lr

1a00076a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00076a:	2358      	movs	r3, #88	; 0x58
1a00076c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00076e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000772:	4770      	bx	lr

1a000774 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000774:	2902      	cmp	r1, #2
1a000776:	d81f      	bhi.n	1a0007b8 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00077c:	461d      	mov	r5, r3
1a00077e:	4617      	mov	r7, r2
1a000780:	4606      	mov	r6, r0
  size_t i = 0;
1a000782:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000784:	42ac      	cmp	r4, r5
1a000786:	d211      	bcs.n	1a0007ac <_read_r+0x38>
         int c = __stdio_getchar();
1a000788:	f001 ffb3 	bl	1a0026f2 <__stdio_getchar>
         if( c != -1 ){
1a00078c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000790:	d0f8      	beq.n	1a000784 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000792:	f104 0801 	add.w	r8, r4, #1
1a000796:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000798:	280d      	cmp	r0, #13
1a00079a:	d003      	beq.n	1a0007a4 <_read_r+0x30>
1a00079c:	280a      	cmp	r0, #10
1a00079e:	d001      	beq.n	1a0007a4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0007a0:	4644      	mov	r4, r8
1a0007a2:	e7ef      	b.n	1a000784 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0007a4:	f001 ffa5 	bl	1a0026f2 <__stdio_getchar>
               return i;
1a0007a8:	4640      	mov	r0, r8
1a0007aa:	e003      	b.n	1a0007b4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0007ac:	2313      	movs	r3, #19
1a0007ae:	6033      	str	r3, [r6, #0]
      return -1;
1a0007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0007b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0007b8:	2313      	movs	r3, #19
1a0007ba:	6003      	str	r3, [r0, #0]
      return -1;
1a0007bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0007c0:	4770      	bx	lr

1a0007c2 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0007c2:	2902      	cmp	r1, #2
1a0007c4:	d80c      	bhi.n	1a0007e0 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0007c6:	b570      	push	{r4, r5, r6, lr}
1a0007c8:	461d      	mov	r5, r3
1a0007ca:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0007cc:	2400      	movs	r4, #0
1a0007ce:	42ac      	cmp	r4, r5
1a0007d0:	d204      	bcs.n	1a0007dc <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0007d2:	5d30      	ldrb	r0, [r6, r4]
1a0007d4:	f001 ff88 	bl	1a0026e8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0007d8:	3401      	adds	r4, #1
1a0007da:	e7f8      	b.n	1a0007ce <_write_r+0xc>
       return n;
1a0007dc:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0007de:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0007e0:	2313      	movs	r3, #19
1a0007e2:	6003      	str	r3, [r0, #0]
       return -1;
1a0007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0007e8:	4770      	bx	lr
1a0007ea:	Address 0x000000001a0007ea is out of bounds.


1a0007ec <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0007ec:	4b05      	ldr	r3, [pc, #20]	; (1a000804 <_sbrk_r+0x18>)
1a0007ee:	681b      	ldr	r3, [r3, #0]
1a0007f0:	b123      	cbz	r3, 1a0007fc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0007f2:	4b04      	ldr	r3, [pc, #16]	; (1a000804 <_sbrk_r+0x18>)
1a0007f4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0007f6:	4401      	add	r1, r0
1a0007f8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0007fa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0007fc:	4b01      	ldr	r3, [pc, #4]	; (1a000804 <_sbrk_r+0x18>)
1a0007fe:	4a02      	ldr	r2, [pc, #8]	; (1a000808 <_sbrk_r+0x1c>)
1a000800:	601a      	str	r2, [r3, #0]
1a000802:	e7f6      	b.n	1a0007f2 <_sbrk_r+0x6>
1a000804:	100000a8 	.word	0x100000a8
1a000808:	10002c24 	.word	0x10002c24

1a00080c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a00080c:	4a12      	ldr	r2, [pc, #72]	; (1a000858 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00080e:	f012 0f07 	tst.w	r2, #7
1a000812:	d007      	beq.n	1a000824 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000814:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000816:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a00081a:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00081e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000820:	460a      	mov	r2, r1
1a000822:	e001      	b.n	1a000828 <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000828:	480c      	ldr	r0, [pc, #48]	; (1a00085c <prvHeapInit+0x50>)
1a00082a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00082c:	2100      	movs	r1, #0
1a00082e:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000830:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000832:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000834:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000838:	4809      	ldr	r0, [pc, #36]	; (1a000860 <prvHeapInit+0x54>)
1a00083a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00083c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a00083e:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000840:	1a99      	subs	r1, r3, r2
1a000842:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000844:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000846:	4b07      	ldr	r3, [pc, #28]	; (1a000864 <prvHeapInit+0x58>)
1a000848:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00084a:	4b07      	ldr	r3, [pc, #28]	; (1a000868 <prvHeapInit+0x5c>)
1a00084c:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a00084e:	4b07      	ldr	r3, [pc, #28]	; (1a00086c <prvHeapInit+0x60>)
1a000850:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000854:	601a      	str	r2, [r3, #0]
}
1a000856:	4770      	bx	lr
1a000858:	100000b0 	.word	0x100000b0
1a00085c:	100020bc 	.word	0x100020bc
1a000860:	100000ac 	.word	0x100000ac
1a000864:	100020b8 	.word	0x100020b8
1a000868:	100020b4 	.word	0x100020b4
1a00086c:	100020b0 	.word	0x100020b0

1a000870 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000870:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000872:	4a13      	ldr	r2, [pc, #76]	; (1a0008c0 <prvInsertBlockIntoFreeList+0x50>)
1a000874:	e000      	b.n	1a000878 <prvInsertBlockIntoFreeList+0x8>
1a000876:	461a      	mov	r2, r3
1a000878:	6813      	ldr	r3, [r2, #0]
1a00087a:	4283      	cmp	r3, r0
1a00087c:	d3fb      	bcc.n	1a000876 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00087e:	6851      	ldr	r1, [r2, #4]
1a000880:	1854      	adds	r4, r2, r1
1a000882:	4284      	cmp	r4, r0
1a000884:	d00a      	beq.n	1a00089c <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000886:	6841      	ldr	r1, [r0, #4]
1a000888:	1844      	adds	r4, r0, r1
1a00088a:	42a3      	cmp	r3, r4
1a00088c:	d00b      	beq.n	1a0008a6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a00088e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000890:	4290      	cmp	r0, r2
1a000892:	d000      	beq.n	1a000896 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000894:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000896:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00089a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00089c:	6840      	ldr	r0, [r0, #4]
1a00089e:	4401      	add	r1, r0
1a0008a0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a0008a2:	4610      	mov	r0, r2
1a0008a4:	e7ef      	b.n	1a000886 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0008a6:	4c07      	ldr	r4, [pc, #28]	; (1a0008c4 <prvInsertBlockIntoFreeList+0x54>)
1a0008a8:	6824      	ldr	r4, [r4, #0]
1a0008aa:	42a3      	cmp	r3, r4
1a0008ac:	d006      	beq.n	1a0008bc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0008ae:	685b      	ldr	r3, [r3, #4]
1a0008b0:	4419      	add	r1, r3
1a0008b2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0008b4:	6813      	ldr	r3, [r2, #0]
1a0008b6:	681b      	ldr	r3, [r3, #0]
1a0008b8:	6003      	str	r3, [r0, #0]
1a0008ba:	e7e9      	b.n	1a000890 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0008bc:	6004      	str	r4, [r0, #0]
1a0008be:	e7e7      	b.n	1a000890 <prvInsertBlockIntoFreeList+0x20>
1a0008c0:	100020bc 	.word	0x100020bc
1a0008c4:	100000ac 	.word	0x100000ac

1a0008c8 <pvPortMalloc>:
{
1a0008c8:	b570      	push	{r4, r5, r6, lr}
1a0008ca:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0008cc:	f000 ff0a 	bl	1a0016e4 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0008d0:	4b3f      	ldr	r3, [pc, #252]	; (1a0009d0 <pvPortMalloc+0x108>)
1a0008d2:	681b      	ldr	r3, [r3, #0]
1a0008d4:	b1bb      	cbz	r3, 1a000906 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0008d6:	4b3f      	ldr	r3, [pc, #252]	; (1a0009d4 <pvPortMalloc+0x10c>)
1a0008d8:	681b      	ldr	r3, [r3, #0]
1a0008da:	421c      	tst	r4, r3
1a0008dc:	d116      	bne.n	1a00090c <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a0008de:	b334      	cbz	r4, 1a00092e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a0008e0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0008e2:	f014 0f07 	tst.w	r4, #7
1a0008e6:	d022      	beq.n	1a00092e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0008e8:	f024 0407 	bic.w	r4, r4, #7
1a0008ec:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0008ee:	f004 0307 	and.w	r3, r4, #7
1a0008f2:	b1e3      	cbz	r3, 1a00092e <pvPortMalloc+0x66>
	__asm volatile
1a0008f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008f8:	f383 8811 	msr	BASEPRI, r3
1a0008fc:	f3bf 8f6f 	isb	sy
1a000900:	f3bf 8f4f 	dsb	sy
1a000904:	e7fe      	b.n	1a000904 <pvPortMalloc+0x3c>
			prvHeapInit();
1a000906:	f7ff ff81 	bl	1a00080c <prvHeapInit>
1a00090a:	e7e4      	b.n	1a0008d6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a00090c:	f000 ff84 	bl	1a001818 <xTaskResumeAll>
void *pvReturn = NULL;
1a000910:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000912:	f000 fc8b 	bl	1a00122c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000916:	f016 0f07 	tst.w	r6, #7
1a00091a:	d057      	beq.n	1a0009cc <pvPortMalloc+0x104>
1a00091c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000920:	f383 8811 	msr	BASEPRI, r3
1a000924:	f3bf 8f6f 	isb	sy
1a000928:	f3bf 8f4f 	dsb	sy
1a00092c:	e7fe      	b.n	1a00092c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00092e:	b134      	cbz	r4, 1a00093e <pvPortMalloc+0x76>
1a000930:	4b29      	ldr	r3, [pc, #164]	; (1a0009d8 <pvPortMalloc+0x110>)
1a000932:	681b      	ldr	r3, [r3, #0]
1a000934:	42a3      	cmp	r3, r4
1a000936:	d306      	bcc.n	1a000946 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000938:	4b28      	ldr	r3, [pc, #160]	; (1a0009dc <pvPortMalloc+0x114>)
1a00093a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00093c:	e009      	b.n	1a000952 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00093e:	f000 ff6b 	bl	1a001818 <xTaskResumeAll>
void *pvReturn = NULL;
1a000942:	2600      	movs	r6, #0
1a000944:	e7e5      	b.n	1a000912 <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a000946:	f000 ff67 	bl	1a001818 <xTaskResumeAll>
void *pvReturn = NULL;
1a00094a:	2600      	movs	r6, #0
1a00094c:	e7e1      	b.n	1a000912 <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a00094e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000950:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000952:	686a      	ldr	r2, [r5, #4]
1a000954:	42a2      	cmp	r2, r4
1a000956:	d202      	bcs.n	1a00095e <pvPortMalloc+0x96>
1a000958:	682a      	ldr	r2, [r5, #0]
1a00095a:	2a00      	cmp	r2, #0
1a00095c:	d1f7      	bne.n	1a00094e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00095e:	4a1c      	ldr	r2, [pc, #112]	; (1a0009d0 <pvPortMalloc+0x108>)
1a000960:	6812      	ldr	r2, [r2, #0]
1a000962:	42aa      	cmp	r2, r5
1a000964:	d014      	beq.n	1a000990 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000966:	681e      	ldr	r6, [r3, #0]
1a000968:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00096a:	682a      	ldr	r2, [r5, #0]
1a00096c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00096e:	686b      	ldr	r3, [r5, #4]
1a000970:	1b1b      	subs	r3, r3, r4
1a000972:	2b10      	cmp	r3, #16
1a000974:	d914      	bls.n	1a0009a0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000976:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000978:	f010 0f07 	tst.w	r0, #7
1a00097c:	d00c      	beq.n	1a000998 <pvPortMalloc+0xd0>
1a00097e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000982:	f383 8811 	msr	BASEPRI, r3
1a000986:	f3bf 8f6f 	isb	sy
1a00098a:	f3bf 8f4f 	dsb	sy
1a00098e:	e7fe      	b.n	1a00098e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000990:	f000 ff42 	bl	1a001818 <xTaskResumeAll>
void *pvReturn = NULL;
1a000994:	2600      	movs	r6, #0
1a000996:	e7bc      	b.n	1a000912 <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000998:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00099a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a00099c:	f7ff ff68 	bl	1a000870 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0009a0:	686a      	ldr	r2, [r5, #4]
1a0009a2:	490d      	ldr	r1, [pc, #52]	; (1a0009d8 <pvPortMalloc+0x110>)
1a0009a4:	680b      	ldr	r3, [r1, #0]
1a0009a6:	1a9b      	subs	r3, r3, r2
1a0009a8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0009aa:	490d      	ldr	r1, [pc, #52]	; (1a0009e0 <pvPortMalloc+0x118>)
1a0009ac:	6809      	ldr	r1, [r1, #0]
1a0009ae:	428b      	cmp	r3, r1
1a0009b0:	d201      	bcs.n	1a0009b6 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0009b2:	490b      	ldr	r1, [pc, #44]	; (1a0009e0 <pvPortMalloc+0x118>)
1a0009b4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0009b6:	4b07      	ldr	r3, [pc, #28]	; (1a0009d4 <pvPortMalloc+0x10c>)
1a0009b8:	681b      	ldr	r3, [r3, #0]
1a0009ba:	4313      	orrs	r3, r2
1a0009bc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0009be:	2300      	movs	r3, #0
1a0009c0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0009c2:	f000 ff29 	bl	1a001818 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0009c6:	2e00      	cmp	r6, #0
1a0009c8:	d1a5      	bne.n	1a000916 <pvPortMalloc+0x4e>
1a0009ca:	e7a2      	b.n	1a000912 <pvPortMalloc+0x4a>
}
1a0009cc:	4630      	mov	r0, r6
1a0009ce:	bd70      	pop	{r4, r5, r6, pc}
1a0009d0:	100000ac 	.word	0x100000ac
1a0009d4:	100020b0 	.word	0x100020b0
1a0009d8:	100020b4 	.word	0x100020b4
1a0009dc:	100020bc 	.word	0x100020bc
1a0009e0:	100020b8 	.word	0x100020b8

1a0009e4 <vPortFree>:
	if( pv != NULL )
1a0009e4:	b380      	cbz	r0, 1a000a48 <vPortFree+0x64>
{
1a0009e6:	b538      	push	{r3, r4, r5, lr}
1a0009e8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0009ea:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0009ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0009f2:	4916      	ldr	r1, [pc, #88]	; (1a000a4c <vPortFree+0x68>)
1a0009f4:	6809      	ldr	r1, [r1, #0]
1a0009f6:	420a      	tst	r2, r1
1a0009f8:	d108      	bne.n	1a000a0c <vPortFree+0x28>
1a0009fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009fe:	f383 8811 	msr	BASEPRI, r3
1a000a02:	f3bf 8f6f 	isb	sy
1a000a06:	f3bf 8f4f 	dsb	sy
1a000a0a:	e7fe      	b.n	1a000a0a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000a0c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000a10:	b140      	cbz	r0, 1a000a24 <vPortFree+0x40>
1a000a12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a16:	f383 8811 	msr	BASEPRI, r3
1a000a1a:	f3bf 8f6f 	isb	sy
1a000a1e:	f3bf 8f4f 	dsb	sy
1a000a22:	e7fe      	b.n	1a000a22 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000a24:	ea22 0201 	bic.w	r2, r2, r1
1a000a28:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000a2c:	f000 fe5a 	bl	1a0016e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000a30:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000a34:	4a06      	ldr	r2, [pc, #24]	; (1a000a50 <vPortFree+0x6c>)
1a000a36:	6813      	ldr	r3, [r2, #0]
1a000a38:	440b      	add	r3, r1
1a000a3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000a3c:	4628      	mov	r0, r5
1a000a3e:	f7ff ff17 	bl	1a000870 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000a42:	f000 fee9 	bl	1a001818 <xTaskResumeAll>
}
1a000a46:	bd38      	pop	{r3, r4, r5, pc}
1a000a48:	4770      	bx	lr
1a000a4a:	bf00      	nop
1a000a4c:	100020b0 	.word	0x100020b0
1a000a50:	100020b4 	.word	0x100020b4

1a000a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000a54:	b510      	push	{r4, lr}
1a000a56:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000a58:	f001 fbf4 	bl	1a002244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000a5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a60:	429a      	cmp	r2, r3
1a000a62:	d004      	beq.n	1a000a6e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000a64:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000a66:	f001 fc0f 	bl	1a002288 <vPortExitCritical>

	return xReturn;
}
1a000a6a:	4620      	mov	r0, r4
1a000a6c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000a6e:	2401      	movs	r4, #1
1a000a70:	e7f9      	b.n	1a000a66 <prvIsQueueFull+0x12>

1a000a72 <prvIsQueueEmpty>:
{
1a000a72:	b510      	push	{r4, lr}
1a000a74:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000a76:	f001 fbe5 	bl	1a002244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000a7c:	b923      	cbnz	r3, 1a000a88 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000a7e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000a80:	f001 fc02 	bl	1a002288 <vPortExitCritical>
}
1a000a84:	4620      	mov	r0, r4
1a000a86:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000a88:	2400      	movs	r4, #0
1a000a8a:	e7f9      	b.n	1a000a80 <prvIsQueueEmpty+0xe>

1a000a8c <prvCopyDataToQueue>:
{
1a000a8c:	b570      	push	{r4, r5, r6, lr}
1a000a8e:	4604      	mov	r4, r0
1a000a90:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a92:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000a94:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a96:	b95a      	cbnz	r2, 1a000ab0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000a98:	6803      	ldr	r3, [r0, #0]
1a000a9a:	b11b      	cbz	r3, 1a000aa4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000a9c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000a9e:	3501      	adds	r5, #1
1a000aa0:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000aa2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000aa4:	6840      	ldr	r0, [r0, #4]
1a000aa6:	f001 f8f1 	bl	1a001c8c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000aaa:	2300      	movs	r3, #0
1a000aac:	6063      	str	r3, [r4, #4]
1a000aae:	e7f6      	b.n	1a000a9e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000ab0:	b96e      	cbnz	r6, 1a000ace <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000ab2:	6880      	ldr	r0, [r0, #8]
1a000ab4:	f003 f935 	bl	1a003d22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000ab8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000aba:	68a3      	ldr	r3, [r4, #8]
1a000abc:	4413      	add	r3, r2
1a000abe:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000ac0:	6862      	ldr	r2, [r4, #4]
1a000ac2:	4293      	cmp	r3, r2
1a000ac4:	d319      	bcc.n	1a000afa <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000ac6:	6823      	ldr	r3, [r4, #0]
1a000ac8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000aca:	2000      	movs	r0, #0
1a000acc:	e7e7      	b.n	1a000a9e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ace:	68c0      	ldr	r0, [r0, #12]
1a000ad0:	f003 f927 	bl	1a003d22 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000ad4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ad6:	4252      	negs	r2, r2
1a000ad8:	68e3      	ldr	r3, [r4, #12]
1a000ada:	4413      	add	r3, r2
1a000adc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000ade:	6821      	ldr	r1, [r4, #0]
1a000ae0:	428b      	cmp	r3, r1
1a000ae2:	d202      	bcs.n	1a000aea <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000ae4:	6863      	ldr	r3, [r4, #4]
1a000ae6:	441a      	add	r2, r3
1a000ae8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000aea:	2e02      	cmp	r6, #2
1a000aec:	d001      	beq.n	1a000af2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000aee:	2000      	movs	r0, #0
1a000af0:	e7d5      	b.n	1a000a9e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000af2:	b125      	cbz	r5, 1a000afe <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000af4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000af6:	2000      	movs	r0, #0
1a000af8:	e7d1      	b.n	1a000a9e <prvCopyDataToQueue+0x12>
1a000afa:	2000      	movs	r0, #0
1a000afc:	e7cf      	b.n	1a000a9e <prvCopyDataToQueue+0x12>
1a000afe:	2000      	movs	r0, #0
1a000b00:	e7cd      	b.n	1a000a9e <prvCopyDataToQueue+0x12>

1a000b02 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000b02:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b04:	b172      	cbz	r2, 1a000b24 <prvCopyDataFromQueue+0x22>
{
1a000b06:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000b08:	68c3      	ldr	r3, [r0, #12]
1a000b0a:	4413      	add	r3, r2
1a000b0c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000b0e:	6844      	ldr	r4, [r0, #4]
1a000b10:	42a3      	cmp	r3, r4
1a000b12:	d301      	bcc.n	1a000b18 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000b14:	6803      	ldr	r3, [r0, #0]
1a000b16:	60c3      	str	r3, [r0, #12]
1a000b18:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000b1a:	68c1      	ldr	r1, [r0, #12]
1a000b1c:	4620      	mov	r0, r4
1a000b1e:	f003 f900 	bl	1a003d22 <memcpy>
}
1a000b22:	bd10      	pop	{r4, pc}
1a000b24:	4770      	bx	lr

1a000b26 <prvUnlockQueue>:
{
1a000b26:	b538      	push	{r3, r4, r5, lr}
1a000b28:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000b2a:	f001 fb8b 	bl	1a002244 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000b2e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000b32:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b34:	e003      	b.n	1a000b3e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000b36:	f001 f893 	bl	1a001c60 <vTaskMissedYield>
			--cTxLock;
1a000b3a:	3c01      	subs	r4, #1
1a000b3c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b3e:	2c00      	cmp	r4, #0
1a000b40:	dd08      	ble.n	1a000b54 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000b44:	b133      	cbz	r3, 1a000b54 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b46:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000b4a:	f000 fff5 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000b4e:	2800      	cmp	r0, #0
1a000b50:	d0f3      	beq.n	1a000b3a <prvUnlockQueue+0x14>
1a000b52:	e7f0      	b.n	1a000b36 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000b54:	23ff      	movs	r3, #255	; 0xff
1a000b56:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000b5a:	f001 fb95 	bl	1a002288 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000b5e:	f001 fb71 	bl	1a002244 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000b62:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000b66:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b68:	e003      	b.n	1a000b72 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000b6a:	f001 f879 	bl	1a001c60 <vTaskMissedYield>
				--cRxLock;
1a000b6e:	3c01      	subs	r4, #1
1a000b70:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b72:	2c00      	cmp	r4, #0
1a000b74:	dd08      	ble.n	1a000b88 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b76:	692b      	ldr	r3, [r5, #16]
1a000b78:	b133      	cbz	r3, 1a000b88 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000b7a:	f105 0010 	add.w	r0, r5, #16
1a000b7e:	f000 ffdb 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000b82:	2800      	cmp	r0, #0
1a000b84:	d0f3      	beq.n	1a000b6e <prvUnlockQueue+0x48>
1a000b86:	e7f0      	b.n	1a000b6a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000b88:	23ff      	movs	r3, #255	; 0xff
1a000b8a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000b8e:	f001 fb7b 	bl	1a002288 <vPortExitCritical>
}
1a000b92:	bd38      	pop	{r3, r4, r5, pc}

1a000b94 <xQueueGenericReset>:
{
1a000b94:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000b96:	b1e0      	cbz	r0, 1a000bd2 <xQueueGenericReset+0x3e>
1a000b98:	4604      	mov	r4, r0
1a000b9a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000b9c:	f001 fb52 	bl	1a002244 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000ba0:	6821      	ldr	r1, [r4, #0]
1a000ba2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000ba6:	fb03 1002 	mla	r0, r3, r2, r1
1a000baa:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000bac:	2000      	movs	r0, #0
1a000bae:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000bb0:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000bb2:	3a01      	subs	r2, #1
1a000bb4:	fb02 1303 	mla	r3, r2, r3, r1
1a000bb8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000bba:	23ff      	movs	r3, #255	; 0xff
1a000bbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000bc4:	b9ed      	cbnz	r5, 1a000c02 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000bc6:	6923      	ldr	r3, [r4, #16]
1a000bc8:	b963      	cbnz	r3, 1a000be4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000bca:	f001 fb5d 	bl	1a002288 <vPortExitCritical>
}
1a000bce:	2001      	movs	r0, #1
1a000bd0:	bd38      	pop	{r3, r4, r5, pc}
1a000bd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bd6:	f383 8811 	msr	BASEPRI, r3
1a000bda:	f3bf 8f6f 	isb	sy
1a000bde:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000be2:	e7fe      	b.n	1a000be2 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000be4:	f104 0010 	add.w	r0, r4, #16
1a000be8:	f000 ffa6 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000bec:	2800      	cmp	r0, #0
1a000bee:	d0ec      	beq.n	1a000bca <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a000bf0:	4b08      	ldr	r3, [pc, #32]	; (1a000c14 <xQueueGenericReset+0x80>)
1a000bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bf6:	601a      	str	r2, [r3, #0]
1a000bf8:	f3bf 8f4f 	dsb	sy
1a000bfc:	f3bf 8f6f 	isb	sy
1a000c00:	e7e3      	b.n	1a000bca <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000c02:	f104 0010 	add.w	r0, r4, #16
1a000c06:	f000 fa9c 	bl	1a001142 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c0e:	f000 fa98 	bl	1a001142 <vListInitialise>
1a000c12:	e7da      	b.n	1a000bca <xQueueGenericReset+0x36>
1a000c14:	e000ed04 	.word	0xe000ed04

1a000c18 <prvInitialiseNewQueue>:
{
1a000c18:	b538      	push	{r3, r4, r5, lr}
1a000c1a:	461d      	mov	r5, r3
1a000c1c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000c1e:	460b      	mov	r3, r1
1a000c20:	b949      	cbnz	r1, 1a000c36 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000c22:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000c24:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000c26:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000c28:	2101      	movs	r1, #1
1a000c2a:	4620      	mov	r0, r4
1a000c2c:	f7ff ffb2 	bl	1a000b94 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000c30:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000c34:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000c36:	6022      	str	r2, [r4, #0]
1a000c38:	e7f4      	b.n	1a000c24 <prvInitialiseNewQueue+0xc>

1a000c3a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000c3a:	b940      	cbnz	r0, 1a000c4e <xQueueGenericCreateStatic+0x14>
1a000c3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c40:	f383 8811 	msr	BASEPRI, r3
1a000c44:	f3bf 8f6f 	isb	sy
1a000c48:	f3bf 8f4f 	dsb	sy
1a000c4c:	e7fe      	b.n	1a000c4c <xQueueGenericCreateStatic+0x12>
	{
1a000c4e:	b510      	push	{r4, lr}
1a000c50:	b084      	sub	sp, #16
1a000c52:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000c54:	b153      	cbz	r3, 1a000c6c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000c56:	b192      	cbz	r2, 1a000c7e <xQueueGenericCreateStatic+0x44>
1a000c58:	b989      	cbnz	r1, 1a000c7e <xQueueGenericCreateStatic+0x44>
1a000c5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c5e:	f383 8811 	msr	BASEPRI, r3
1a000c62:	f3bf 8f6f 	isb	sy
1a000c66:	f3bf 8f4f 	dsb	sy
1a000c6a:	e7fe      	b.n	1a000c6a <xQueueGenericCreateStatic+0x30>
1a000c6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c70:	f383 8811 	msr	BASEPRI, r3
1a000c74:	f3bf 8f6f 	isb	sy
1a000c78:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a000c7c:	e7fe      	b.n	1a000c7c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c7e:	b16a      	cbz	r2, 1a000c9c <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000c80:	2050      	movs	r0, #80	; 0x50
1a000c82:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000c84:	9803      	ldr	r0, [sp, #12]
1a000c86:	2850      	cmp	r0, #80	; 0x50
1a000c88:	d013      	beq.n	1a000cb2 <xQueueGenericCreateStatic+0x78>
1a000c8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c8e:	f383 8811 	msr	BASEPRI, r3
1a000c92:	f3bf 8f6f 	isb	sy
1a000c96:	f3bf 8f4f 	dsb	sy
1a000c9a:	e7fe      	b.n	1a000c9a <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c9c:	2900      	cmp	r1, #0
1a000c9e:	d0ef      	beq.n	1a000c80 <xQueueGenericCreateStatic+0x46>
1a000ca0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ca4:	f383 8811 	msr	BASEPRI, r3
1a000ca8:	f3bf 8f6f 	isb	sy
1a000cac:	f3bf 8f4f 	dsb	sy
1a000cb0:	e7fe      	b.n	1a000cb0 <xQueueGenericCreateStatic+0x76>
1a000cb2:	4620      	mov	r0, r4
1a000cb4:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000cb6:	2301      	movs	r3, #1
1a000cb8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000cbc:	9400      	str	r4, [sp, #0]
1a000cbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000cc2:	f7ff ffa9 	bl	1a000c18 <prvInitialiseNewQueue>
	}
1a000cc6:	4620      	mov	r0, r4
1a000cc8:	b004      	add	sp, #16
1a000cca:	bd10      	pop	{r4, pc}

1a000ccc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ccc:	b940      	cbnz	r0, 1a000ce0 <xQueueGenericCreate+0x14>
1a000cce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cd2:	f383 8811 	msr	BASEPRI, r3
1a000cd6:	f3bf 8f6f 	isb	sy
1a000cda:	f3bf 8f4f 	dsb	sy
1a000cde:	e7fe      	b.n	1a000cde <xQueueGenericCreate+0x12>
	{
1a000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ce2:	b083      	sub	sp, #12
1a000ce4:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000ce6:	b1b1      	cbz	r1, 1a000d16 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ce8:	fb01 f000 	mul.w	r0, r1, r0
1a000cec:	4617      	mov	r7, r2
1a000cee:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000cf0:	3050      	adds	r0, #80	; 0x50
1a000cf2:	f7ff fde9 	bl	1a0008c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000cf6:	4605      	mov	r5, r0
1a000cf8:	b150      	cbz	r0, 1a000d10 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000cfa:	2300      	movs	r3, #0
1a000cfc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000d00:	9000      	str	r0, [sp, #0]
1a000d02:	463b      	mov	r3, r7
1a000d04:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000d08:	4621      	mov	r1, r4
1a000d0a:	4630      	mov	r0, r6
1a000d0c:	f7ff ff84 	bl	1a000c18 <prvInitialiseNewQueue>
	}
1a000d10:	4628      	mov	r0, r5
1a000d12:	b003      	add	sp, #12
1a000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000d16:	2000      	movs	r0, #0
1a000d18:	e7e8      	b.n	1a000cec <xQueueGenericCreate+0x20>
1a000d1a:	Address 0x000000001a000d1a is out of bounds.


1a000d1c <xQueueGenericSend>:
{
1a000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d1e:	b085      	sub	sp, #20
1a000d20:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000d22:	b178      	cbz	r0, 1a000d44 <xQueueGenericSend+0x28>
1a000d24:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d26:	b1b1      	cbz	r1, 1a000d56 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d28:	2b02      	cmp	r3, #2
1a000d2a:	d120      	bne.n	1a000d6e <xQueueGenericSend+0x52>
1a000d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000d2e:	2a01      	cmp	r2, #1
1a000d30:	d01d      	beq.n	1a000d6e <xQueueGenericSend+0x52>
1a000d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d36:	f383 8811 	msr	BASEPRI, r3
1a000d3a:	f3bf 8f6f 	isb	sy
1a000d3e:	f3bf 8f4f 	dsb	sy
1a000d42:	e7fe      	b.n	1a000d42 <xQueueGenericSend+0x26>
1a000d44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d48:	f383 8811 	msr	BASEPRI, r3
1a000d4c:	f3bf 8f6f 	isb	sy
1a000d50:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000d54:	e7fe      	b.n	1a000d54 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d56:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000d58:	2a00      	cmp	r2, #0
1a000d5a:	d0e5      	beq.n	1a000d28 <xQueueGenericSend+0xc>
1a000d5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d60:	f383 8811 	msr	BASEPRI, r3
1a000d64:	f3bf 8f6f 	isb	sy
1a000d68:	f3bf 8f4f 	dsb	sy
1a000d6c:	e7fe      	b.n	1a000d6c <xQueueGenericSend+0x50>
1a000d6e:	461e      	mov	r6, r3
1a000d70:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d72:	f000 ff7b 	bl	1a001c6c <xTaskGetSchedulerState>
1a000d76:	b950      	cbnz	r0, 1a000d8e <xQueueGenericSend+0x72>
1a000d78:	9b01      	ldr	r3, [sp, #4]
1a000d7a:	b153      	cbz	r3, 1a000d92 <xQueueGenericSend+0x76>
1a000d7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d80:	f383 8811 	msr	BASEPRI, r3
1a000d84:	f3bf 8f6f 	isb	sy
1a000d88:	f3bf 8f4f 	dsb	sy
1a000d8c:	e7fe      	b.n	1a000d8c <xQueueGenericSend+0x70>
1a000d8e:	2500      	movs	r5, #0
1a000d90:	e03b      	b.n	1a000e0a <xQueueGenericSend+0xee>
1a000d92:	2500      	movs	r5, #0
1a000d94:	e039      	b.n	1a000e0a <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d96:	4632      	mov	r2, r6
1a000d98:	4639      	mov	r1, r7
1a000d9a:	4620      	mov	r0, r4
1a000d9c:	f7ff fe76 	bl	1a000a8c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000da2:	b96b      	cbnz	r3, 1a000dc0 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000da4:	b138      	cbz	r0, 1a000db6 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000da6:	4b3c      	ldr	r3, [pc, #240]	; (1a000e98 <xQueueGenericSend+0x17c>)
1a000da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dac:	601a      	str	r2, [r3, #0]
1a000dae:	f3bf 8f4f 	dsb	sy
1a000db2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000db6:	f001 fa67 	bl	1a002288 <vPortExitCritical>
				return pdPASS;
1a000dba:	2001      	movs	r0, #1
}
1a000dbc:	b005      	add	sp, #20
1a000dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dc4:	f000 feb8 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000dc8:	2800      	cmp	r0, #0
1a000dca:	d0f4      	beq.n	1a000db6 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000dcc:	4b32      	ldr	r3, [pc, #200]	; (1a000e98 <xQueueGenericSend+0x17c>)
1a000dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dd2:	601a      	str	r2, [r3, #0]
1a000dd4:	f3bf 8f4f 	dsb	sy
1a000dd8:	f3bf 8f6f 	isb	sy
1a000ddc:	e7eb      	b.n	1a000db6 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000dde:	f001 fa53 	bl	1a002288 <vPortExitCritical>
					return errQUEUE_FULL;
1a000de2:	2000      	movs	r0, #0
1a000de4:	e7ea      	b.n	1a000dbc <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000de6:	a802      	add	r0, sp, #8
1a000de8:	f000 feec 	bl	1a001bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000dec:	2501      	movs	r5, #1
1a000dee:	e019      	b.n	1a000e24 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000df0:	2300      	movs	r3, #0
1a000df2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000df6:	e021      	b.n	1a000e3c <xQueueGenericSend+0x120>
1a000df8:	2300      	movs	r3, #0
1a000dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dfe:	e023      	b.n	1a000e48 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000e00:	4620      	mov	r0, r4
1a000e02:	f7ff fe90 	bl	1a000b26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000e06:	f000 fd07 	bl	1a001818 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000e0a:	f001 fa1b 	bl	1a002244 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000e0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000e10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000e12:	429a      	cmp	r2, r3
1a000e14:	d3bf      	bcc.n	1a000d96 <xQueueGenericSend+0x7a>
1a000e16:	2e02      	cmp	r6, #2
1a000e18:	d0bd      	beq.n	1a000d96 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000e1a:	9b01      	ldr	r3, [sp, #4]
1a000e1c:	2b00      	cmp	r3, #0
1a000e1e:	d0de      	beq.n	1a000dde <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000e20:	2d00      	cmp	r5, #0
1a000e22:	d0e0      	beq.n	1a000de6 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000e24:	f001 fa30 	bl	1a002288 <vPortExitCritical>
		vTaskSuspendAll();
1a000e28:	f000 fc5c 	bl	1a0016e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e2c:	f001 fa0a 	bl	1a002244 <vPortEnterCritical>
1a000e30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e34:	b25b      	sxtb	r3, r3
1a000e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e3a:	d0d9      	beq.n	1a000df0 <xQueueGenericSend+0xd4>
1a000e3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e40:	b25b      	sxtb	r3, r3
1a000e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e46:	d0d7      	beq.n	1a000df8 <xQueueGenericSend+0xdc>
1a000e48:	f001 fa1e 	bl	1a002288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e4c:	a901      	add	r1, sp, #4
1a000e4e:	a802      	add	r0, sp, #8
1a000e50:	f000 fec4 	bl	1a001bdc <xTaskCheckForTimeOut>
1a000e54:	b9c8      	cbnz	r0, 1a000e8a <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000e56:	4620      	mov	r0, r4
1a000e58:	f7ff fdfc 	bl	1a000a54 <prvIsQueueFull>
1a000e5c:	2800      	cmp	r0, #0
1a000e5e:	d0cf      	beq.n	1a000e00 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000e60:	9901      	ldr	r1, [sp, #4]
1a000e62:	f104 0010 	add.w	r0, r4, #16
1a000e66:	f000 fe33 	bl	1a001ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e6a:	4620      	mov	r0, r4
1a000e6c:	f7ff fe5b 	bl	1a000b26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e70:	f000 fcd2 	bl	1a001818 <xTaskResumeAll>
1a000e74:	2800      	cmp	r0, #0
1a000e76:	d1c8      	bne.n	1a000e0a <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000e78:	4b07      	ldr	r3, [pc, #28]	; (1a000e98 <xQueueGenericSend+0x17c>)
1a000e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e7e:	601a      	str	r2, [r3, #0]
1a000e80:	f3bf 8f4f 	dsb	sy
1a000e84:	f3bf 8f6f 	isb	sy
1a000e88:	e7bf      	b.n	1a000e0a <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000e8a:	4620      	mov	r0, r4
1a000e8c:	f7ff fe4b 	bl	1a000b26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e90:	f000 fcc2 	bl	1a001818 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000e94:	2000      	movs	r0, #0
1a000e96:	e791      	b.n	1a000dbc <xQueueGenericSend+0xa0>
1a000e98:	e000ed04 	.word	0xe000ed04

1a000e9c <xQueueGenericSendFromISR>:
{
1a000e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000ea0:	b178      	cbz	r0, 1a000ec2 <xQueueGenericSendFromISR+0x26>
1a000ea2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ea4:	b1b1      	cbz	r1, 1a000ed4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000ea6:	2b02      	cmp	r3, #2
1a000ea8:	d120      	bne.n	1a000eec <xQueueGenericSendFromISR+0x50>
1a000eaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000eac:	2801      	cmp	r0, #1
1a000eae:	d01d      	beq.n	1a000eec <xQueueGenericSendFromISR+0x50>
1a000eb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb4:	f383 8811 	msr	BASEPRI, r3
1a000eb8:	f3bf 8f6f 	isb	sy
1a000ebc:	f3bf 8f4f 	dsb	sy
1a000ec0:	e7fe      	b.n	1a000ec0 <xQueueGenericSendFromISR+0x24>
1a000ec2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ec6:	f383 8811 	msr	BASEPRI, r3
1a000eca:	f3bf 8f6f 	isb	sy
1a000ece:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000ed2:	e7fe      	b.n	1a000ed2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ed4:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000ed6:	2800      	cmp	r0, #0
1a000ed8:	d0e5      	beq.n	1a000ea6 <xQueueGenericSendFromISR+0xa>
1a000eda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ede:	f383 8811 	msr	BASEPRI, r3
1a000ee2:	f3bf 8f6f 	isb	sy
1a000ee6:	f3bf 8f4f 	dsb	sy
1a000eea:	e7fe      	b.n	1a000eea <xQueueGenericSendFromISR+0x4e>
1a000eec:	461f      	mov	r7, r3
1a000eee:	4690      	mov	r8, r2
1a000ef0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ef2:	f001 fad1 	bl	1a002498 <vPortValidateInterruptPriority>
	__asm volatile
1a000ef6:	f3ef 8611 	mrs	r6, BASEPRI
1a000efa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000efe:	f383 8811 	msr	BASEPRI, r3
1a000f02:	f3bf 8f6f 	isb	sy
1a000f06:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000f0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f0e:	429a      	cmp	r2, r3
1a000f10:	d306      	bcc.n	1a000f20 <xQueueGenericSendFromISR+0x84>
1a000f12:	2f02      	cmp	r7, #2
1a000f14:	d004      	beq.n	1a000f20 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000f16:	2000      	movs	r0, #0
	__asm volatile
1a000f18:	f386 8811 	msr	BASEPRI, r6
}
1a000f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000f20:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000f24:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000f26:	463a      	mov	r2, r7
1a000f28:	4649      	mov	r1, r9
1a000f2a:	4620      	mov	r0, r4
1a000f2c:	f7ff fdae 	bl	1a000a8c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000f30:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f34:	d005      	beq.n	1a000f42 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000f36:	1c6b      	adds	r3, r5, #1
1a000f38:	b25b      	sxtb	r3, r3
1a000f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000f3e:	2001      	movs	r0, #1
1a000f40:	e7ea      	b.n	1a000f18 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f44:	b90b      	cbnz	r3, 1a000f4a <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a000f46:	2001      	movs	r0, #1
1a000f48:	e7e6      	b.n	1a000f18 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f4e:	f000 fdf3 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000f52:	b130      	cbz	r0, 1a000f62 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000f54:	f1b8 0f00 	cmp.w	r8, #0
1a000f58:	d005      	beq.n	1a000f66 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000f5a:	2001      	movs	r0, #1
1a000f5c:	f8c8 0000 	str.w	r0, [r8]
1a000f60:	e7da      	b.n	1a000f18 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a000f62:	2001      	movs	r0, #1
1a000f64:	e7d8      	b.n	1a000f18 <xQueueGenericSendFromISR+0x7c>
1a000f66:	2001      	movs	r0, #1
1a000f68:	e7d6      	b.n	1a000f18 <xQueueGenericSendFromISR+0x7c>
1a000f6a:	Address 0x000000001a000f6a is out of bounds.


1a000f6c <xQueueReceive>:
{
1a000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f6e:	b085      	sub	sp, #20
1a000f70:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000f72:	b180      	cbz	r0, 1a000f96 <xQueueReceive+0x2a>
1a000f74:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f76:	b1b9      	cbz	r1, 1a000fa8 <xQueueReceive+0x3c>
1a000f78:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f7a:	f000 fe77 	bl	1a001c6c <xTaskGetSchedulerState>
1a000f7e:	b9f8      	cbnz	r0, 1a000fc0 <xQueueReceive+0x54>
1a000f80:	9b01      	ldr	r3, [sp, #4]
1a000f82:	b1fb      	cbz	r3, 1a000fc4 <xQueueReceive+0x58>
	__asm volatile
1a000f84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f88:	f383 8811 	msr	BASEPRI, r3
1a000f8c:	f3bf 8f6f 	isb	sy
1a000f90:	f3bf 8f4f 	dsb	sy
1a000f94:	e7fe      	b.n	1a000f94 <xQueueReceive+0x28>
1a000f96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f9a:	f383 8811 	msr	BASEPRI, r3
1a000f9e:	f3bf 8f6f 	isb	sy
1a000fa2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000fa6:	e7fe      	b.n	1a000fa6 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000fa8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000faa:	2b00      	cmp	r3, #0
1a000fac:	d0e4      	beq.n	1a000f78 <xQueueReceive+0xc>
1a000fae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb2:	f383 8811 	msr	BASEPRI, r3
1a000fb6:	f3bf 8f6f 	isb	sy
1a000fba:	f3bf 8f4f 	dsb	sy
1a000fbe:	e7fe      	b.n	1a000fbe <xQueueReceive+0x52>
1a000fc0:	2600      	movs	r6, #0
1a000fc2:	e03e      	b.n	1a001042 <xQueueReceive+0xd6>
1a000fc4:	2600      	movs	r6, #0
1a000fc6:	e03c      	b.n	1a001042 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000fc8:	4639      	mov	r1, r7
1a000fca:	4620      	mov	r0, r4
1a000fcc:	f7ff fd99 	bl	1a000b02 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000fd0:	3d01      	subs	r5, #1
1a000fd2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000fd4:	6923      	ldr	r3, [r4, #16]
1a000fd6:	b923      	cbnz	r3, 1a000fe2 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000fd8:	f001 f956 	bl	1a002288 <vPortExitCritical>
				return pdPASS;
1a000fdc:	2001      	movs	r0, #1
}
1a000fde:	b005      	add	sp, #20
1a000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000fe2:	f104 0010 	add.w	r0, r4, #16
1a000fe6:	f000 fda7 	bl	1a001b38 <xTaskRemoveFromEventList>
1a000fea:	2800      	cmp	r0, #0
1a000fec:	d0f4      	beq.n	1a000fd8 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000fee:	4b35      	ldr	r3, [pc, #212]	; (1a0010c4 <xQueueReceive+0x158>)
1a000ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ff4:	601a      	str	r2, [r3, #0]
1a000ff6:	f3bf 8f4f 	dsb	sy
1a000ffa:	f3bf 8f6f 	isb	sy
1a000ffe:	e7eb      	b.n	1a000fd8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001000:	f001 f942 	bl	1a002288 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001004:	2000      	movs	r0, #0
1a001006:	e7ea      	b.n	1a000fde <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001008:	a802      	add	r0, sp, #8
1a00100a:	f000 fddb 	bl	1a001bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00100e:	2601      	movs	r6, #1
1a001010:	e021      	b.n	1a001056 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001012:	2300      	movs	r3, #0
1a001014:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001018:	e029      	b.n	1a00106e <xQueueReceive+0x102>
1a00101a:	2300      	movs	r3, #0
1a00101c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001020:	e02b      	b.n	1a00107a <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001022:	4620      	mov	r0, r4
1a001024:	f7ff fd7f 	bl	1a000b26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001028:	f000 fbf6 	bl	1a001818 <xTaskResumeAll>
1a00102c:	e009      	b.n	1a001042 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a00102e:	4620      	mov	r0, r4
1a001030:	f7ff fd79 	bl	1a000b26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001034:	f000 fbf0 	bl	1a001818 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001038:	4620      	mov	r0, r4
1a00103a:	f7ff fd1a 	bl	1a000a72 <prvIsQueueEmpty>
1a00103e:	2800      	cmp	r0, #0
1a001040:	d13d      	bne.n	1a0010be <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001042:	f001 f8ff 	bl	1a002244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001046:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001048:	2d00      	cmp	r5, #0
1a00104a:	d1bd      	bne.n	1a000fc8 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00104c:	9b01      	ldr	r3, [sp, #4]
1a00104e:	2b00      	cmp	r3, #0
1a001050:	d0d6      	beq.n	1a001000 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001052:	2e00      	cmp	r6, #0
1a001054:	d0d8      	beq.n	1a001008 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001056:	f001 f917 	bl	1a002288 <vPortExitCritical>
		vTaskSuspendAll();
1a00105a:	f000 fb43 	bl	1a0016e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00105e:	f001 f8f1 	bl	1a002244 <vPortEnterCritical>
1a001062:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001066:	b25b      	sxtb	r3, r3
1a001068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00106c:	d0d1      	beq.n	1a001012 <xQueueReceive+0xa6>
1a00106e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001072:	b25b      	sxtb	r3, r3
1a001074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001078:	d0cf      	beq.n	1a00101a <xQueueReceive+0xae>
1a00107a:	f001 f905 	bl	1a002288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00107e:	a901      	add	r1, sp, #4
1a001080:	a802      	add	r0, sp, #8
1a001082:	f000 fdab 	bl	1a001bdc <xTaskCheckForTimeOut>
1a001086:	2800      	cmp	r0, #0
1a001088:	d1d1      	bne.n	1a00102e <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00108a:	4620      	mov	r0, r4
1a00108c:	f7ff fcf1 	bl	1a000a72 <prvIsQueueEmpty>
1a001090:	2800      	cmp	r0, #0
1a001092:	d0c6      	beq.n	1a001022 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001094:	9901      	ldr	r1, [sp, #4]
1a001096:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00109a:	f000 fd19 	bl	1a001ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00109e:	4620      	mov	r0, r4
1a0010a0:	f7ff fd41 	bl	1a000b26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0010a4:	f000 fbb8 	bl	1a001818 <xTaskResumeAll>
1a0010a8:	2800      	cmp	r0, #0
1a0010aa:	d1ca      	bne.n	1a001042 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a0010ac:	4b05      	ldr	r3, [pc, #20]	; (1a0010c4 <xQueueReceive+0x158>)
1a0010ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010b2:	601a      	str	r2, [r3, #0]
1a0010b4:	f3bf 8f4f 	dsb	sy
1a0010b8:	f3bf 8f6f 	isb	sy
1a0010bc:	e7c1      	b.n	1a001042 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a0010be:	2000      	movs	r0, #0
1a0010c0:	e78d      	b.n	1a000fde <xQueueReceive+0x72>
1a0010c2:	bf00      	nop
1a0010c4:	e000ed04 	.word	0xe000ed04

1a0010c8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010c8:	2300      	movs	r3, #0
1a0010ca:	2b07      	cmp	r3, #7
1a0010cc:	d80c      	bhi.n	1a0010e8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0010ce:	4a07      	ldr	r2, [pc, #28]	; (1a0010ec <vQueueAddToRegistry+0x24>)
1a0010d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0010d4:	b10a      	cbz	r2, 1a0010da <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010d6:	3301      	adds	r3, #1
1a0010d8:	e7f7      	b.n	1a0010ca <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0010da:	4a04      	ldr	r2, [pc, #16]	; (1a0010ec <vQueueAddToRegistry+0x24>)
1a0010dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0010e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0010e4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0010e6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0010e8:	4770      	bx	lr
1a0010ea:	bf00      	nop
1a0010ec:	10002bd0 	.word	0x10002bd0

1a0010f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0010f0:	b570      	push	{r4, r5, r6, lr}
1a0010f2:	4604      	mov	r4, r0
1a0010f4:	460d      	mov	r5, r1
1a0010f6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0010f8:	f001 f8a4 	bl	1a002244 <vPortEnterCritical>
1a0010fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001100:	b25b      	sxtb	r3, r3
1a001102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001106:	d00d      	beq.n	1a001124 <vQueueWaitForMessageRestricted+0x34>
1a001108:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00110c:	b25b      	sxtb	r3, r3
1a00110e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001112:	d00b      	beq.n	1a00112c <vQueueWaitForMessageRestricted+0x3c>
1a001114:	f001 f8b8 	bl	1a002288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00111a:	b15b      	cbz	r3, 1a001134 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a00111c:	4620      	mov	r0, r4
1a00111e:	f7ff fd02 	bl	1a000b26 <prvUnlockQueue>
	}
1a001122:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001124:	2300      	movs	r3, #0
1a001126:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00112a:	e7ed      	b.n	1a001108 <vQueueWaitForMessageRestricted+0x18>
1a00112c:	2300      	movs	r3, #0
1a00112e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001132:	e7ef      	b.n	1a001114 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001134:	4632      	mov	r2, r6
1a001136:	4629      	mov	r1, r5
1a001138:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00113c:	f000 fce0 	bl	1a001b00 <vTaskPlaceOnEventListRestricted>
1a001140:	e7ec      	b.n	1a00111c <vQueueWaitForMessageRestricted+0x2c>

1a001142 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001142:	f100 0308 	add.w	r3, r0, #8
1a001146:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00114c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00114e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001150:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001152:	2300      	movs	r3, #0
1a001154:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001156:	4770      	bx	lr

1a001158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001158:	2300      	movs	r3, #0
1a00115a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00115c:	4770      	bx	lr

1a00115e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00115e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001160:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001162:	689a      	ldr	r2, [r3, #8]
1a001164:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001166:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001168:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00116a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00116c:	6803      	ldr	r3, [r0, #0]
1a00116e:	3301      	adds	r3, #1
1a001170:	6003      	str	r3, [r0, #0]
}
1a001172:	4770      	bx	lr

1a001174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001174:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001176:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001178:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00117c:	d002      	beq.n	1a001184 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00117e:	f100 0208 	add.w	r2, r0, #8
1a001182:	e002      	b.n	1a00118a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001184:	6902      	ldr	r2, [r0, #16]
1a001186:	e004      	b.n	1a001192 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001188:	461a      	mov	r2, r3
1a00118a:	6853      	ldr	r3, [r2, #4]
1a00118c:	681c      	ldr	r4, [r3, #0]
1a00118e:	42ac      	cmp	r4, r5
1a001190:	d9fa      	bls.n	1a001188 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001192:	6853      	ldr	r3, [r2, #4]
1a001194:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001196:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001198:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00119a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00119c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00119e:	6803      	ldr	r3, [r0, #0]
1a0011a0:	3301      	adds	r3, #1
1a0011a2:	6003      	str	r3, [r0, #0]
}
1a0011a4:	bc30      	pop	{r4, r5}
1a0011a6:	4770      	bx	lr

1a0011a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0011a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0011aa:	6841      	ldr	r1, [r0, #4]
1a0011ac:	6882      	ldr	r2, [r0, #8]
1a0011ae:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0011b0:	6841      	ldr	r1, [r0, #4]
1a0011b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0011b4:	685a      	ldr	r2, [r3, #4]
1a0011b6:	4282      	cmp	r2, r0
1a0011b8:	d006      	beq.n	1a0011c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0011ba:	2200      	movs	r2, #0
1a0011bc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0011be:	681a      	ldr	r2, [r3, #0]
1a0011c0:	3a01      	subs	r2, #1
1a0011c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0011c4:	6818      	ldr	r0, [r3, #0]
}
1a0011c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0011c8:	6882      	ldr	r2, [r0, #8]
1a0011ca:	605a      	str	r2, [r3, #4]
1a0011cc:	e7f5      	b.n	1a0011ba <uxListRemove+0x12>
1a0011ce:	Address 0x000000001a0011ce is out of bounds.


1a0011d0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0011d0:	4b03      	ldr	r3, [pc, #12]	; (1a0011e0 <vApplicationGetIdleTaskMemory+0x10>)
1a0011d2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0011d4:	4b03      	ldr	r3, [pc, #12]	; (1a0011e4 <vApplicationGetIdleTaskMemory+0x14>)
1a0011d6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0011d8:	235a      	movs	r3, #90	; 0x5a
1a0011da:	6013      	str	r3, [r2, #0]
}
1a0011dc:	4770      	bx	lr
1a0011de:	bf00      	nop
1a0011e0:	100027cc 	.word	0x100027cc
1a0011e4:	100020c4 	.word	0x100020c4

1a0011e8 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0011e8:	4b03      	ldr	r3, [pc, #12]	; (1a0011f8 <vApplicationGetTimerTaskMemory+0x10>)
1a0011ea:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0011ec:	4b03      	ldr	r3, [pc, #12]	; (1a0011fc <vApplicationGetTimerTaskMemory+0x14>)
1a0011ee:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0011f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0011f4:	6013      	str	r3, [r2, #0]
1a0011f6:	4770      	bx	lr
1a0011f8:	1000282c 	.word	0x1000282c
1a0011fc:	1000222c 	.word	0x1000222c

1a001200 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001200:	b510      	push	{r4, lr}
1a001202:	b082      	sub	sp, #8
1a001204:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001206:	9001      	str	r0, [sp, #4]
1a001208:	2300      	movs	r3, #0
1a00120a:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a00120c:	f001 f81a 	bl	1a002244 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001210:	9901      	ldr	r1, [sp, #4]
1a001212:	4622      	mov	r2, r4
1a001214:	4804      	ldr	r0, [pc, #16]	; (1a001228 <vAssertCalled+0x28>)
1a001216:	f003 f91f 	bl	1a004458 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00121a:	9b00      	ldr	r3, [sp, #0]
1a00121c:	2b00      	cmp	r3, #0
1a00121e:	d0fc      	beq.n	1a00121a <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001220:	f001 f832 	bl	1a002288 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001224:	b002      	add	sp, #8
1a001226:	bd10      	pop	{r4, pc}
1a001228:	1a004d44 	.word	0x1a004d44

1a00122c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a00122c:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00122e:	4804      	ldr	r0, [pc, #16]	; (1a001240 <vApplicationMallocFailedHook+0x14>)
1a001230:	f003 f998 	bl	1a004564 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001234:	4903      	ldr	r1, [pc, #12]	; (1a001244 <vApplicationMallocFailedHook+0x18>)
1a001236:	202c      	movs	r0, #44	; 0x2c
1a001238:	f7ff ffe2 	bl	1a001200 <vAssertCalled>
}
1a00123c:	bd08      	pop	{r3, pc}
1a00123e:	bf00      	nop
1a001240:	1a004cd0 	.word	0x1a004cd0
1a001244:	1a004cf4 	.word	0x1a004cf4

1a001248 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001248:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00124a:	4804      	ldr	r0, [pc, #16]	; (1a00125c <vApplicationStackOverflowHook+0x14>)
1a00124c:	f003 f904 	bl	1a004458 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001250:	4903      	ldr	r1, [pc, #12]	; (1a001260 <vApplicationStackOverflowHook+0x18>)
1a001252:	2050      	movs	r0, #80	; 0x50
1a001254:	f7ff ffd4 	bl	1a001200 <vAssertCalled>
}
1a001258:	bd08      	pop	{r3, pc}
1a00125a:	bf00      	nop
1a00125c:	1a004d14 	.word	0x1a004d14
1a001260:	1a004cf4 	.word	0x1a004cf4

1a001264 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001264:	4b08      	ldr	r3, [pc, #32]	; (1a001288 <prvResetNextTaskUnblockTime+0x24>)
1a001266:	681b      	ldr	r3, [r3, #0]
1a001268:	681b      	ldr	r3, [r3, #0]
1a00126a:	b923      	cbnz	r3, 1a001276 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a00126c:	4b07      	ldr	r3, [pc, #28]	; (1a00128c <prvResetNextTaskUnblockTime+0x28>)
1a00126e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001272:	601a      	str	r2, [r3, #0]
1a001274:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001276:	4b04      	ldr	r3, [pc, #16]	; (1a001288 <prvResetNextTaskUnblockTime+0x24>)
1a001278:	681b      	ldr	r3, [r3, #0]
1a00127a:	68db      	ldr	r3, [r3, #12]
1a00127c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00127e:	685a      	ldr	r2, [r3, #4]
1a001280:	4b02      	ldr	r3, [pc, #8]	; (1a00128c <prvResetNextTaskUnblockTime+0x28>)
1a001282:	601a      	str	r2, [r3, #0]
	}
}
1a001284:	4770      	bx	lr
1a001286:	bf00      	nop
1a001288:	10002890 	.word	0x10002890
1a00128c:	10002964 	.word	0x10002964

1a001290 <prvInitialiseNewTask>:
{
1a001290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001294:	4681      	mov	r9, r0
1a001296:	460d      	mov	r5, r1
1a001298:	4617      	mov	r7, r2
1a00129a:	469a      	mov	sl, r3
1a00129c:	9e08      	ldr	r6, [sp, #32]
1a00129e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0012a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0012a4:	0092      	lsls	r2, r2, #2
1a0012a6:	21a5      	movs	r1, #165	; 0xa5
1a0012a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0012aa:	f002 fd48 	bl	1a003d3e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0012ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0012b0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0012b4:	3a01      	subs	r2, #1
1a0012b6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0012ba:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0012be:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0012c0:	2300      	movs	r3, #0
1a0012c2:	2b0f      	cmp	r3, #15
1a0012c4:	d806      	bhi.n	1a0012d4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0012c6:	5cea      	ldrb	r2, [r5, r3]
1a0012c8:	18e1      	adds	r1, r4, r3
1a0012ca:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0012ce:	b10a      	cbz	r2, 1a0012d4 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0012d0:	3301      	adds	r3, #1
1a0012d2:	e7f6      	b.n	1a0012c2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0012d4:	2300      	movs	r3, #0
1a0012d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0012da:	2e06      	cmp	r6, #6
1a0012dc:	d900      	bls.n	1a0012e0 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0012de:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0012e0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0012e2:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0012e4:	2500      	movs	r5, #0
1a0012e6:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0012e8:	1d20      	adds	r0, r4, #4
1a0012ea:	f7ff ff35 	bl	1a001158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0012ee:	f104 0018 	add.w	r0, r4, #24
1a0012f2:	f7ff ff31 	bl	1a001158 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0012f6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012f8:	f1c6 0607 	rsb	r6, r6, #7
1a0012fc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0012fe:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001300:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001302:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001306:	4652      	mov	r2, sl
1a001308:	4649      	mov	r1, r9
1a00130a:	4638      	mov	r0, r7
1a00130c:	f000 ff70 	bl	1a0021f0 <pxPortInitialiseStack>
1a001310:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001312:	f1b8 0f00 	cmp.w	r8, #0
1a001316:	d001      	beq.n	1a00131c <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001318:	f8c8 4000 	str.w	r4, [r8]
}
1a00131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001320 <prvInitialiseTaskLists>:
{
1a001320:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001322:	2400      	movs	r4, #0
1a001324:	2c06      	cmp	r4, #6
1a001326:	d808      	bhi.n	1a00133a <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001328:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00132c:	0093      	lsls	r3, r2, #2
1a00132e:	480e      	ldr	r0, [pc, #56]	; (1a001368 <prvInitialiseTaskLists+0x48>)
1a001330:	4418      	add	r0, r3
1a001332:	f7ff ff06 	bl	1a001142 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001336:	3401      	adds	r4, #1
1a001338:	e7f4      	b.n	1a001324 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a00133a:	4d0c      	ldr	r5, [pc, #48]	; (1a00136c <prvInitialiseTaskLists+0x4c>)
1a00133c:	4628      	mov	r0, r5
1a00133e:	f7ff ff00 	bl	1a001142 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001342:	4c0b      	ldr	r4, [pc, #44]	; (1a001370 <prvInitialiseTaskLists+0x50>)
1a001344:	4620      	mov	r0, r4
1a001346:	f7ff fefc 	bl	1a001142 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00134a:	480a      	ldr	r0, [pc, #40]	; (1a001374 <prvInitialiseTaskLists+0x54>)
1a00134c:	f7ff fef9 	bl	1a001142 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001350:	4809      	ldr	r0, [pc, #36]	; (1a001378 <prvInitialiseTaskLists+0x58>)
1a001352:	f7ff fef6 	bl	1a001142 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001356:	4809      	ldr	r0, [pc, #36]	; (1a00137c <prvInitialiseTaskLists+0x5c>)
1a001358:	f7ff fef3 	bl	1a001142 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00135c:	4b08      	ldr	r3, [pc, #32]	; (1a001380 <prvInitialiseTaskLists+0x60>)
1a00135e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001360:	4b08      	ldr	r3, [pc, #32]	; (1a001384 <prvInitialiseTaskLists+0x64>)
1a001362:	601c      	str	r4, [r3, #0]
}
1a001364:	bd38      	pop	{r3, r4, r5, pc}
1a001366:	bf00      	nop
1a001368:	10002898 	.word	0x10002898
1a00136c:	1000293c 	.word	0x1000293c
1a001370:	10002950 	.word	0x10002950
1a001374:	1000296c 	.word	0x1000296c
1a001378:	10002998 	.word	0x10002998
1a00137c:	10002984 	.word	0x10002984
1a001380:	10002890 	.word	0x10002890
1a001384:	10002894 	.word	0x10002894

1a001388 <prvAddNewTaskToReadyList>:
{
1a001388:	b510      	push	{r4, lr}
1a00138a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00138c:	f000 ff5a 	bl	1a002244 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001390:	4a21      	ldr	r2, [pc, #132]	; (1a001418 <prvAddNewTaskToReadyList+0x90>)
1a001392:	6813      	ldr	r3, [r2, #0]
1a001394:	3301      	adds	r3, #1
1a001396:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001398:	4b20      	ldr	r3, [pc, #128]	; (1a00141c <prvAddNewTaskToReadyList+0x94>)
1a00139a:	681b      	ldr	r3, [r3, #0]
1a00139c:	b15b      	cbz	r3, 1a0013b6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00139e:	4b20      	ldr	r3, [pc, #128]	; (1a001420 <prvAddNewTaskToReadyList+0x98>)
1a0013a0:	681b      	ldr	r3, [r3, #0]
1a0013a2:	b96b      	cbnz	r3, 1a0013c0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0013a4:	4b1d      	ldr	r3, [pc, #116]	; (1a00141c <prvAddNewTaskToReadyList+0x94>)
1a0013a6:	681b      	ldr	r3, [r3, #0]
1a0013a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013ac:	429a      	cmp	r2, r3
1a0013ae:	d807      	bhi.n	1a0013c0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0013b0:	4b1a      	ldr	r3, [pc, #104]	; (1a00141c <prvAddNewTaskToReadyList+0x94>)
1a0013b2:	601c      	str	r4, [r3, #0]
1a0013b4:	e004      	b.n	1a0013c0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0013b6:	4b19      	ldr	r3, [pc, #100]	; (1a00141c <prvAddNewTaskToReadyList+0x94>)
1a0013b8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0013ba:	6813      	ldr	r3, [r2, #0]
1a0013bc:	2b01      	cmp	r3, #1
1a0013be:	d027      	beq.n	1a001410 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0013c0:	4a18      	ldr	r2, [pc, #96]	; (1a001424 <prvAddNewTaskToReadyList+0x9c>)
1a0013c2:	6813      	ldr	r3, [r2, #0]
1a0013c4:	3301      	adds	r3, #1
1a0013c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0013c8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0013ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013cc:	2201      	movs	r2, #1
1a0013ce:	409a      	lsls	r2, r3
1a0013d0:	4915      	ldr	r1, [pc, #84]	; (1a001428 <prvAddNewTaskToReadyList+0xa0>)
1a0013d2:	6808      	ldr	r0, [r1, #0]
1a0013d4:	4302      	orrs	r2, r0
1a0013d6:	600a      	str	r2, [r1, #0]
1a0013d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013dc:	009a      	lsls	r2, r3, #2
1a0013de:	1d21      	adds	r1, r4, #4
1a0013e0:	4812      	ldr	r0, [pc, #72]	; (1a00142c <prvAddNewTaskToReadyList+0xa4>)
1a0013e2:	4410      	add	r0, r2
1a0013e4:	f7ff febb 	bl	1a00115e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0013e8:	f000 ff4e 	bl	1a002288 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0013ec:	4b0c      	ldr	r3, [pc, #48]	; (1a001420 <prvAddNewTaskToReadyList+0x98>)
1a0013ee:	681b      	ldr	r3, [r3, #0]
1a0013f0:	b16b      	cbz	r3, 1a00140e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0013f2:	4b0a      	ldr	r3, [pc, #40]	; (1a00141c <prvAddNewTaskToReadyList+0x94>)
1a0013f4:	681b      	ldr	r3, [r3, #0]
1a0013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013fa:	429a      	cmp	r2, r3
1a0013fc:	d207      	bcs.n	1a00140e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0013fe:	4b0c      	ldr	r3, [pc, #48]	; (1a001430 <prvAddNewTaskToReadyList+0xa8>)
1a001400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001404:	601a      	str	r2, [r3, #0]
1a001406:	f3bf 8f4f 	dsb	sy
1a00140a:	f3bf 8f6f 	isb	sy
}
1a00140e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001410:	f7ff ff86 	bl	1a001320 <prvInitialiseTaskLists>
1a001414:	e7d4      	b.n	1a0013c0 <prvAddNewTaskToReadyList+0x38>
1a001416:	bf00      	nop
1a001418:	10002924 	.word	0x10002924
1a00141c:	1000288c 	.word	0x1000288c
1a001420:	10002980 	.word	0x10002980
1a001424:	10002934 	.word	0x10002934
1a001428:	10002938 	.word	0x10002938
1a00142c:	10002898 	.word	0x10002898
1a001430:	e000ed04 	.word	0xe000ed04

1a001434 <prvDeleteTCB>:
	{
1a001434:	b510      	push	{r4, lr}
1a001436:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001438:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00143c:	b163      	cbz	r3, 1a001458 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00143e:	2b01      	cmp	r3, #1
1a001440:	d011      	beq.n	1a001466 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001442:	2b02      	cmp	r3, #2
1a001444:	d00e      	beq.n	1a001464 <prvDeleteTCB+0x30>
1a001446:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00144a:	f383 8811 	msr	BASEPRI, r3
1a00144e:	f3bf 8f6f 	isb	sy
1a001452:	f3bf 8f4f 	dsb	sy
1a001456:	e7fe      	b.n	1a001456 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001458:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00145a:	f7ff fac3 	bl	1a0009e4 <vPortFree>
				vPortFree( pxTCB );
1a00145e:	4620      	mov	r0, r4
1a001460:	f7ff fac0 	bl	1a0009e4 <vPortFree>
	}
1a001464:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001466:	f7ff fabd 	bl	1a0009e4 <vPortFree>
1a00146a:	e7fb      	b.n	1a001464 <prvDeleteTCB+0x30>

1a00146c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00146c:	4b0f      	ldr	r3, [pc, #60]	; (1a0014ac <prvCheckTasksWaitingTermination+0x40>)
1a00146e:	681b      	ldr	r3, [r3, #0]
1a001470:	b1d3      	cbz	r3, 1a0014a8 <prvCheckTasksWaitingTermination+0x3c>
{
1a001472:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001474:	f000 fee6 	bl	1a002244 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001478:	4b0d      	ldr	r3, [pc, #52]	; (1a0014b0 <prvCheckTasksWaitingTermination+0x44>)
1a00147a:	68db      	ldr	r3, [r3, #12]
1a00147c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00147e:	1d20      	adds	r0, r4, #4
1a001480:	f7ff fe92 	bl	1a0011a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001484:	4a0b      	ldr	r2, [pc, #44]	; (1a0014b4 <prvCheckTasksWaitingTermination+0x48>)
1a001486:	6813      	ldr	r3, [r2, #0]
1a001488:	3b01      	subs	r3, #1
1a00148a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00148c:	4a07      	ldr	r2, [pc, #28]	; (1a0014ac <prvCheckTasksWaitingTermination+0x40>)
1a00148e:	6813      	ldr	r3, [r2, #0]
1a001490:	3b01      	subs	r3, #1
1a001492:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001494:	f000 fef8 	bl	1a002288 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001498:	4620      	mov	r0, r4
1a00149a:	f7ff ffcb 	bl	1a001434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00149e:	4b03      	ldr	r3, [pc, #12]	; (1a0014ac <prvCheckTasksWaitingTermination+0x40>)
1a0014a0:	681b      	ldr	r3, [r3, #0]
1a0014a2:	2b00      	cmp	r3, #0
1a0014a4:	d1e6      	bne.n	1a001474 <prvCheckTasksWaitingTermination+0x8>
}
1a0014a6:	bd10      	pop	{r4, pc}
1a0014a8:	4770      	bx	lr
1a0014aa:	bf00      	nop
1a0014ac:	10002928 	.word	0x10002928
1a0014b0:	10002998 	.word	0x10002998
1a0014b4:	10002924 	.word	0x10002924

1a0014b8 <prvIdleTask>:
{
1a0014b8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0014ba:	f7ff ffd7 	bl	1a00146c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0014be:	4b06      	ldr	r3, [pc, #24]	; (1a0014d8 <prvIdleTask+0x20>)
1a0014c0:	681b      	ldr	r3, [r3, #0]
1a0014c2:	2b01      	cmp	r3, #1
1a0014c4:	d9f9      	bls.n	1a0014ba <prvIdleTask+0x2>
				taskYIELD();
1a0014c6:	4b05      	ldr	r3, [pc, #20]	; (1a0014dc <prvIdleTask+0x24>)
1a0014c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014cc:	601a      	str	r2, [r3, #0]
1a0014ce:	f3bf 8f4f 	dsb	sy
1a0014d2:	f3bf 8f6f 	isb	sy
1a0014d6:	e7f0      	b.n	1a0014ba <prvIdleTask+0x2>
1a0014d8:	10002898 	.word	0x10002898
1a0014dc:	e000ed04 	.word	0xe000ed04

1a0014e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0014e0:	b570      	push	{r4, r5, r6, lr}
1a0014e2:	4604      	mov	r4, r0
1a0014e4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0014e6:	4b1d      	ldr	r3, [pc, #116]	; (1a00155c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0014e8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0014ea:	4b1d      	ldr	r3, [pc, #116]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014ec:	6818      	ldr	r0, [r3, #0]
1a0014ee:	3004      	adds	r0, #4
1a0014f0:	f7ff fe5a 	bl	1a0011a8 <uxListRemove>
1a0014f4:	b950      	cbnz	r0, 1a00150c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0014f6:	4b1a      	ldr	r3, [pc, #104]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014f8:	681b      	ldr	r3, [r3, #0]
1a0014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0014fc:	2301      	movs	r3, #1
1a0014fe:	fa03 f202 	lsl.w	r2, r3, r2
1a001502:	4918      	ldr	r1, [pc, #96]	; (1a001564 <prvAddCurrentTaskToDelayedList+0x84>)
1a001504:	680b      	ldr	r3, [r1, #0]
1a001506:	ea23 0302 	bic.w	r3, r3, r2
1a00150a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00150c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001510:	d00d      	beq.n	1a00152e <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001512:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001514:	4b12      	ldr	r3, [pc, #72]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a001516:	681b      	ldr	r3, [r3, #0]
1a001518:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00151a:	42a5      	cmp	r5, r4
1a00151c:	d910      	bls.n	1a001540 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00151e:	4b12      	ldr	r3, [pc, #72]	; (1a001568 <prvAddCurrentTaskToDelayedList+0x88>)
1a001520:	6818      	ldr	r0, [r3, #0]
1a001522:	4b0f      	ldr	r3, [pc, #60]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a001524:	6819      	ldr	r1, [r3, #0]
1a001526:	3104      	adds	r1, #4
1a001528:	f7ff fe24 	bl	1a001174 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00152c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00152e:	2e00      	cmp	r6, #0
1a001530:	d0ef      	beq.n	1a001512 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001532:	4b0b      	ldr	r3, [pc, #44]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a001534:	6819      	ldr	r1, [r3, #0]
1a001536:	3104      	adds	r1, #4
1a001538:	480c      	ldr	r0, [pc, #48]	; (1a00156c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00153a:	f7ff fe10 	bl	1a00115e <vListInsertEnd>
1a00153e:	e7f5      	b.n	1a00152c <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001540:	4b0b      	ldr	r3, [pc, #44]	; (1a001570 <prvAddCurrentTaskToDelayedList+0x90>)
1a001542:	6818      	ldr	r0, [r3, #0]
1a001544:	4b06      	ldr	r3, [pc, #24]	; (1a001560 <prvAddCurrentTaskToDelayedList+0x80>)
1a001546:	6819      	ldr	r1, [r3, #0]
1a001548:	3104      	adds	r1, #4
1a00154a:	f7ff fe13 	bl	1a001174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a00154e:	4b09      	ldr	r3, [pc, #36]	; (1a001574 <prvAddCurrentTaskToDelayedList+0x94>)
1a001550:	681b      	ldr	r3, [r3, #0]
1a001552:	42a3      	cmp	r3, r4
1a001554:	d9ea      	bls.n	1a00152c <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a001556:	4b07      	ldr	r3, [pc, #28]	; (1a001574 <prvAddCurrentTaskToDelayedList+0x94>)
1a001558:	601c      	str	r4, [r3, #0]
}
1a00155a:	e7e7      	b.n	1a00152c <prvAddCurrentTaskToDelayedList+0x4c>
1a00155c:	100029ac 	.word	0x100029ac
1a001560:	1000288c 	.word	0x1000288c
1a001564:	10002938 	.word	0x10002938
1a001568:	10002894 	.word	0x10002894
1a00156c:	10002984 	.word	0x10002984
1a001570:	10002890 	.word	0x10002890
1a001574:	10002964 	.word	0x10002964

1a001578 <xTaskCreateStatic>:
	{
1a001578:	b570      	push	{r4, r5, r6, lr}
1a00157a:	b086      	sub	sp, #24
1a00157c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00157e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001580:	b175      	cbz	r5, 1a0015a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001582:	b1b4      	cbz	r4, 1a0015b2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001584:	2660      	movs	r6, #96	; 0x60
1a001586:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001588:	9e04      	ldr	r6, [sp, #16]
1a00158a:	2e60      	cmp	r6, #96	; 0x60
1a00158c:	d01a      	beq.n	1a0015c4 <xTaskCreateStatic+0x4c>
1a00158e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001592:	f383 8811 	msr	BASEPRI, r3
1a001596:	f3bf 8f6f 	isb	sy
1a00159a:	f3bf 8f4f 	dsb	sy
1a00159e:	e7fe      	b.n	1a00159e <xTaskCreateStatic+0x26>
1a0015a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015a4:	f383 8811 	msr	BASEPRI, r3
1a0015a8:	f3bf 8f6f 	isb	sy
1a0015ac:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a0015b0:	e7fe      	b.n	1a0015b0 <xTaskCreateStatic+0x38>
1a0015b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b6:	f383 8811 	msr	BASEPRI, r3
1a0015ba:	f3bf 8f6f 	isb	sy
1a0015be:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a0015c2:	e7fe      	b.n	1a0015c2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0015c4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0015c6:	2502      	movs	r5, #2
1a0015c8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0015cc:	2500      	movs	r5, #0
1a0015ce:	9503      	str	r5, [sp, #12]
1a0015d0:	9402      	str	r4, [sp, #8]
1a0015d2:	ad05      	add	r5, sp, #20
1a0015d4:	9501      	str	r5, [sp, #4]
1a0015d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0015d8:	9500      	str	r5, [sp, #0]
1a0015da:	f7ff fe59 	bl	1a001290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0015de:	4620      	mov	r0, r4
1a0015e0:	f7ff fed2 	bl	1a001388 <prvAddNewTaskToReadyList>
	}
1a0015e4:	9805      	ldr	r0, [sp, #20]
1a0015e6:	b006      	add	sp, #24
1a0015e8:	bd70      	pop	{r4, r5, r6, pc}

1a0015ea <xTaskCreate>:
	{
1a0015ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0015ee:	b085      	sub	sp, #20
1a0015f0:	4607      	mov	r7, r0
1a0015f2:	4688      	mov	r8, r1
1a0015f4:	4615      	mov	r5, r2
1a0015f6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015f8:	0090      	lsls	r0, r2, #2
1a0015fa:	f7ff f965 	bl	1a0008c8 <pvPortMalloc>
			if( pxStack != NULL )
1a0015fe:	b1f8      	cbz	r0, 1a001640 <xTaskCreate+0x56>
1a001600:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001602:	2060      	movs	r0, #96	; 0x60
1a001604:	f7ff f960 	bl	1a0008c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001608:	4604      	mov	r4, r0
1a00160a:	b1a8      	cbz	r0, 1a001638 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a00160c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00160e:	b1e4      	cbz	r4, 1a00164a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001610:	2300      	movs	r3, #0
1a001612:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001616:	9303      	str	r3, [sp, #12]
1a001618:	9402      	str	r4, [sp, #8]
1a00161a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00161c:	9301      	str	r3, [sp, #4]
1a00161e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001620:	9300      	str	r3, [sp, #0]
1a001622:	464b      	mov	r3, r9
1a001624:	462a      	mov	r2, r5
1a001626:	4641      	mov	r1, r8
1a001628:	4638      	mov	r0, r7
1a00162a:	f7ff fe31 	bl	1a001290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00162e:	4620      	mov	r0, r4
1a001630:	f7ff feaa 	bl	1a001388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001634:	2001      	movs	r0, #1
1a001636:	e005      	b.n	1a001644 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a001638:	4630      	mov	r0, r6
1a00163a:	f7ff f9d3 	bl	1a0009e4 <vPortFree>
1a00163e:	e7e6      	b.n	1a00160e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001644:	b005      	add	sp, #20
1a001646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00164a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00164e:	e7f9      	b.n	1a001644 <xTaskCreate+0x5a>

1a001650 <vTaskStartScheduler>:
{
1a001650:	b510      	push	{r4, lr}
1a001652:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001654:	2400      	movs	r4, #0
1a001656:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001658:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00165a:	aa07      	add	r2, sp, #28
1a00165c:	a906      	add	r1, sp, #24
1a00165e:	a805      	add	r0, sp, #20
1a001660:	f7ff fdb6 	bl	1a0011d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001664:	9b05      	ldr	r3, [sp, #20]
1a001666:	9302      	str	r3, [sp, #8]
1a001668:	9b06      	ldr	r3, [sp, #24]
1a00166a:	9301      	str	r3, [sp, #4]
1a00166c:	9400      	str	r4, [sp, #0]
1a00166e:	4623      	mov	r3, r4
1a001670:	9a07      	ldr	r2, [sp, #28]
1a001672:	4917      	ldr	r1, [pc, #92]	; (1a0016d0 <vTaskStartScheduler+0x80>)
1a001674:	4817      	ldr	r0, [pc, #92]	; (1a0016d4 <vTaskStartScheduler+0x84>)
1a001676:	f7ff ff7f 	bl	1a001578 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00167a:	b140      	cbz	r0, 1a00168e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00167c:	f000 fbcc 	bl	1a001e18 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001680:	2801      	cmp	r0, #1
1a001682:	d006      	beq.n	1a001692 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001684:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001688:	d018      	beq.n	1a0016bc <vTaskStartScheduler+0x6c>
}
1a00168a:	b008      	add	sp, #32
1a00168c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00168e:	2000      	movs	r0, #0
1a001690:	e7f6      	b.n	1a001680 <vTaskStartScheduler+0x30>
1a001692:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001696:	f383 8811 	msr	BASEPRI, r3
1a00169a:	f3bf 8f6f 	isb	sy
1a00169e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0016a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0016d8 <vTaskStartScheduler+0x88>)
1a0016a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0016a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0016aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0016dc <vTaskStartScheduler+0x8c>)
1a0016ac:	2201      	movs	r2, #1
1a0016ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0016b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0016e0 <vTaskStartScheduler+0x90>)
1a0016b2:	2200      	movs	r2, #0
1a0016b4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0016b6:	f000 fe67 	bl	1a002388 <xPortStartScheduler>
1a0016ba:	e7e6      	b.n	1a00168a <vTaskStartScheduler+0x3a>
1a0016bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016c0:	f383 8811 	msr	BASEPRI, r3
1a0016c4:	f3bf 8f6f 	isb	sy
1a0016c8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0016cc:	e7fe      	b.n	1a0016cc <vTaskStartScheduler+0x7c>
1a0016ce:	bf00      	nop
1a0016d0:	1a004d84 	.word	0x1a004d84
1a0016d4:	1a0014b9 	.word	0x1a0014b9
1a0016d8:	10002964 	.word	0x10002964
1a0016dc:	10002980 	.word	0x10002980
1a0016e0:	100029ac 	.word	0x100029ac

1a0016e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0016e4:	4a02      	ldr	r2, [pc, #8]	; (1a0016f0 <vTaskSuspendAll+0xc>)
1a0016e6:	6813      	ldr	r3, [r2, #0]
1a0016e8:	3301      	adds	r3, #1
1a0016ea:	6013      	str	r3, [r2, #0]
}
1a0016ec:	4770      	bx	lr
1a0016ee:	bf00      	nop
1a0016f0:	10002930 	.word	0x10002930

1a0016f4 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0016f4:	4b01      	ldr	r3, [pc, #4]	; (1a0016fc <xTaskGetTickCount+0x8>)
1a0016f6:	6818      	ldr	r0, [r3, #0]
}
1a0016f8:	4770      	bx	lr
1a0016fa:	bf00      	nop
1a0016fc:	100029ac 	.word	0x100029ac

1a001700 <xTaskIncrementTick>:
{
1a001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001702:	4b3a      	ldr	r3, [pc, #232]	; (1a0017ec <xTaskIncrementTick+0xec>)
1a001704:	681b      	ldr	r3, [r3, #0]
1a001706:	2b00      	cmp	r3, #0
1a001708:	d164      	bne.n	1a0017d4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00170a:	4b39      	ldr	r3, [pc, #228]	; (1a0017f0 <xTaskIncrementTick+0xf0>)
1a00170c:	681d      	ldr	r5, [r3, #0]
1a00170e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001710:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001712:	b9c5      	cbnz	r5, 1a001746 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001714:	4b37      	ldr	r3, [pc, #220]	; (1a0017f4 <xTaskIncrementTick+0xf4>)
1a001716:	681b      	ldr	r3, [r3, #0]
1a001718:	681b      	ldr	r3, [r3, #0]
1a00171a:	b143      	cbz	r3, 1a00172e <xTaskIncrementTick+0x2e>
1a00171c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001720:	f383 8811 	msr	BASEPRI, r3
1a001724:	f3bf 8f6f 	isb	sy
1a001728:	f3bf 8f4f 	dsb	sy
1a00172c:	e7fe      	b.n	1a00172c <xTaskIncrementTick+0x2c>
1a00172e:	4a31      	ldr	r2, [pc, #196]	; (1a0017f4 <xTaskIncrementTick+0xf4>)
1a001730:	6811      	ldr	r1, [r2, #0]
1a001732:	4b31      	ldr	r3, [pc, #196]	; (1a0017f8 <xTaskIncrementTick+0xf8>)
1a001734:	6818      	ldr	r0, [r3, #0]
1a001736:	6010      	str	r0, [r2, #0]
1a001738:	6019      	str	r1, [r3, #0]
1a00173a:	4a30      	ldr	r2, [pc, #192]	; (1a0017fc <xTaskIncrementTick+0xfc>)
1a00173c:	6813      	ldr	r3, [r2, #0]
1a00173e:	3301      	adds	r3, #1
1a001740:	6013      	str	r3, [r2, #0]
1a001742:	f7ff fd8f 	bl	1a001264 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001746:	4b2e      	ldr	r3, [pc, #184]	; (1a001800 <xTaskIncrementTick+0x100>)
1a001748:	681b      	ldr	r3, [r3, #0]
1a00174a:	42ab      	cmp	r3, r5
1a00174c:	d938      	bls.n	1a0017c0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00174e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001750:	4b2c      	ldr	r3, [pc, #176]	; (1a001804 <xTaskIncrementTick+0x104>)
1a001752:	681b      	ldr	r3, [r3, #0]
1a001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00175a:	009a      	lsls	r2, r3, #2
1a00175c:	4b2a      	ldr	r3, [pc, #168]	; (1a001808 <xTaskIncrementTick+0x108>)
1a00175e:	589b      	ldr	r3, [r3, r2]
1a001760:	2b01      	cmp	r3, #1
1a001762:	d93c      	bls.n	1a0017de <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001764:	2401      	movs	r4, #1
1a001766:	e03a      	b.n	1a0017de <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001768:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00176a:	4b22      	ldr	r3, [pc, #136]	; (1a0017f4 <xTaskIncrementTick+0xf4>)
1a00176c:	681b      	ldr	r3, [r3, #0]
1a00176e:	681b      	ldr	r3, [r3, #0]
1a001770:	b343      	cbz	r3, 1a0017c4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001772:	4b20      	ldr	r3, [pc, #128]	; (1a0017f4 <xTaskIncrementTick+0xf4>)
1a001774:	681b      	ldr	r3, [r3, #0]
1a001776:	68db      	ldr	r3, [r3, #12]
1a001778:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00177a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00177c:	429d      	cmp	r5, r3
1a00177e:	d326      	bcc.n	1a0017ce <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001780:	1d37      	adds	r7, r6, #4
1a001782:	4638      	mov	r0, r7
1a001784:	f7ff fd10 	bl	1a0011a8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001788:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00178a:	b11b      	cbz	r3, 1a001794 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00178c:	f106 0018 	add.w	r0, r6, #24
1a001790:	f7ff fd0a 	bl	1a0011a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001794:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001796:	2201      	movs	r2, #1
1a001798:	409a      	lsls	r2, r3
1a00179a:	491c      	ldr	r1, [pc, #112]	; (1a00180c <xTaskIncrementTick+0x10c>)
1a00179c:	6808      	ldr	r0, [r1, #0]
1a00179e:	4302      	orrs	r2, r0
1a0017a0:	600a      	str	r2, [r1, #0]
1a0017a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017a6:	009a      	lsls	r2, r3, #2
1a0017a8:	4639      	mov	r1, r7
1a0017aa:	4817      	ldr	r0, [pc, #92]	; (1a001808 <xTaskIncrementTick+0x108>)
1a0017ac:	4410      	add	r0, r2
1a0017ae:	f7ff fcd6 	bl	1a00115e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0017b2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0017b4:	4b13      	ldr	r3, [pc, #76]	; (1a001804 <xTaskIncrementTick+0x104>)
1a0017b6:	681b      	ldr	r3, [r3, #0]
1a0017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017ba:	429a      	cmp	r2, r3
1a0017bc:	d2d4      	bcs.n	1a001768 <xTaskIncrementTick+0x68>
1a0017be:	e7d4      	b.n	1a00176a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0017c0:	2400      	movs	r4, #0
1a0017c2:	e7d2      	b.n	1a00176a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017c4:	4b0e      	ldr	r3, [pc, #56]	; (1a001800 <xTaskIncrementTick+0x100>)
1a0017c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0017ca:	601a      	str	r2, [r3, #0]
					break;
1a0017cc:	e7c0      	b.n	1a001750 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0017ce:	4a0c      	ldr	r2, [pc, #48]	; (1a001800 <xTaskIncrementTick+0x100>)
1a0017d0:	6013      	str	r3, [r2, #0]
						break;
1a0017d2:	e7bd      	b.n	1a001750 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0017d4:	4a0e      	ldr	r2, [pc, #56]	; (1a001810 <xTaskIncrementTick+0x110>)
1a0017d6:	6813      	ldr	r3, [r2, #0]
1a0017d8:	3301      	adds	r3, #1
1a0017da:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0017dc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0017de:	4b0d      	ldr	r3, [pc, #52]	; (1a001814 <xTaskIncrementTick+0x114>)
1a0017e0:	681b      	ldr	r3, [r3, #0]
1a0017e2:	b103      	cbz	r3, 1a0017e6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0017e4:	2401      	movs	r4, #1
}
1a0017e6:	4620      	mov	r0, r4
1a0017e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0017ea:	bf00      	nop
1a0017ec:	10002930 	.word	0x10002930
1a0017f0:	100029ac 	.word	0x100029ac
1a0017f4:	10002890 	.word	0x10002890
1a0017f8:	10002894 	.word	0x10002894
1a0017fc:	10002968 	.word	0x10002968
1a001800:	10002964 	.word	0x10002964
1a001804:	1000288c 	.word	0x1000288c
1a001808:	10002898 	.word	0x10002898
1a00180c:	10002938 	.word	0x10002938
1a001810:	1000292c 	.word	0x1000292c
1a001814:	100029b0 	.word	0x100029b0

1a001818 <xTaskResumeAll>:
{
1a001818:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00181a:	4b35      	ldr	r3, [pc, #212]	; (1a0018f0 <xTaskResumeAll+0xd8>)
1a00181c:	681b      	ldr	r3, [r3, #0]
1a00181e:	b943      	cbnz	r3, 1a001832 <xTaskResumeAll+0x1a>
1a001820:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001824:	f383 8811 	msr	BASEPRI, r3
1a001828:	f3bf 8f6f 	isb	sy
1a00182c:	f3bf 8f4f 	dsb	sy
1a001830:	e7fe      	b.n	1a001830 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001832:	f000 fd07 	bl	1a002244 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001836:	4b2e      	ldr	r3, [pc, #184]	; (1a0018f0 <xTaskResumeAll+0xd8>)
1a001838:	681a      	ldr	r2, [r3, #0]
1a00183a:	3a01      	subs	r2, #1
1a00183c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00183e:	681b      	ldr	r3, [r3, #0]
1a001840:	2b00      	cmp	r3, #0
1a001842:	d14d      	bne.n	1a0018e0 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001844:	4b2b      	ldr	r3, [pc, #172]	; (1a0018f4 <xTaskResumeAll+0xdc>)
1a001846:	681b      	ldr	r3, [r3, #0]
1a001848:	b90b      	cbnz	r3, 1a00184e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a00184a:	2400      	movs	r4, #0
1a00184c:	e049      	b.n	1a0018e2 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a00184e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001850:	4b29      	ldr	r3, [pc, #164]	; (1a0018f8 <xTaskResumeAll+0xe0>)
1a001852:	681b      	ldr	r3, [r3, #0]
1a001854:	b31b      	cbz	r3, 1a00189e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001856:	4b28      	ldr	r3, [pc, #160]	; (1a0018f8 <xTaskResumeAll+0xe0>)
1a001858:	68db      	ldr	r3, [r3, #12]
1a00185a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00185c:	f104 0018 	add.w	r0, r4, #24
1a001860:	f7ff fca2 	bl	1a0011a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001864:	1d25      	adds	r5, r4, #4
1a001866:	4628      	mov	r0, r5
1a001868:	f7ff fc9e 	bl	1a0011a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00186c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00186e:	2201      	movs	r2, #1
1a001870:	409a      	lsls	r2, r3
1a001872:	4922      	ldr	r1, [pc, #136]	; (1a0018fc <xTaskResumeAll+0xe4>)
1a001874:	6808      	ldr	r0, [r1, #0]
1a001876:	4302      	orrs	r2, r0
1a001878:	600a      	str	r2, [r1, #0]
1a00187a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00187e:	009a      	lsls	r2, r3, #2
1a001880:	4629      	mov	r1, r5
1a001882:	481f      	ldr	r0, [pc, #124]	; (1a001900 <xTaskResumeAll+0xe8>)
1a001884:	4410      	add	r0, r2
1a001886:	f7ff fc6a 	bl	1a00115e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00188a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00188c:	4b1d      	ldr	r3, [pc, #116]	; (1a001904 <xTaskResumeAll+0xec>)
1a00188e:	681b      	ldr	r3, [r3, #0]
1a001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001892:	429a      	cmp	r2, r3
1a001894:	d3dc      	bcc.n	1a001850 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a001896:	4b1c      	ldr	r3, [pc, #112]	; (1a001908 <xTaskResumeAll+0xf0>)
1a001898:	2201      	movs	r2, #1
1a00189a:	601a      	str	r2, [r3, #0]
1a00189c:	e7d8      	b.n	1a001850 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a00189e:	b10c      	cbz	r4, 1a0018a4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0018a0:	f7ff fce0 	bl	1a001264 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0018a4:	4b19      	ldr	r3, [pc, #100]	; (1a00190c <xTaskResumeAll+0xf4>)
1a0018a6:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0018a8:	b974      	cbnz	r4, 1a0018c8 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0018aa:	4b17      	ldr	r3, [pc, #92]	; (1a001908 <xTaskResumeAll+0xf0>)
1a0018ac:	681b      	ldr	r3, [r3, #0]
1a0018ae:	b1e3      	cbz	r3, 1a0018ea <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a0018b0:	4b17      	ldr	r3, [pc, #92]	; (1a001910 <xTaskResumeAll+0xf8>)
1a0018b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018b6:	601a      	str	r2, [r3, #0]
1a0018b8:	f3bf 8f4f 	dsb	sy
1a0018bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0018c0:	2401      	movs	r4, #1
1a0018c2:	e00e      	b.n	1a0018e2 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0018c4:	3c01      	subs	r4, #1
1a0018c6:	d007      	beq.n	1a0018d8 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0018c8:	f7ff ff1a 	bl	1a001700 <xTaskIncrementTick>
1a0018cc:	2800      	cmp	r0, #0
1a0018ce:	d0f9      	beq.n	1a0018c4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0018d0:	4b0d      	ldr	r3, [pc, #52]	; (1a001908 <xTaskResumeAll+0xf0>)
1a0018d2:	2201      	movs	r2, #1
1a0018d4:	601a      	str	r2, [r3, #0]
1a0018d6:	e7f5      	b.n	1a0018c4 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0018d8:	4b0c      	ldr	r3, [pc, #48]	; (1a00190c <xTaskResumeAll+0xf4>)
1a0018da:	2200      	movs	r2, #0
1a0018dc:	601a      	str	r2, [r3, #0]
1a0018de:	e7e4      	b.n	1a0018aa <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0018e0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0018e2:	f000 fcd1 	bl	1a002288 <vPortExitCritical>
}
1a0018e6:	4620      	mov	r0, r4
1a0018e8:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a0018ea:	2400      	movs	r4, #0
1a0018ec:	e7f9      	b.n	1a0018e2 <xTaskResumeAll+0xca>
1a0018ee:	bf00      	nop
1a0018f0:	10002930 	.word	0x10002930
1a0018f4:	10002924 	.word	0x10002924
1a0018f8:	1000296c 	.word	0x1000296c
1a0018fc:	10002938 	.word	0x10002938
1a001900:	10002898 	.word	0x10002898
1a001904:	1000288c 	.word	0x1000288c
1a001908:	100029b0 	.word	0x100029b0
1a00190c:	1000292c 	.word	0x1000292c
1a001910:	e000ed04 	.word	0xe000ed04

1a001914 <vTaskDelayUntil>:
	{
1a001914:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001916:	b150      	cbz	r0, 1a00192e <vTaskDelayUntil+0x1a>
1a001918:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00191a:	b989      	cbnz	r1, 1a001940 <vTaskDelayUntil+0x2c>
1a00191c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001920:	f383 8811 	msr	BASEPRI, r3
1a001924:	f3bf 8f6f 	isb	sy
1a001928:	f3bf 8f4f 	dsb	sy
1a00192c:	e7fe      	b.n	1a00192c <vTaskDelayUntil+0x18>
1a00192e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001932:	f383 8811 	msr	BASEPRI, r3
1a001936:	f3bf 8f6f 	isb	sy
1a00193a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a00193e:	e7fe      	b.n	1a00193e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001940:	4b1a      	ldr	r3, [pc, #104]	; (1a0019ac <vTaskDelayUntil+0x98>)
1a001942:	681b      	ldr	r3, [r3, #0]
1a001944:	b143      	cbz	r3, 1a001958 <vTaskDelayUntil+0x44>
1a001946:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00194a:	f383 8811 	msr	BASEPRI, r3
1a00194e:	f3bf 8f6f 	isb	sy
1a001952:	f3bf 8f4f 	dsb	sy
1a001956:	e7fe      	b.n	1a001956 <vTaskDelayUntil+0x42>
1a001958:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a00195a:	f7ff fec3 	bl	1a0016e4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00195e:	4b14      	ldr	r3, [pc, #80]	; (1a0019b0 <vTaskDelayUntil+0x9c>)
1a001960:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001962:	682a      	ldr	r2, [r5, #0]
1a001964:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001966:	4282      	cmp	r2, r0
1a001968:	d909      	bls.n	1a00197e <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00196a:	42a2      	cmp	r2, r4
1a00196c:	d801      	bhi.n	1a001972 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a00196e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001970:	e00e      	b.n	1a001990 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001972:	42a0      	cmp	r0, r4
1a001974:	d301      	bcc.n	1a00197a <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a001976:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001978:	e00a      	b.n	1a001990 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a00197a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a00197c:	e004      	b.n	1a001988 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a00197e:	42a2      	cmp	r2, r4
1a001980:	d801      	bhi.n	1a001986 <vTaskDelayUntil+0x72>
1a001982:	42a0      	cmp	r0, r4
1a001984:	d210      	bcs.n	1a0019a8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001986:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001988:	2100      	movs	r1, #0
1a00198a:	1a20      	subs	r0, r4, r0
1a00198c:	f7ff fda8 	bl	1a0014e0 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a001990:	f7ff ff42 	bl	1a001818 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001994:	b938      	cbnz	r0, 1a0019a6 <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a001996:	4b07      	ldr	r3, [pc, #28]	; (1a0019b4 <vTaskDelayUntil+0xa0>)
1a001998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00199c:	601a      	str	r2, [r3, #0]
1a00199e:	f3bf 8f4f 	dsb	sy
1a0019a2:	f3bf 8f6f 	isb	sy
	}
1a0019a6:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a0019a8:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0019aa:	e7f1      	b.n	1a001990 <vTaskDelayUntil+0x7c>
1a0019ac:	10002930 	.word	0x10002930
1a0019b0:	100029ac 	.word	0x100029ac
1a0019b4:	e000ed04 	.word	0xe000ed04

1a0019b8 <vTaskDelay>:
	{
1a0019b8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0019ba:	b1a8      	cbz	r0, 1a0019e8 <vTaskDelay+0x30>
1a0019bc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0019be:	4b0f      	ldr	r3, [pc, #60]	; (1a0019fc <vTaskDelay+0x44>)
1a0019c0:	681b      	ldr	r3, [r3, #0]
1a0019c2:	b143      	cbz	r3, 1a0019d6 <vTaskDelay+0x1e>
1a0019c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019c8:	f383 8811 	msr	BASEPRI, r3
1a0019cc:	f3bf 8f6f 	isb	sy
1a0019d0:	f3bf 8f4f 	dsb	sy
1a0019d4:	e7fe      	b.n	1a0019d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0019d6:	f7ff fe85 	bl	1a0016e4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0019da:	2100      	movs	r1, #0
1a0019dc:	4620      	mov	r0, r4
1a0019de:	f7ff fd7f 	bl	1a0014e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0019e2:	f7ff ff19 	bl	1a001818 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0019e6:	b938      	cbnz	r0, 1a0019f8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0019e8:	4b05      	ldr	r3, [pc, #20]	; (1a001a00 <vTaskDelay+0x48>)
1a0019ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019ee:	601a      	str	r2, [r3, #0]
1a0019f0:	f3bf 8f4f 	dsb	sy
1a0019f4:	f3bf 8f6f 	isb	sy
	}
1a0019f8:	bd10      	pop	{r4, pc}
1a0019fa:	bf00      	nop
1a0019fc:	10002930 	.word	0x10002930
1a001a00:	e000ed04 	.word	0xe000ed04

1a001a04 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001a04:	4b2d      	ldr	r3, [pc, #180]	; (1a001abc <vTaskSwitchContext+0xb8>)
1a001a06:	681b      	ldr	r3, [r3, #0]
1a001a08:	b11b      	cbz	r3, 1a001a12 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001a0a:	4b2d      	ldr	r3, [pc, #180]	; (1a001ac0 <vTaskSwitchContext+0xbc>)
1a001a0c:	2201      	movs	r2, #1
1a001a0e:	601a      	str	r2, [r3, #0]
1a001a10:	4770      	bx	lr
{
1a001a12:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001a14:	4b2a      	ldr	r3, [pc, #168]	; (1a001ac0 <vTaskSwitchContext+0xbc>)
1a001a16:	2200      	movs	r2, #0
1a001a18:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a1a:	4b2a      	ldr	r3, [pc, #168]	; (1a001ac4 <vTaskSwitchContext+0xc0>)
1a001a1c:	681b      	ldr	r3, [r3, #0]
1a001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001a20:	681a      	ldr	r2, [r3, #0]
1a001a22:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a26:	d103      	bne.n	1a001a30 <vTaskSwitchContext+0x2c>
1a001a28:	685a      	ldr	r2, [r3, #4]
1a001a2a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a2e:	d01b      	beq.n	1a001a68 <vTaskSwitchContext+0x64>
1a001a30:	4b24      	ldr	r3, [pc, #144]	; (1a001ac4 <vTaskSwitchContext+0xc0>)
1a001a32:	6818      	ldr	r0, [r3, #0]
1a001a34:	6819      	ldr	r1, [r3, #0]
1a001a36:	3134      	adds	r1, #52	; 0x34
1a001a38:	f7ff fc06 	bl	1a001248 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a3c:	4b22      	ldr	r3, [pc, #136]	; (1a001ac8 <vTaskSwitchContext+0xc4>)
1a001a3e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001a40:	fab3 f383 	clz	r3, r3
1a001a44:	b2db      	uxtb	r3, r3
1a001a46:	f1c3 031f 	rsb	r3, r3, #31
1a001a4a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a4e:	008a      	lsls	r2, r1, #2
1a001a50:	491e      	ldr	r1, [pc, #120]	; (1a001acc <vTaskSwitchContext+0xc8>)
1a001a52:	588a      	ldr	r2, [r1, r2]
1a001a54:	b98a      	cbnz	r2, 1a001a7a <vTaskSwitchContext+0x76>
	__asm volatile
1a001a56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a5a:	f383 8811 	msr	BASEPRI, r3
1a001a5e:	f3bf 8f6f 	isb	sy
1a001a62:	f3bf 8f4f 	dsb	sy
1a001a66:	e7fe      	b.n	1a001a66 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a68:	689a      	ldr	r2, [r3, #8]
1a001a6a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a6e:	d1df      	bne.n	1a001a30 <vTaskSwitchContext+0x2c>
1a001a70:	68db      	ldr	r3, [r3, #12]
1a001a72:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001a76:	d1db      	bne.n	1a001a30 <vTaskSwitchContext+0x2c>
1a001a78:	e7e0      	b.n	1a001a3c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a7a:	4814      	ldr	r0, [pc, #80]	; (1a001acc <vTaskSwitchContext+0xc8>)
1a001a7c:	009a      	lsls	r2, r3, #2
1a001a7e:	18d4      	adds	r4, r2, r3
1a001a80:	00a1      	lsls	r1, r4, #2
1a001a82:	4401      	add	r1, r0
1a001a84:	684c      	ldr	r4, [r1, #4]
1a001a86:	6864      	ldr	r4, [r4, #4]
1a001a88:	604c      	str	r4, [r1, #4]
1a001a8a:	441a      	add	r2, r3
1a001a8c:	0091      	lsls	r1, r2, #2
1a001a8e:	3108      	adds	r1, #8
1a001a90:	4408      	add	r0, r1
1a001a92:	4284      	cmp	r4, r0
1a001a94:	d009      	beq.n	1a001aaa <vTaskSwitchContext+0xa6>
1a001a96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a9a:	009a      	lsls	r2, r3, #2
1a001a9c:	4b0b      	ldr	r3, [pc, #44]	; (1a001acc <vTaskSwitchContext+0xc8>)
1a001a9e:	4413      	add	r3, r2
1a001aa0:	685b      	ldr	r3, [r3, #4]
1a001aa2:	68da      	ldr	r2, [r3, #12]
1a001aa4:	4b07      	ldr	r3, [pc, #28]	; (1a001ac4 <vTaskSwitchContext+0xc0>)
1a001aa6:	601a      	str	r2, [r3, #0]
}
1a001aa8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001aaa:	6860      	ldr	r0, [r4, #4]
1a001aac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001ab0:	0091      	lsls	r1, r2, #2
1a001ab2:	4a06      	ldr	r2, [pc, #24]	; (1a001acc <vTaskSwitchContext+0xc8>)
1a001ab4:	440a      	add	r2, r1
1a001ab6:	6050      	str	r0, [r2, #4]
1a001ab8:	e7ed      	b.n	1a001a96 <vTaskSwitchContext+0x92>
1a001aba:	bf00      	nop
1a001abc:	10002930 	.word	0x10002930
1a001ac0:	100029b0 	.word	0x100029b0
1a001ac4:	1000288c 	.word	0x1000288c
1a001ac8:	10002938 	.word	0x10002938
1a001acc:	10002898 	.word	0x10002898

1a001ad0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001ad0:	b158      	cbz	r0, 1a001aea <vTaskPlaceOnEventList+0x1a>
{
1a001ad2:	b510      	push	{r4, lr}
1a001ad4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001ad6:	4b09      	ldr	r3, [pc, #36]	; (1a001afc <vTaskPlaceOnEventList+0x2c>)
1a001ad8:	6819      	ldr	r1, [r3, #0]
1a001ada:	3118      	adds	r1, #24
1a001adc:	f7ff fb4a 	bl	1a001174 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001ae0:	2101      	movs	r1, #1
1a001ae2:	4620      	mov	r0, r4
1a001ae4:	f7ff fcfc 	bl	1a0014e0 <prvAddCurrentTaskToDelayedList>
}
1a001ae8:	bd10      	pop	{r4, pc}
1a001aea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aee:	f383 8811 	msr	BASEPRI, r3
1a001af2:	f3bf 8f6f 	isb	sy
1a001af6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a001afa:	e7fe      	b.n	1a001afa <vTaskPlaceOnEventList+0x2a>
1a001afc:	1000288c 	.word	0x1000288c

1a001b00 <vTaskPlaceOnEventListRestricted>:
	{
1a001b00:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001b02:	b170      	cbz	r0, 1a001b22 <vTaskPlaceOnEventListRestricted+0x22>
1a001b04:	460c      	mov	r4, r1
1a001b06:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001b08:	4a0a      	ldr	r2, [pc, #40]	; (1a001b34 <vTaskPlaceOnEventListRestricted+0x34>)
1a001b0a:	6811      	ldr	r1, [r2, #0]
1a001b0c:	3118      	adds	r1, #24
1a001b0e:	f7ff fb26 	bl	1a00115e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001b12:	b10d      	cbz	r5, 1a001b18 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001b14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001b18:	4629      	mov	r1, r5
1a001b1a:	4620      	mov	r0, r4
1a001b1c:	f7ff fce0 	bl	1a0014e0 <prvAddCurrentTaskToDelayedList>
	}
1a001b20:	bd38      	pop	{r3, r4, r5, pc}
1a001b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b26:	f383 8811 	msr	BASEPRI, r3
1a001b2a:	f3bf 8f6f 	isb	sy
1a001b2e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a001b32:	e7fe      	b.n	1a001b32 <vTaskPlaceOnEventListRestricted+0x32>
1a001b34:	1000288c 	.word	0x1000288c

1a001b38 <xTaskRemoveFromEventList>:
{
1a001b38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001b3a:	68c3      	ldr	r3, [r0, #12]
1a001b3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001b3e:	b324      	cbz	r4, 1a001b8a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001b40:	f104 0518 	add.w	r5, r4, #24
1a001b44:	4628      	mov	r0, r5
1a001b46:	f7ff fb2f 	bl	1a0011a8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b4a:	4b18      	ldr	r3, [pc, #96]	; (1a001bac <xTaskRemoveFromEventList+0x74>)
1a001b4c:	681b      	ldr	r3, [r3, #0]
1a001b4e:	bb2b      	cbnz	r3, 1a001b9c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001b50:	1d25      	adds	r5, r4, #4
1a001b52:	4628      	mov	r0, r5
1a001b54:	f7ff fb28 	bl	1a0011a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b5a:	2201      	movs	r2, #1
1a001b5c:	409a      	lsls	r2, r3
1a001b5e:	4914      	ldr	r1, [pc, #80]	; (1a001bb0 <xTaskRemoveFromEventList+0x78>)
1a001b60:	6808      	ldr	r0, [r1, #0]
1a001b62:	4302      	orrs	r2, r0
1a001b64:	600a      	str	r2, [r1, #0]
1a001b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b6a:	009a      	lsls	r2, r3, #2
1a001b6c:	4629      	mov	r1, r5
1a001b6e:	4811      	ldr	r0, [pc, #68]	; (1a001bb4 <xTaskRemoveFromEventList+0x7c>)
1a001b70:	4410      	add	r0, r2
1a001b72:	f7ff faf4 	bl	1a00115e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b78:	4b0f      	ldr	r3, [pc, #60]	; (1a001bb8 <xTaskRemoveFromEventList+0x80>)
1a001b7a:	681b      	ldr	r3, [r3, #0]
1a001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b7e:	429a      	cmp	r2, r3
1a001b80:	d911      	bls.n	1a001ba6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001b82:	2001      	movs	r0, #1
1a001b84:	4b0d      	ldr	r3, [pc, #52]	; (1a001bbc <xTaskRemoveFromEventList+0x84>)
1a001b86:	6018      	str	r0, [r3, #0]
1a001b88:	e00e      	b.n	1a001ba8 <xTaskRemoveFromEventList+0x70>
1a001b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b8e:	f383 8811 	msr	BASEPRI, r3
1a001b92:	f3bf 8f6f 	isb	sy
1a001b96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a001b9a:	e7fe      	b.n	1a001b9a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001b9c:	4629      	mov	r1, r5
1a001b9e:	4808      	ldr	r0, [pc, #32]	; (1a001bc0 <xTaskRemoveFromEventList+0x88>)
1a001ba0:	f7ff fadd 	bl	1a00115e <vListInsertEnd>
1a001ba4:	e7e7      	b.n	1a001b76 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001ba6:	2000      	movs	r0, #0
}
1a001ba8:	bd38      	pop	{r3, r4, r5, pc}
1a001baa:	bf00      	nop
1a001bac:	10002930 	.word	0x10002930
1a001bb0:	10002938 	.word	0x10002938
1a001bb4:	10002898 	.word	0x10002898
1a001bb8:	1000288c 	.word	0x1000288c
1a001bbc:	100029b0 	.word	0x100029b0
1a001bc0:	1000296c 	.word	0x1000296c

1a001bc4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001bc4:	4b03      	ldr	r3, [pc, #12]	; (1a001bd4 <vTaskInternalSetTimeOutState+0x10>)
1a001bc6:	681b      	ldr	r3, [r3, #0]
1a001bc8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001bca:	4b03      	ldr	r3, [pc, #12]	; (1a001bd8 <vTaskInternalSetTimeOutState+0x14>)
1a001bcc:	681b      	ldr	r3, [r3, #0]
1a001bce:	6043      	str	r3, [r0, #4]
}
1a001bd0:	4770      	bx	lr
1a001bd2:	bf00      	nop
1a001bd4:	10002968 	.word	0x10002968
1a001bd8:	100029ac 	.word	0x100029ac

1a001bdc <xTaskCheckForTimeOut>:
{
1a001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001bde:	b1c8      	cbz	r0, 1a001c14 <xTaskCheckForTimeOut+0x38>
1a001be0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001be2:	b301      	cbz	r1, 1a001c26 <xTaskCheckForTimeOut+0x4a>
1a001be4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001be6:	f000 fb2d 	bl	1a002244 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001bea:	4b1b      	ldr	r3, [pc, #108]	; (1a001c58 <xTaskCheckForTimeOut+0x7c>)
1a001bec:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001bee:	686b      	ldr	r3, [r5, #4]
1a001bf0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a001bf2:	6822      	ldr	r2, [r4, #0]
1a001bf4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a001bf8:	d026      	beq.n	1a001c48 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001bfa:	682f      	ldr	r7, [r5, #0]
1a001bfc:	4e17      	ldr	r6, [pc, #92]	; (1a001c5c <xTaskCheckForTimeOut+0x80>)
1a001bfe:	6836      	ldr	r6, [r6, #0]
1a001c00:	42b7      	cmp	r7, r6
1a001c02:	d001      	beq.n	1a001c08 <xTaskCheckForTimeOut+0x2c>
1a001c04:	428b      	cmp	r3, r1
1a001c06:	d924      	bls.n	1a001c52 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001c08:	4282      	cmp	r2, r0
1a001c0a:	d815      	bhi.n	1a001c38 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001c0c:	2300      	movs	r3, #0
1a001c0e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001c10:	2401      	movs	r4, #1
1a001c12:	e01a      	b.n	1a001c4a <xTaskCheckForTimeOut+0x6e>
1a001c14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c18:	f383 8811 	msr	BASEPRI, r3
1a001c1c:	f3bf 8f6f 	isb	sy
1a001c20:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001c24:	e7fe      	b.n	1a001c24 <xTaskCheckForTimeOut+0x48>
1a001c26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c2a:	f383 8811 	msr	BASEPRI, r3
1a001c2e:	f3bf 8f6f 	isb	sy
1a001c32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001c36:	e7fe      	b.n	1a001c36 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001c38:	1a5b      	subs	r3, r3, r1
1a001c3a:	4413      	add	r3, r2
1a001c3c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001c3e:	4628      	mov	r0, r5
1a001c40:	f7ff ffc0 	bl	1a001bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001c44:	2400      	movs	r4, #0
1a001c46:	e000      	b.n	1a001c4a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001c48:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001c4a:	f000 fb1d 	bl	1a002288 <vPortExitCritical>
}
1a001c4e:	4620      	mov	r0, r4
1a001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a001c52:	2401      	movs	r4, #1
1a001c54:	e7f9      	b.n	1a001c4a <xTaskCheckForTimeOut+0x6e>
1a001c56:	bf00      	nop
1a001c58:	100029ac 	.word	0x100029ac
1a001c5c:	10002968 	.word	0x10002968

1a001c60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001c60:	4b01      	ldr	r3, [pc, #4]	; (1a001c68 <vTaskMissedYield+0x8>)
1a001c62:	2201      	movs	r2, #1
1a001c64:	601a      	str	r2, [r3, #0]
}
1a001c66:	4770      	bx	lr
1a001c68:	100029b0 	.word	0x100029b0

1a001c6c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001c6c:	4b05      	ldr	r3, [pc, #20]	; (1a001c84 <xTaskGetSchedulerState+0x18>)
1a001c6e:	681b      	ldr	r3, [r3, #0]
1a001c70:	b133      	cbz	r3, 1a001c80 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c72:	4b05      	ldr	r3, [pc, #20]	; (1a001c88 <xTaskGetSchedulerState+0x1c>)
1a001c74:	681b      	ldr	r3, [r3, #0]
1a001c76:	b10b      	cbz	r3, 1a001c7c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001c78:	2000      	movs	r0, #0
	}
1a001c7a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001c7c:	2002      	movs	r0, #2
1a001c7e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001c80:	2001      	movs	r0, #1
1a001c82:	4770      	bx	lr
1a001c84:	10002980 	.word	0x10002980
1a001c88:	10002930 	.word	0x10002930

1a001c8c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001c8c:	2800      	cmp	r0, #0
1a001c8e:	d04c      	beq.n	1a001d2a <xTaskPriorityDisinherit+0x9e>
	{
1a001c90:	b538      	push	{r3, r4, r5, lr}
1a001c92:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001c94:	4a27      	ldr	r2, [pc, #156]	; (1a001d34 <xTaskPriorityDisinherit+0xa8>)
1a001c96:	6812      	ldr	r2, [r2, #0]
1a001c98:	4282      	cmp	r2, r0
1a001c9a:	d008      	beq.n	1a001cae <xTaskPriorityDisinherit+0x22>
1a001c9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ca0:	f383 8811 	msr	BASEPRI, r3
1a001ca4:	f3bf 8f6f 	isb	sy
1a001ca8:	f3bf 8f4f 	dsb	sy
1a001cac:	e7fe      	b.n	1a001cac <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001cae:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001cb0:	b942      	cbnz	r2, 1a001cc4 <xTaskPriorityDisinherit+0x38>
1a001cb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cb6:	f383 8811 	msr	BASEPRI, r3
1a001cba:	f3bf 8f6f 	isb	sy
1a001cbe:	f3bf 8f4f 	dsb	sy
1a001cc2:	e7fe      	b.n	1a001cc2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001cc4:	3a01      	subs	r2, #1
1a001cc6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001cc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001cca:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001ccc:	4288      	cmp	r0, r1
1a001cce:	d02e      	beq.n	1a001d2e <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001cd0:	b10a      	cbz	r2, 1a001cd6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001cd2:	2000      	movs	r0, #0
	}
1a001cd4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001cd6:	1d25      	adds	r5, r4, #4
1a001cd8:	4628      	mov	r0, r5
1a001cda:	f7ff fa65 	bl	1a0011a8 <uxListRemove>
1a001cde:	b970      	cbnz	r0, 1a001cfe <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ce2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001ce6:	008b      	lsls	r3, r1, #2
1a001ce8:	4913      	ldr	r1, [pc, #76]	; (1a001d38 <xTaskPriorityDisinherit+0xac>)
1a001cea:	58cb      	ldr	r3, [r1, r3]
1a001cec:	b93b      	cbnz	r3, 1a001cfe <xTaskPriorityDisinherit+0x72>
1a001cee:	2301      	movs	r3, #1
1a001cf0:	fa03 f202 	lsl.w	r2, r3, r2
1a001cf4:	4911      	ldr	r1, [pc, #68]	; (1a001d3c <xTaskPriorityDisinherit+0xb0>)
1a001cf6:	680b      	ldr	r3, [r1, #0]
1a001cf8:	ea23 0302 	bic.w	r3, r3, r2
1a001cfc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001cfe:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001d00:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d02:	f1c3 0207 	rsb	r2, r3, #7
1a001d06:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001d08:	2401      	movs	r4, #1
1a001d0a:	fa04 f203 	lsl.w	r2, r4, r3
1a001d0e:	490b      	ldr	r1, [pc, #44]	; (1a001d3c <xTaskPriorityDisinherit+0xb0>)
1a001d10:	6808      	ldr	r0, [r1, #0]
1a001d12:	4302      	orrs	r2, r0
1a001d14:	600a      	str	r2, [r1, #0]
1a001d16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d1a:	009a      	lsls	r2, r3, #2
1a001d1c:	4629      	mov	r1, r5
1a001d1e:	4806      	ldr	r0, [pc, #24]	; (1a001d38 <xTaskPriorityDisinherit+0xac>)
1a001d20:	4410      	add	r0, r2
1a001d22:	f7ff fa1c 	bl	1a00115e <vListInsertEnd>
					xReturn = pdTRUE;
1a001d26:	4620      	mov	r0, r4
1a001d28:	e7d4      	b.n	1a001cd4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001d2a:	2000      	movs	r0, #0
	}
1a001d2c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001d2e:	2000      	movs	r0, #0
1a001d30:	e7d0      	b.n	1a001cd4 <xTaskPriorityDisinherit+0x48>
1a001d32:	bf00      	nop
1a001d34:	1000288c 	.word	0x1000288c
1a001d38:	10002898 	.word	0x10002898
1a001d3c:	10002938 	.word	0x10002938

1a001d40 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001d40:	4b06      	ldr	r3, [pc, #24]	; (1a001d5c <prvGetNextExpireTime+0x1c>)
1a001d42:	681a      	ldr	r2, [r3, #0]
1a001d44:	6813      	ldr	r3, [r2, #0]
1a001d46:	fab3 f383 	clz	r3, r3
1a001d4a:	095b      	lsrs	r3, r3, #5
1a001d4c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001d4e:	b913      	cbnz	r3, 1a001d56 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d50:	68d3      	ldr	r3, [r2, #12]
1a001d52:	6818      	ldr	r0, [r3, #0]
1a001d54:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001d56:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001d58:	4770      	bx	lr
1a001d5a:	bf00      	nop
1a001d5c:	100029b4 	.word	0x100029b4

1a001d60 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001d60:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001d62:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001d64:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001d66:	4291      	cmp	r1, r2
1a001d68:	d80c      	bhi.n	1a001d84 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d6a:	1ad2      	subs	r2, r2, r3
1a001d6c:	6983      	ldr	r3, [r0, #24]
1a001d6e:	429a      	cmp	r2, r3
1a001d70:	d301      	bcc.n	1a001d76 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001d72:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001d74:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001d76:	1d01      	adds	r1, r0, #4
1a001d78:	4b09      	ldr	r3, [pc, #36]	; (1a001da0 <prvInsertTimerInActiveList+0x40>)
1a001d7a:	6818      	ldr	r0, [r3, #0]
1a001d7c:	f7ff f9fa 	bl	1a001174 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d80:	2000      	movs	r0, #0
1a001d82:	e7f7      	b.n	1a001d74 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001d84:	429a      	cmp	r2, r3
1a001d86:	d201      	bcs.n	1a001d8c <prvInsertTimerInActiveList+0x2c>
1a001d88:	4299      	cmp	r1, r3
1a001d8a:	d206      	bcs.n	1a001d9a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001d8c:	1d01      	adds	r1, r0, #4
1a001d8e:	4b05      	ldr	r3, [pc, #20]	; (1a001da4 <prvInsertTimerInActiveList+0x44>)
1a001d90:	6818      	ldr	r0, [r3, #0]
1a001d92:	f7ff f9ef 	bl	1a001174 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d96:	2000      	movs	r0, #0
1a001d98:	e7ec      	b.n	1a001d74 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a001d9a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001d9c:	e7ea      	b.n	1a001d74 <prvInsertTimerInActiveList+0x14>
1a001d9e:	bf00      	nop
1a001da0:	100029b8 	.word	0x100029b8
1a001da4:	100029b4 	.word	0x100029b4

1a001da8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001da8:	b530      	push	{r4, r5, lr}
1a001daa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001dac:	f000 fa4a 	bl	1a002244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001db0:	4b11      	ldr	r3, [pc, #68]	; (1a001df8 <prvCheckForValidListAndQueue+0x50>)
1a001db2:	681b      	ldr	r3, [r3, #0]
1a001db4:	b11b      	cbz	r3, 1a001dbe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001db6:	f000 fa67 	bl	1a002288 <vPortExitCritical>
}
1a001dba:	b003      	add	sp, #12
1a001dbc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001dbe:	4d0f      	ldr	r5, [pc, #60]	; (1a001dfc <prvCheckForValidListAndQueue+0x54>)
1a001dc0:	4628      	mov	r0, r5
1a001dc2:	f7ff f9be 	bl	1a001142 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001dc6:	4c0e      	ldr	r4, [pc, #56]	; (1a001e00 <prvCheckForValidListAndQueue+0x58>)
1a001dc8:	4620      	mov	r0, r4
1a001dca:	f7ff f9ba 	bl	1a001142 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001dce:	4b0d      	ldr	r3, [pc, #52]	; (1a001e04 <prvCheckForValidListAndQueue+0x5c>)
1a001dd0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001dd2:	4b0d      	ldr	r3, [pc, #52]	; (1a001e08 <prvCheckForValidListAndQueue+0x60>)
1a001dd4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001dd6:	2300      	movs	r3, #0
1a001dd8:	9300      	str	r3, [sp, #0]
1a001dda:	4b0c      	ldr	r3, [pc, #48]	; (1a001e0c <prvCheckForValidListAndQueue+0x64>)
1a001ddc:	4a0c      	ldr	r2, [pc, #48]	; (1a001e10 <prvCheckForValidListAndQueue+0x68>)
1a001dde:	2110      	movs	r1, #16
1a001de0:	200a      	movs	r0, #10
1a001de2:	f7fe ff2a 	bl	1a000c3a <xQueueGenericCreateStatic>
1a001de6:	4b04      	ldr	r3, [pc, #16]	; (1a001df8 <prvCheckForValidListAndQueue+0x50>)
1a001de8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001dea:	2800      	cmp	r0, #0
1a001dec:	d0e3      	beq.n	1a001db6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001dee:	4909      	ldr	r1, [pc, #36]	; (1a001e14 <prvCheckForValidListAndQueue+0x6c>)
1a001df0:	f7ff f96a 	bl	1a0010c8 <vQueueAddToRegistry>
1a001df4:	e7df      	b.n	1a001db6 <prvCheckForValidListAndQueue+0xe>
1a001df6:	bf00      	nop
1a001df8:	10002ad8 	.word	0x10002ad8
1a001dfc:	10002a5c 	.word	0x10002a5c
1a001e00:	10002a70 	.word	0x10002a70
1a001e04:	100029b4 	.word	0x100029b4
1a001e08:	100029b8 	.word	0x100029b8
1a001e0c:	10002a88 	.word	0x10002a88
1a001e10:	100029bc 	.word	0x100029bc
1a001e14:	1a004d8c 	.word	0x1a004d8c

1a001e18 <xTimerCreateTimerTask>:
{
1a001e18:	b510      	push	{r4, lr}
1a001e1a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001e1c:	f7ff ffc4 	bl	1a001da8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001e20:	4b12      	ldr	r3, [pc, #72]	; (1a001e6c <xTimerCreateTimerTask+0x54>)
1a001e22:	681b      	ldr	r3, [r3, #0]
1a001e24:	b1cb      	cbz	r3, 1a001e5a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001e26:	2400      	movs	r4, #0
1a001e28:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001e2a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001e2c:	aa07      	add	r2, sp, #28
1a001e2e:	a906      	add	r1, sp, #24
1a001e30:	a805      	add	r0, sp, #20
1a001e32:	f7ff f9d9 	bl	1a0011e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001e36:	9b05      	ldr	r3, [sp, #20]
1a001e38:	9302      	str	r3, [sp, #8]
1a001e3a:	9b06      	ldr	r3, [sp, #24]
1a001e3c:	9301      	str	r3, [sp, #4]
1a001e3e:	2304      	movs	r3, #4
1a001e40:	9300      	str	r3, [sp, #0]
1a001e42:	4623      	mov	r3, r4
1a001e44:	9a07      	ldr	r2, [sp, #28]
1a001e46:	490a      	ldr	r1, [pc, #40]	; (1a001e70 <xTimerCreateTimerTask+0x58>)
1a001e48:	480a      	ldr	r0, [pc, #40]	; (1a001e74 <xTimerCreateTimerTask+0x5c>)
1a001e4a:	f7ff fb95 	bl	1a001578 <xTaskCreateStatic>
1a001e4e:	4b0a      	ldr	r3, [pc, #40]	; (1a001e78 <xTimerCreateTimerTask+0x60>)
1a001e50:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001e52:	b110      	cbz	r0, 1a001e5a <xTimerCreateTimerTask+0x42>
}
1a001e54:	2001      	movs	r0, #1
1a001e56:	b008      	add	sp, #32
1a001e58:	bd10      	pop	{r4, pc}
1a001e5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e5e:	f383 8811 	msr	BASEPRI, r3
1a001e62:	f3bf 8f6f 	isb	sy
1a001e66:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a001e6a:	e7fe      	b.n	1a001e6a <xTimerCreateTimerTask+0x52>
1a001e6c:	10002ad8 	.word	0x10002ad8
1a001e70:	1a004d94 	.word	0x1a004d94
1a001e74:	1a00215d 	.word	0x1a00215d
1a001e78:	10002adc 	.word	0x10002adc

1a001e7c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001e7c:	b1c0      	cbz	r0, 1a001eb0 <xTimerGenericCommand+0x34>
{
1a001e7e:	b530      	push	{r4, r5, lr}
1a001e80:	b085      	sub	sp, #20
1a001e82:	4615      	mov	r5, r2
1a001e84:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001e86:	4a17      	ldr	r2, [pc, #92]	; (1a001ee4 <xTimerGenericCommand+0x68>)
1a001e88:	6810      	ldr	r0, [r2, #0]
1a001e8a:	b340      	cbz	r0, 1a001ede <xTimerGenericCommand+0x62>
1a001e8c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001e8e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001e90:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001e92:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001e94:	2905      	cmp	r1, #5
1a001e96:	dc1c      	bgt.n	1a001ed2 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001e98:	f7ff fee8 	bl	1a001c6c <xTaskGetSchedulerState>
1a001e9c:	2802      	cmp	r0, #2
1a001e9e:	d010      	beq.n	1a001ec2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001ea0:	2300      	movs	r3, #0
1a001ea2:	461a      	mov	r2, r3
1a001ea4:	4669      	mov	r1, sp
1a001ea6:	480f      	ldr	r0, [pc, #60]	; (1a001ee4 <xTimerGenericCommand+0x68>)
1a001ea8:	6800      	ldr	r0, [r0, #0]
1a001eaa:	f7fe ff37 	bl	1a000d1c <xQueueGenericSend>
1a001eae:	e014      	b.n	1a001eda <xTimerGenericCommand+0x5e>
1a001eb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eb4:	f383 8811 	msr	BASEPRI, r3
1a001eb8:	f3bf 8f6f 	isb	sy
1a001ebc:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a001ec0:	e7fe      	b.n	1a001ec0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001ec2:	2300      	movs	r3, #0
1a001ec4:	9a08      	ldr	r2, [sp, #32]
1a001ec6:	4669      	mov	r1, sp
1a001ec8:	4806      	ldr	r0, [pc, #24]	; (1a001ee4 <xTimerGenericCommand+0x68>)
1a001eca:	6800      	ldr	r0, [r0, #0]
1a001ecc:	f7fe ff26 	bl	1a000d1c <xQueueGenericSend>
1a001ed0:	e003      	b.n	1a001eda <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001ed2:	2300      	movs	r3, #0
1a001ed4:	4669      	mov	r1, sp
1a001ed6:	f7fe ffe1 	bl	1a000e9c <xQueueGenericSendFromISR>
}
1a001eda:	b005      	add	sp, #20
1a001edc:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001ede:	2000      	movs	r0, #0
	return xReturn;
1a001ee0:	e7fb      	b.n	1a001eda <xTimerGenericCommand+0x5e>
1a001ee2:	bf00      	nop
1a001ee4:	10002ad8 	.word	0x10002ad8

1a001ee8 <prvSwitchTimerLists>:
{
1a001ee8:	b570      	push	{r4, r5, r6, lr}
1a001eea:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001eec:	4b1a      	ldr	r3, [pc, #104]	; (1a001f58 <prvSwitchTimerLists+0x70>)
1a001eee:	681b      	ldr	r3, [r3, #0]
1a001ef0:	681a      	ldr	r2, [r3, #0]
1a001ef2:	b352      	cbz	r2, 1a001f4a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ef4:	68db      	ldr	r3, [r3, #12]
1a001ef6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ef8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001efa:	1d25      	adds	r5, r4, #4
1a001efc:	4628      	mov	r0, r5
1a001efe:	f7ff f953 	bl	1a0011a8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f04:	4620      	mov	r0, r4
1a001f06:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f08:	69e3      	ldr	r3, [r4, #28]
1a001f0a:	2b01      	cmp	r3, #1
1a001f0c:	d1ee      	bne.n	1a001eec <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001f0e:	69a3      	ldr	r3, [r4, #24]
1a001f10:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001f12:	429e      	cmp	r6, r3
1a001f14:	d207      	bcs.n	1a001f26 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001f16:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001f18:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001f1a:	4629      	mov	r1, r5
1a001f1c:	4b0e      	ldr	r3, [pc, #56]	; (1a001f58 <prvSwitchTimerLists+0x70>)
1a001f1e:	6818      	ldr	r0, [r3, #0]
1a001f20:	f7ff f928 	bl	1a001174 <vListInsert>
1a001f24:	e7e2      	b.n	1a001eec <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001f26:	2100      	movs	r1, #0
1a001f28:	9100      	str	r1, [sp, #0]
1a001f2a:	460b      	mov	r3, r1
1a001f2c:	4632      	mov	r2, r6
1a001f2e:	4620      	mov	r0, r4
1a001f30:	f7ff ffa4 	bl	1a001e7c <xTimerGenericCommand>
				configASSERT( xResult );
1a001f34:	2800      	cmp	r0, #0
1a001f36:	d1d9      	bne.n	1a001eec <prvSwitchTimerLists+0x4>
1a001f38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f3c:	f383 8811 	msr	BASEPRI, r3
1a001f40:	f3bf 8f6f 	isb	sy
1a001f44:	f3bf 8f4f 	dsb	sy
1a001f48:	e7fe      	b.n	1a001f48 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001f4a:	4a04      	ldr	r2, [pc, #16]	; (1a001f5c <prvSwitchTimerLists+0x74>)
1a001f4c:	6810      	ldr	r0, [r2, #0]
1a001f4e:	4902      	ldr	r1, [pc, #8]	; (1a001f58 <prvSwitchTimerLists+0x70>)
1a001f50:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001f52:	6013      	str	r3, [r2, #0]
}
1a001f54:	b002      	add	sp, #8
1a001f56:	bd70      	pop	{r4, r5, r6, pc}
1a001f58:	100029b4 	.word	0x100029b4
1a001f5c:	100029b8 	.word	0x100029b8

1a001f60 <prvSampleTimeNow>:
{
1a001f60:	b538      	push	{r3, r4, r5, lr}
1a001f62:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001f64:	f7ff fbc6 	bl	1a0016f4 <xTaskGetTickCount>
1a001f68:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001f6a:	4b07      	ldr	r3, [pc, #28]	; (1a001f88 <prvSampleTimeNow+0x28>)
1a001f6c:	681b      	ldr	r3, [r3, #0]
1a001f6e:	4283      	cmp	r3, r0
1a001f70:	d805      	bhi.n	1a001f7e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001f72:	2300      	movs	r3, #0
1a001f74:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001f76:	4b04      	ldr	r3, [pc, #16]	; (1a001f88 <prvSampleTimeNow+0x28>)
1a001f78:	601c      	str	r4, [r3, #0]
}
1a001f7a:	4620      	mov	r0, r4
1a001f7c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001f7e:	f7ff ffb3 	bl	1a001ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001f82:	2301      	movs	r3, #1
1a001f84:	602b      	str	r3, [r5, #0]
1a001f86:	e7f6      	b.n	1a001f76 <prvSampleTimeNow+0x16>
1a001f88:	10002a84 	.word	0x10002a84

1a001f8c <prvProcessExpiredTimer>:
{
1a001f8c:	b570      	push	{r4, r5, r6, lr}
1a001f8e:	b082      	sub	sp, #8
1a001f90:	4605      	mov	r5, r0
1a001f92:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f94:	4b14      	ldr	r3, [pc, #80]	; (1a001fe8 <prvProcessExpiredTimer+0x5c>)
1a001f96:	681b      	ldr	r3, [r3, #0]
1a001f98:	68db      	ldr	r3, [r3, #12]
1a001f9a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f9c:	1d20      	adds	r0, r4, #4
1a001f9e:	f7ff f903 	bl	1a0011a8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001fa2:	69e3      	ldr	r3, [r4, #28]
1a001fa4:	2b01      	cmp	r3, #1
1a001fa6:	d004      	beq.n	1a001fb2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001faa:	4620      	mov	r0, r4
1a001fac:	4798      	blx	r3
}
1a001fae:	b002      	add	sp, #8
1a001fb0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001fb2:	69a1      	ldr	r1, [r4, #24]
1a001fb4:	462b      	mov	r3, r5
1a001fb6:	4632      	mov	r2, r6
1a001fb8:	4429      	add	r1, r5
1a001fba:	4620      	mov	r0, r4
1a001fbc:	f7ff fed0 	bl	1a001d60 <prvInsertTimerInActiveList>
1a001fc0:	2800      	cmp	r0, #0
1a001fc2:	d0f1      	beq.n	1a001fa8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001fc4:	2100      	movs	r1, #0
1a001fc6:	9100      	str	r1, [sp, #0]
1a001fc8:	460b      	mov	r3, r1
1a001fca:	462a      	mov	r2, r5
1a001fcc:	4620      	mov	r0, r4
1a001fce:	f7ff ff55 	bl	1a001e7c <xTimerGenericCommand>
			configASSERT( xResult );
1a001fd2:	2800      	cmp	r0, #0
1a001fd4:	d1e8      	bne.n	1a001fa8 <prvProcessExpiredTimer+0x1c>
1a001fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fda:	f383 8811 	msr	BASEPRI, r3
1a001fde:	f3bf 8f6f 	isb	sy
1a001fe2:	f3bf 8f4f 	dsb	sy
1a001fe6:	e7fe      	b.n	1a001fe6 <prvProcessExpiredTimer+0x5a>
1a001fe8:	100029b4 	.word	0x100029b4

1a001fec <prvProcessTimerOrBlockTask>:
{
1a001fec:	b570      	push	{r4, r5, r6, lr}
1a001fee:	b082      	sub	sp, #8
1a001ff0:	4606      	mov	r6, r0
1a001ff2:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001ff4:	f7ff fb76 	bl	1a0016e4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001ff8:	a801      	add	r0, sp, #4
1a001ffa:	f7ff ffb1 	bl	1a001f60 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001ffe:	9b01      	ldr	r3, [sp, #4]
1a002000:	bb1b      	cbnz	r3, 1a00204a <prvProcessTimerOrBlockTask+0x5e>
1a002002:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002004:	b90c      	cbnz	r4, 1a00200a <prvProcessTimerOrBlockTask+0x1e>
1a002006:	42b0      	cmp	r0, r6
1a002008:	d218      	bcs.n	1a00203c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00200a:	b12c      	cbz	r4, 1a002018 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00200c:	4b11      	ldr	r3, [pc, #68]	; (1a002054 <prvProcessTimerOrBlockTask+0x68>)
1a00200e:	681b      	ldr	r3, [r3, #0]
1a002010:	681c      	ldr	r4, [r3, #0]
1a002012:	fab4 f484 	clz	r4, r4
1a002016:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002018:	4622      	mov	r2, r4
1a00201a:	1b71      	subs	r1, r6, r5
1a00201c:	4b0e      	ldr	r3, [pc, #56]	; (1a002058 <prvProcessTimerOrBlockTask+0x6c>)
1a00201e:	6818      	ldr	r0, [r3, #0]
1a002020:	f7ff f866 	bl	1a0010f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002024:	f7ff fbf8 	bl	1a001818 <xTaskResumeAll>
1a002028:	b988      	cbnz	r0, 1a00204e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00202a:	4b0c      	ldr	r3, [pc, #48]	; (1a00205c <prvProcessTimerOrBlockTask+0x70>)
1a00202c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002030:	601a      	str	r2, [r3, #0]
1a002032:	f3bf 8f4f 	dsb	sy
1a002036:	f3bf 8f6f 	isb	sy
1a00203a:	e008      	b.n	1a00204e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a00203c:	f7ff fbec 	bl	1a001818 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002040:	4629      	mov	r1, r5
1a002042:	4630      	mov	r0, r6
1a002044:	f7ff ffa2 	bl	1a001f8c <prvProcessExpiredTimer>
1a002048:	e001      	b.n	1a00204e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00204a:	f7ff fbe5 	bl	1a001818 <xTaskResumeAll>
}
1a00204e:	b002      	add	sp, #8
1a002050:	bd70      	pop	{r4, r5, r6, pc}
1a002052:	bf00      	nop
1a002054:	100029b8 	.word	0x100029b8
1a002058:	10002ad8 	.word	0x10002ad8
1a00205c:	e000ed04 	.word	0xe000ed04

1a002060 <prvProcessReceivedCommands>:
{
1a002060:	b530      	push	{r4, r5, lr}
1a002062:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002064:	e006      	b.n	1a002074 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002066:	9907      	ldr	r1, [sp, #28]
1a002068:	9806      	ldr	r0, [sp, #24]
1a00206a:	9b05      	ldr	r3, [sp, #20]
1a00206c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00206e:	9b04      	ldr	r3, [sp, #16]
1a002070:	2b00      	cmp	r3, #0
1a002072:	da0b      	bge.n	1a00208c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002074:	2200      	movs	r2, #0
1a002076:	a904      	add	r1, sp, #16
1a002078:	4b37      	ldr	r3, [pc, #220]	; (1a002158 <prvProcessReceivedCommands+0xf8>)
1a00207a:	6818      	ldr	r0, [r3, #0]
1a00207c:	f7fe ff76 	bl	1a000f6c <xQueueReceive>
1a002080:	2800      	cmp	r0, #0
1a002082:	d066      	beq.n	1a002152 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002084:	9b04      	ldr	r3, [sp, #16]
1a002086:	2b00      	cmp	r3, #0
1a002088:	daf1      	bge.n	1a00206e <prvProcessReceivedCommands+0xe>
1a00208a:	e7ec      	b.n	1a002066 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00208c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00208e:	6963      	ldr	r3, [r4, #20]
1a002090:	b113      	cbz	r3, 1a002098 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002092:	1d20      	adds	r0, r4, #4
1a002094:	f7ff f888 	bl	1a0011a8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002098:	a803      	add	r0, sp, #12
1a00209a:	f7ff ff61 	bl	1a001f60 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00209e:	9b04      	ldr	r3, [sp, #16]
1a0020a0:	2b09      	cmp	r3, #9
1a0020a2:	d8e7      	bhi.n	1a002074 <prvProcessReceivedCommands+0x14>
1a0020a4:	a201      	add	r2, pc, #4	; (adr r2, 1a0020ac <prvProcessReceivedCommands+0x4c>)
1a0020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0020aa:	bf00      	nop
1a0020ac:	1a0020d5 	.word	0x1a0020d5
1a0020b0:	1a0020d5 	.word	0x1a0020d5
1a0020b4:	1a0020d5 	.word	0x1a0020d5
1a0020b8:	1a002075 	.word	0x1a002075
1a0020bc:	1a00211d 	.word	0x1a00211d
1a0020c0:	1a002143 	.word	0x1a002143
1a0020c4:	1a0020d5 	.word	0x1a0020d5
1a0020c8:	1a0020d5 	.word	0x1a0020d5
1a0020cc:	1a002075 	.word	0x1a002075
1a0020d0:	1a00211d 	.word	0x1a00211d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0020d4:	9905      	ldr	r1, [sp, #20]
1a0020d6:	69a5      	ldr	r5, [r4, #24]
1a0020d8:	460b      	mov	r3, r1
1a0020da:	4602      	mov	r2, r0
1a0020dc:	4429      	add	r1, r5
1a0020de:	4620      	mov	r0, r4
1a0020e0:	f7ff fe3e 	bl	1a001d60 <prvInsertTimerInActiveList>
1a0020e4:	2800      	cmp	r0, #0
1a0020e6:	d0c5      	beq.n	1a002074 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0020e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0020ea:	4620      	mov	r0, r4
1a0020ec:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020ee:	69e3      	ldr	r3, [r4, #28]
1a0020f0:	2b01      	cmp	r3, #1
1a0020f2:	d1bf      	bne.n	1a002074 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0020f4:	69a2      	ldr	r2, [r4, #24]
1a0020f6:	2100      	movs	r1, #0
1a0020f8:	9100      	str	r1, [sp, #0]
1a0020fa:	460b      	mov	r3, r1
1a0020fc:	9805      	ldr	r0, [sp, #20]
1a0020fe:	4402      	add	r2, r0
1a002100:	4620      	mov	r0, r4
1a002102:	f7ff febb 	bl	1a001e7c <xTimerGenericCommand>
							configASSERT( xResult );
1a002106:	2800      	cmp	r0, #0
1a002108:	d1b4      	bne.n	1a002074 <prvProcessReceivedCommands+0x14>
1a00210a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00210e:	f383 8811 	msr	BASEPRI, r3
1a002112:	f3bf 8f6f 	isb	sy
1a002116:	f3bf 8f4f 	dsb	sy
1a00211a:	e7fe      	b.n	1a00211a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00211c:	9905      	ldr	r1, [sp, #20]
1a00211e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002120:	b131      	cbz	r1, 1a002130 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002122:	4603      	mov	r3, r0
1a002124:	4602      	mov	r2, r0
1a002126:	4401      	add	r1, r0
1a002128:	4620      	mov	r0, r4
1a00212a:	f7ff fe19 	bl	1a001d60 <prvInsertTimerInActiveList>
					break;
1a00212e:	e7a1      	b.n	1a002074 <prvProcessReceivedCommands+0x14>
1a002130:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002134:	f383 8811 	msr	BASEPRI, r3
1a002138:	f3bf 8f6f 	isb	sy
1a00213c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002140:	e7fe      	b.n	1a002140 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002142:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002146:	2b00      	cmp	r3, #0
1a002148:	d194      	bne.n	1a002074 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a00214a:	4620      	mov	r0, r4
1a00214c:	f7fe fc4a 	bl	1a0009e4 <vPortFree>
1a002150:	e790      	b.n	1a002074 <prvProcessReceivedCommands+0x14>
}
1a002152:	b009      	add	sp, #36	; 0x24
1a002154:	bd30      	pop	{r4, r5, pc}
1a002156:	bf00      	nop
1a002158:	10002ad8 	.word	0x10002ad8

1a00215c <prvTimerTask>:
{
1a00215c:	b500      	push	{lr}
1a00215e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002160:	a801      	add	r0, sp, #4
1a002162:	f7ff fded 	bl	1a001d40 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002166:	9901      	ldr	r1, [sp, #4]
1a002168:	f7ff ff40 	bl	1a001fec <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a00216c:	f7ff ff78 	bl	1a002060 <prvProcessReceivedCommands>
1a002170:	e7f6      	b.n	1a002160 <prvTimerTask+0x4>
1a002172:	Address 0x000000001a002172 is out of bounds.


1a002174 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002174:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002176:	2300      	movs	r3, #0
1a002178:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00217a:	4b0d      	ldr	r3, [pc, #52]	; (1a0021b0 <prvTaskExitError+0x3c>)
1a00217c:	681b      	ldr	r3, [r3, #0]
1a00217e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002182:	d008      	beq.n	1a002196 <prvTaskExitError+0x22>
1a002184:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002188:	f383 8811 	msr	BASEPRI, r3
1a00218c:	f3bf 8f6f 	isb	sy
1a002190:	f3bf 8f4f 	dsb	sy
1a002194:	e7fe      	b.n	1a002194 <prvTaskExitError+0x20>
1a002196:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00219a:	f383 8811 	msr	BASEPRI, r3
1a00219e:	f3bf 8f6f 	isb	sy
1a0021a2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0021a6:	9b01      	ldr	r3, [sp, #4]
1a0021a8:	2b00      	cmp	r3, #0
1a0021aa:	d0fc      	beq.n	1a0021a6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0021ac:	b002      	add	sp, #8
1a0021ae:	4770      	bx	lr
1a0021b0:	10000000 	.word	0x10000000

1a0021b4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0021b4:	4808      	ldr	r0, [pc, #32]	; (1a0021d8 <prvPortStartFirstTask+0x24>)
1a0021b6:	6800      	ldr	r0, [r0, #0]
1a0021b8:	6800      	ldr	r0, [r0, #0]
1a0021ba:	f380 8808 	msr	MSP, r0
1a0021be:	f04f 0000 	mov.w	r0, #0
1a0021c2:	f380 8814 	msr	CONTROL, r0
1a0021c6:	b662      	cpsie	i
1a0021c8:	b661      	cpsie	f
1a0021ca:	f3bf 8f4f 	dsb	sy
1a0021ce:	f3bf 8f6f 	isb	sy
1a0021d2:	df00      	svc	0
1a0021d4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a0021d6:	0000      	.short	0x0000
1a0021d8:	e000ed08 	.word	0xe000ed08

1a0021dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0021dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0021ec <vPortEnableVFP+0x10>
1a0021e0:	6801      	ldr	r1, [r0, #0]
1a0021e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0021e6:	6001      	str	r1, [r0, #0]
1a0021e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a0021ea:	0000      	.short	0x0000
1a0021ec:	e000ed88 	.word	0xe000ed88

1a0021f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0021f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0021f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0021f8:	f021 0101 	bic.w	r1, r1, #1
1a0021fc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002200:	4b05      	ldr	r3, [pc, #20]	; (1a002218 <pxPortInitialiseStack+0x28>)
1a002202:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002206:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00220a:	f06f 0302 	mvn.w	r3, #2
1a00220e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002212:	3844      	subs	r0, #68	; 0x44
1a002214:	4770      	bx	lr
1a002216:	bf00      	nop
1a002218:	1a002175 	.word	0x1a002175
1a00221c:	ffffffff 	.word	0xffffffff

1a002220 <SVC_Handler>:
	__asm volatile (
1a002220:	4b07      	ldr	r3, [pc, #28]	; (1a002240 <pxCurrentTCBConst2>)
1a002222:	6819      	ldr	r1, [r3, #0]
1a002224:	6808      	ldr	r0, [r1, #0]
1a002226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00222a:	f380 8809 	msr	PSP, r0
1a00222e:	f3bf 8f6f 	isb	sy
1a002232:	f04f 0000 	mov.w	r0, #0
1a002236:	f380 8811 	msr	BASEPRI, r0
1a00223a:	4770      	bx	lr
1a00223c:	f3af 8000 	nop.w

1a002240 <pxCurrentTCBConst2>:
1a002240:	1000288c 	.word	0x1000288c

1a002244 <vPortEnterCritical>:
1a002244:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002248:	f383 8811 	msr	BASEPRI, r3
1a00224c:	f3bf 8f6f 	isb	sy
1a002250:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002254:	4a0a      	ldr	r2, [pc, #40]	; (1a002280 <vPortEnterCritical+0x3c>)
1a002256:	6813      	ldr	r3, [r2, #0]
1a002258:	3301      	adds	r3, #1
1a00225a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00225c:	2b01      	cmp	r3, #1
1a00225e:	d000      	beq.n	1a002262 <vPortEnterCritical+0x1e>
}
1a002260:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002262:	4b08      	ldr	r3, [pc, #32]	; (1a002284 <vPortEnterCritical+0x40>)
1a002264:	681b      	ldr	r3, [r3, #0]
1a002266:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00226a:	d0f9      	beq.n	1a002260 <vPortEnterCritical+0x1c>
1a00226c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002270:	f383 8811 	msr	BASEPRI, r3
1a002274:	f3bf 8f6f 	isb	sy
1a002278:	f3bf 8f4f 	dsb	sy
1a00227c:	e7fe      	b.n	1a00227c <vPortEnterCritical+0x38>
1a00227e:	bf00      	nop
1a002280:	10000000 	.word	0x10000000
1a002284:	e000ed04 	.word	0xe000ed04

1a002288 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002288:	4b09      	ldr	r3, [pc, #36]	; (1a0022b0 <vPortExitCritical+0x28>)
1a00228a:	681b      	ldr	r3, [r3, #0]
1a00228c:	b943      	cbnz	r3, 1a0022a0 <vPortExitCritical+0x18>
1a00228e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002292:	f383 8811 	msr	BASEPRI, r3
1a002296:	f3bf 8f6f 	isb	sy
1a00229a:	f3bf 8f4f 	dsb	sy
1a00229e:	e7fe      	b.n	1a00229e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0022a0:	3b01      	subs	r3, #1
1a0022a2:	4a03      	ldr	r2, [pc, #12]	; (1a0022b0 <vPortExitCritical+0x28>)
1a0022a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0022a6:	b90b      	cbnz	r3, 1a0022ac <vPortExitCritical+0x24>
	__asm volatile
1a0022a8:	f383 8811 	msr	BASEPRI, r3
}
1a0022ac:	4770      	bx	lr
1a0022ae:	bf00      	nop
1a0022b0:	10000000 	.word	0x10000000
1a0022b4:	ffffffff 	.word	0xffffffff
1a0022b8:	ffffffff 	.word	0xffffffff
1a0022bc:	ffffffff 	.word	0xffffffff

1a0022c0 <PendSV_Handler>:
	__asm volatile
1a0022c0:	f3ef 8009 	mrs	r0, PSP
1a0022c4:	f3bf 8f6f 	isb	sy
1a0022c8:	4b15      	ldr	r3, [pc, #84]	; (1a002320 <pxCurrentTCBConst>)
1a0022ca:	681a      	ldr	r2, [r3, #0]
1a0022cc:	f01e 0f10 	tst.w	lr, #16
1a0022d0:	bf08      	it	eq
1a0022d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0022d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0022da:	6010      	str	r0, [r2, #0]
1a0022dc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0022e0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0022e4:	f380 8811 	msr	BASEPRI, r0
1a0022e8:	f3bf 8f4f 	dsb	sy
1a0022ec:	f3bf 8f6f 	isb	sy
1a0022f0:	f7ff fb88 	bl	1a001a04 <vTaskSwitchContext>
1a0022f4:	f04f 0000 	mov.w	r0, #0
1a0022f8:	f380 8811 	msr	BASEPRI, r0
1a0022fc:	bc09      	pop	{r0, r3}
1a0022fe:	6819      	ldr	r1, [r3, #0]
1a002300:	6808      	ldr	r0, [r1, #0]
1a002302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002306:	f01e 0f10 	tst.w	lr, #16
1a00230a:	bf08      	it	eq
1a00230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002310:	f380 8809 	msr	PSP, r0
1a002314:	f3bf 8f6f 	isb	sy
1a002318:	4770      	bx	lr
1a00231a:	bf00      	nop
1a00231c:	f3af 8000 	nop.w

1a002320 <pxCurrentTCBConst>:
1a002320:	1000288c 	.word	0x1000288c

1a002324 <SysTick_Handler>:
{
1a002324:	b508      	push	{r3, lr}
	__asm volatile
1a002326:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00232a:	f383 8811 	msr	BASEPRI, r3
1a00232e:	f3bf 8f6f 	isb	sy
1a002332:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002336:	f7ff f9e3 	bl	1a001700 <xTaskIncrementTick>
1a00233a:	b118      	cbz	r0, 1a002344 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00233c:	4b03      	ldr	r3, [pc, #12]	; (1a00234c <SysTick_Handler+0x28>)
1a00233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002342:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002344:	2300      	movs	r3, #0
1a002346:	f383 8811 	msr	BASEPRI, r3
}
1a00234a:	bd08      	pop	{r3, pc}
1a00234c:	e000ed04 	.word	0xe000ed04

1a002350 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002350:	4a08      	ldr	r2, [pc, #32]	; (1a002374 <vPortSetupTimerInterrupt+0x24>)
1a002352:	2300      	movs	r3, #0
1a002354:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002356:	4908      	ldr	r1, [pc, #32]	; (1a002378 <vPortSetupTimerInterrupt+0x28>)
1a002358:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00235a:	4b08      	ldr	r3, [pc, #32]	; (1a00237c <vPortSetupTimerInterrupt+0x2c>)
1a00235c:	681b      	ldr	r3, [r3, #0]
1a00235e:	4908      	ldr	r1, [pc, #32]	; (1a002380 <vPortSetupTimerInterrupt+0x30>)
1a002360:	fba1 1303 	umull	r1, r3, r1, r3
1a002364:	099b      	lsrs	r3, r3, #6
1a002366:	3b01      	subs	r3, #1
1a002368:	4906      	ldr	r1, [pc, #24]	; (1a002384 <vPortSetupTimerInterrupt+0x34>)
1a00236a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00236c:	2307      	movs	r3, #7
1a00236e:	6013      	str	r3, [r2, #0]
}
1a002370:	4770      	bx	lr
1a002372:	bf00      	nop
1a002374:	e000e010 	.word	0xe000e010
1a002378:	e000e018 	.word	0xe000e018
1a00237c:	10002c10 	.word	0x10002c10
1a002380:	10624dd3 	.word	0x10624dd3
1a002384:	e000e014 	.word	0xe000e014

1a002388 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002388:	4b3a      	ldr	r3, [pc, #232]	; (1a002474 <xPortStartScheduler+0xec>)
1a00238a:	681a      	ldr	r2, [r3, #0]
1a00238c:	4b3a      	ldr	r3, [pc, #232]	; (1a002478 <xPortStartScheduler+0xf0>)
1a00238e:	429a      	cmp	r2, r3
1a002390:	d029      	beq.n	1a0023e6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002392:	4b38      	ldr	r3, [pc, #224]	; (1a002474 <xPortStartScheduler+0xec>)
1a002394:	681a      	ldr	r2, [r3, #0]
1a002396:	4b39      	ldr	r3, [pc, #228]	; (1a00247c <xPortStartScheduler+0xf4>)
1a002398:	429a      	cmp	r2, r3
1a00239a:	d02d      	beq.n	1a0023f8 <xPortStartScheduler+0x70>
{
1a00239c:	b510      	push	{r4, lr}
1a00239e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0023a0:	4b37      	ldr	r3, [pc, #220]	; (1a002480 <xPortStartScheduler+0xf8>)
1a0023a2:	781a      	ldrb	r2, [r3, #0]
1a0023a4:	b2d2      	uxtb	r2, r2
1a0023a6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0023a8:	22ff      	movs	r2, #255	; 0xff
1a0023aa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0023ac:	781b      	ldrb	r3, [r3, #0]
1a0023ae:	b2db      	uxtb	r3, r3
1a0023b0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0023b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0023b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0023bc:	4a31      	ldr	r2, [pc, #196]	; (1a002484 <xPortStartScheduler+0xfc>)
1a0023be:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0023c0:	4b31      	ldr	r3, [pc, #196]	; (1a002488 <xPortStartScheduler+0x100>)
1a0023c2:	2207      	movs	r2, #7
1a0023c4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0023c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0023ca:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0023ce:	d01c      	beq.n	1a00240a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a0023d0:	4a2d      	ldr	r2, [pc, #180]	; (1a002488 <xPortStartScheduler+0x100>)
1a0023d2:	6813      	ldr	r3, [r2, #0]
1a0023d4:	3b01      	subs	r3, #1
1a0023d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0023d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0023dc:	005b      	lsls	r3, r3, #1
1a0023de:	b2db      	uxtb	r3, r3
1a0023e0:	f88d 3003 	strb.w	r3, [sp, #3]
1a0023e4:	e7ef      	b.n	1a0023c6 <xPortStartScheduler+0x3e>
	__asm volatile
1a0023e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ea:	f383 8811 	msr	BASEPRI, r3
1a0023ee:	f3bf 8f6f 	isb	sy
1a0023f2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0023f6:	e7fe      	b.n	1a0023f6 <xPortStartScheduler+0x6e>
1a0023f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023fc:	f383 8811 	msr	BASEPRI, r3
1a002400:	f3bf 8f6f 	isb	sy
1a002404:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002408:	e7fe      	b.n	1a002408 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00240a:	4b1f      	ldr	r3, [pc, #124]	; (1a002488 <xPortStartScheduler+0x100>)
1a00240c:	681b      	ldr	r3, [r3, #0]
1a00240e:	2b04      	cmp	r3, #4
1a002410:	d008      	beq.n	1a002424 <xPortStartScheduler+0x9c>
1a002412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002416:	f383 8811 	msr	BASEPRI, r3
1a00241a:	f3bf 8f6f 	isb	sy
1a00241e:	f3bf 8f4f 	dsb	sy
1a002422:	e7fe      	b.n	1a002422 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002424:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00242a:	4a17      	ldr	r2, [pc, #92]	; (1a002488 <xPortStartScheduler+0x100>)
1a00242c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00242e:	9b01      	ldr	r3, [sp, #4]
1a002430:	b2db      	uxtb	r3, r3
1a002432:	4a13      	ldr	r2, [pc, #76]	; (1a002480 <xPortStartScheduler+0xf8>)
1a002434:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002436:	4b15      	ldr	r3, [pc, #84]	; (1a00248c <xPortStartScheduler+0x104>)
1a002438:	681a      	ldr	r2, [r3, #0]
1a00243a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00243e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002440:	681a      	ldr	r2, [r3, #0]
1a002442:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002446:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002448:	f7ff ff82 	bl	1a002350 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00244c:	2400      	movs	r4, #0
1a00244e:	4b10      	ldr	r3, [pc, #64]	; (1a002490 <xPortStartScheduler+0x108>)
1a002450:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002452:	f7ff fec3 	bl	1a0021dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002456:	4a0f      	ldr	r2, [pc, #60]	; (1a002494 <xPortStartScheduler+0x10c>)
1a002458:	6813      	ldr	r3, [r2, #0]
1a00245a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00245e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002460:	f7ff fea8 	bl	1a0021b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002464:	f7ff face 	bl	1a001a04 <vTaskSwitchContext>
	prvTaskExitError();
1a002468:	f7ff fe84 	bl	1a002174 <prvTaskExitError>
}
1a00246c:	4620      	mov	r0, r4
1a00246e:	b002      	add	sp, #8
1a002470:	bd10      	pop	{r4, pc}
1a002472:	bf00      	nop
1a002474:	e000ed00 	.word	0xe000ed00
1a002478:	410fc271 	.word	0x410fc271
1a00247c:	410fc270 	.word	0x410fc270
1a002480:	e000e400 	.word	0xe000e400
1a002484:	10002ae0 	.word	0x10002ae0
1a002488:	10002ae4 	.word	0x10002ae4
1a00248c:	e000ed20 	.word	0xe000ed20
1a002490:	10000000 	.word	0x10000000
1a002494:	e000ef34 	.word	0xe000ef34

1a002498 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002498:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00249c:	2b0f      	cmp	r3, #15
1a00249e:	d90f      	bls.n	1a0024c0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0024a0:	4a10      	ldr	r2, [pc, #64]	; (1a0024e4 <vPortValidateInterruptPriority+0x4c>)
1a0024a2:	5c9b      	ldrb	r3, [r3, r2]
1a0024a4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0024a6:	4a10      	ldr	r2, [pc, #64]	; (1a0024e8 <vPortValidateInterruptPriority+0x50>)
1a0024a8:	7812      	ldrb	r2, [r2, #0]
1a0024aa:	429a      	cmp	r2, r3
1a0024ac:	d908      	bls.n	1a0024c0 <vPortValidateInterruptPriority+0x28>
1a0024ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024b2:	f383 8811 	msr	BASEPRI, r3
1a0024b6:	f3bf 8f6f 	isb	sy
1a0024ba:	f3bf 8f4f 	dsb	sy
1a0024be:	e7fe      	b.n	1a0024be <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0024c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0024ec <vPortValidateInterruptPriority+0x54>)
1a0024c2:	681b      	ldr	r3, [r3, #0]
1a0024c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0024c8:	4a09      	ldr	r2, [pc, #36]	; (1a0024f0 <vPortValidateInterruptPriority+0x58>)
1a0024ca:	6812      	ldr	r2, [r2, #0]
1a0024cc:	4293      	cmp	r3, r2
1a0024ce:	d908      	bls.n	1a0024e2 <vPortValidateInterruptPriority+0x4a>
1a0024d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024d4:	f383 8811 	msr	BASEPRI, r3
1a0024d8:	f3bf 8f6f 	isb	sy
1a0024dc:	f3bf 8f4f 	dsb	sy
1a0024e0:	e7fe      	b.n	1a0024e0 <vPortValidateInterruptPriority+0x48>
	}
1a0024e2:	4770      	bx	lr
1a0024e4:	e000e3f0 	.word	0xe000e3f0
1a0024e8:	10002ae0 	.word	0x10002ae0
1a0024ec:	e000ed0c 	.word	0xe000ed0c
1a0024f0:	10002ae4 	.word	0x10002ae4

1a0024f4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0024f4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0024f6:	4b05      	ldr	r3, [pc, #20]	; (1a00250c <DAC_IRQHandler+0x18>)
1a0024f8:	2201      	movs	r2, #1
1a0024fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0024fe:	4b04      	ldr	r3, [pc, #16]	; (1a002510 <DAC_IRQHandler+0x1c>)
1a002500:	681b      	ldr	r3, [r3, #0]
1a002502:	b113      	cbz	r3, 1a00250a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002504:	4b02      	ldr	r3, [pc, #8]	; (1a002510 <DAC_IRQHandler+0x1c>)
1a002506:	681b      	ldr	r3, [r3, #0]
1a002508:	4798      	blx	r3
   }
}
1a00250a:	bd08      	pop	{r3, pc}
1a00250c:	e000e100 	.word	0xe000e100
1a002510:	10002ae8 	.word	0x10002ae8

1a002514 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002514:	2200      	movs	r2, #0
1a002516:	2a05      	cmp	r2, #5
1a002518:	d819      	bhi.n	1a00254e <Board_LED_Init+0x3a>
{
1a00251a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00251c:	490c      	ldr	r1, [pc, #48]	; (1a002550 <Board_LED_Init+0x3c>)
1a00251e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002522:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002526:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002528:	4b0a      	ldr	r3, [pc, #40]	; (1a002554 <Board_LED_Init+0x40>)
1a00252a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00252e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002532:	2001      	movs	r0, #1
1a002534:	40a0      	lsls	r0, r4
1a002536:	4301      	orrs	r1, r0
1a002538:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00253c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002540:	2100      	movs	r1, #0
1a002542:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002544:	3201      	adds	r2, #1
1a002546:	2a05      	cmp	r2, #5
1a002548:	d9e8      	bls.n	1a00251c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00254a:	bc70      	pop	{r4, r5, r6}
1a00254c:	4770      	bx	lr
1a00254e:	4770      	bx	lr
1a002550:	1a004da8 	.word	0x1a004da8
1a002554:	400f4000 	.word	0x400f4000

1a002558 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002558:	2300      	movs	r3, #0
1a00255a:	2b03      	cmp	r3, #3
1a00255c:	d816      	bhi.n	1a00258c <Board_TEC_Init+0x34>
{
1a00255e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002560:	490b      	ldr	r1, [pc, #44]	; (1a002590 <Board_TEC_Init+0x38>)
1a002562:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002566:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00256a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00256c:	4c09      	ldr	r4, [pc, #36]	; (1a002594 <Board_TEC_Init+0x3c>)
1a00256e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002572:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002576:	2001      	movs	r0, #1
1a002578:	40a8      	lsls	r0, r5
1a00257a:	ea21 0100 	bic.w	r1, r1, r0
1a00257e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002582:	3301      	adds	r3, #1
1a002584:	2b03      	cmp	r3, #3
1a002586:	d9eb      	bls.n	1a002560 <Board_TEC_Init+0x8>
   }
}
1a002588:	bc30      	pop	{r4, r5}
1a00258a:	4770      	bx	lr
1a00258c:	4770      	bx	lr
1a00258e:	bf00      	nop
1a002590:	1a004da0 	.word	0x1a004da0
1a002594:	400f4000 	.word	0x400f4000

1a002598 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002598:	2300      	movs	r3, #0
1a00259a:	2b08      	cmp	r3, #8
1a00259c:	d816      	bhi.n	1a0025cc <Board_GPIO_Init+0x34>
{
1a00259e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0025a0:	490b      	ldr	r1, [pc, #44]	; (1a0025d0 <Board_GPIO_Init+0x38>)
1a0025a2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0025a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0025aa:	784d      	ldrb	r5, [r1, #1]
1a0025ac:	4c09      	ldr	r4, [pc, #36]	; (1a0025d4 <Board_GPIO_Init+0x3c>)
1a0025ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0025b2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0025b6:	2001      	movs	r0, #1
1a0025b8:	40a8      	lsls	r0, r5
1a0025ba:	ea21 0100 	bic.w	r1, r1, r0
1a0025be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0025c2:	3301      	adds	r3, #1
1a0025c4:	2b08      	cmp	r3, #8
1a0025c6:	d9eb      	bls.n	1a0025a0 <Board_GPIO_Init+0x8>
   }
}
1a0025c8:	bc30      	pop	{r4, r5}
1a0025ca:	4770      	bx	lr
1a0025cc:	4770      	bx	lr
1a0025ce:	bf00      	nop
1a0025d0:	1a004db4 	.word	0x1a004db4
1a0025d4:	400f4000 	.word	0x400f4000

1a0025d8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0025d8:	b510      	push	{r4, lr}
1a0025da:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0025dc:	4c08      	ldr	r4, [pc, #32]	; (1a002600 <Board_ADC_Init+0x28>)
1a0025de:	4669      	mov	r1, sp
1a0025e0:	4620      	mov	r0, r4
1a0025e2:	f000 f9d9 	bl	1a002998 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0025e6:	4a07      	ldr	r2, [pc, #28]	; (1a002604 <Board_ADC_Init+0x2c>)
1a0025e8:	4669      	mov	r1, sp
1a0025ea:	4620      	mov	r0, r4
1a0025ec:	f000 f9f4 	bl	1a0029d8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0025f0:	2200      	movs	r2, #0
1a0025f2:	4669      	mov	r1, sp
1a0025f4:	4620      	mov	r0, r4
1a0025f6:	f000 fa08 	bl	1a002a0a <Chip_ADC_SetResolution>
}
1a0025fa:	b002      	add	sp, #8
1a0025fc:	bd10      	pop	{r4, pc}
1a0025fe:	bf00      	nop
1a002600:	400e3000 	.word	0x400e3000
1a002604:	00061a80 	.word	0x00061a80

1a002608 <Board_SPI_Init>:
{
1a002608:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00260a:	4c0b      	ldr	r4, [pc, #44]	; (1a002638 <Board_SPI_Init+0x30>)
1a00260c:	4620      	mov	r0, r4
1a00260e:	f000 fdbf 	bl	1a003190 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002612:	6863      	ldr	r3, [r4, #4]
1a002614:	f023 0304 	bic.w	r3, r3, #4
1a002618:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00261a:	6823      	ldr	r3, [r4, #0]
1a00261c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002620:	f043 0307 	orr.w	r3, r3, #7
1a002624:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002626:	4905      	ldr	r1, [pc, #20]	; (1a00263c <Board_SPI_Init+0x34>)
1a002628:	4620      	mov	r0, r4
1a00262a:	f000 fd92 	bl	1a003152 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00262e:	6863      	ldr	r3, [r4, #4]
1a002630:	f043 0302 	orr.w	r3, r3, #2
1a002634:	6063      	str	r3, [r4, #4]
}
1a002636:	bd10      	pop	{r4, pc}
1a002638:	400c5000 	.word	0x400c5000
1a00263c:	000186a0 	.word	0x000186a0

1a002640 <Board_I2C_Init>:
{
1a002640:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002642:	2000      	movs	r0, #0
1a002644:	f000 fdd0 	bl	1a0031e8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002648:	4b04      	ldr	r3, [pc, #16]	; (1a00265c <Board_I2C_Init+0x1c>)
1a00264a:	f640 0208 	movw	r2, #2056	; 0x808
1a00264e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002652:	4903      	ldr	r1, [pc, #12]	; (1a002660 <Board_I2C_Init+0x20>)
1a002654:	2000      	movs	r0, #0
1a002656:	f000 fdd9 	bl	1a00320c <Chip_I2C_SetClockRate>
}
1a00265a:	bd08      	pop	{r3, pc}
1a00265c:	40086000 	.word	0x40086000
1a002660:	000f4240 	.word	0x000f4240

1a002664 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002664:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002666:	4c07      	ldr	r4, [pc, #28]	; (1a002684 <Board_Debug_Init+0x20>)
1a002668:	4620      	mov	r0, r4
1a00266a:	f000 f8b9 	bl	1a0027e0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00266e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002672:	4620      	mov	r0, r4
1a002674:	f000 f8fe 	bl	1a002874 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002678:	2303      	movs	r3, #3
1a00267a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00267c:	2301      	movs	r3, #1
1a00267e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002680:	bd10      	pop	{r4, pc}
1a002682:	bf00      	nop
1a002684:	400c1000 	.word	0x400c1000

1a002688 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002688:	4b03      	ldr	r3, [pc, #12]	; (1a002698 <Board_UARTPutChar+0x10>)
1a00268a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00268c:	f013 0f20 	tst.w	r3, #32
1a002690:	d0fa      	beq.n	1a002688 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002692:	4b01      	ldr	r3, [pc, #4]	; (1a002698 <Board_UARTPutChar+0x10>)
1a002694:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002696:	4770      	bx	lr
1a002698:	400c1000 	.word	0x400c1000

1a00269c <Board_UARTGetChar>:
	return pUART->LSR;
1a00269c:	4b05      	ldr	r3, [pc, #20]	; (1a0026b4 <Board_UARTGetChar+0x18>)
1a00269e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0026a0:	f013 0f01 	tst.w	r3, #1
1a0026a4:	d003      	beq.n	1a0026ae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0026a6:	4b03      	ldr	r3, [pc, #12]	; (1a0026b4 <Board_UARTGetChar+0x18>)
1a0026a8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0026aa:	b2c0      	uxtb	r0, r0
1a0026ac:	4770      	bx	lr
   }
   return EOF;
1a0026ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0026b2:	4770      	bx	lr
1a0026b4:	400c1000 	.word	0x400c1000

1a0026b8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0026b8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0026ba:	f7ff ffd3 	bl	1a002664 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0026be:	4809      	ldr	r0, [pc, #36]	; (1a0026e4 <Board_Init+0x2c>)
1a0026c0:	f000 fc7a 	bl	1a002fb8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0026c4:	f7ff ff68 	bl	1a002598 <Board_GPIO_Init>
   Board_ADC_Init();
1a0026c8:	f7ff ff86 	bl	1a0025d8 <Board_ADC_Init>
   Board_SPI_Init();
1a0026cc:	f7ff ff9c 	bl	1a002608 <Board_SPI_Init>
   Board_I2C_Init();
1a0026d0:	f7ff ffb6 	bl	1a002640 <Board_I2C_Init>

   Board_LED_Init();
1a0026d4:	f7ff ff1e 	bl	1a002514 <Board_LED_Init>
   Board_TEC_Init();
1a0026d8:	f7ff ff3e 	bl	1a002558 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0026dc:	f000 fc62 	bl	1a002fa4 <SystemCoreClockUpdate>
}
1a0026e0:	bd08      	pop	{r3, pc}
1a0026e2:	bf00      	nop
1a0026e4:	400f4000 	.word	0x400f4000

1a0026e8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0026e8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0026ea:	b2c0      	uxtb	r0, r0
1a0026ec:	f7ff ffcc 	bl	1a002688 <Board_UARTPutChar>
}
1a0026f0:	bd08      	pop	{r3, pc}

1a0026f2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0026f2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0026f4:	f7ff ffd2 	bl	1a00269c <Board_UARTGetChar>
}
1a0026f8:	bd08      	pop	{r3, pc}

1a0026fa <__stdio_init>:

void __stdio_init()
{
1a0026fa:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0026fc:	f7ff ffb2 	bl	1a002664 <Board_Debug_Init>
1a002700:	bd08      	pop	{r3, pc}
1a002702:	Address 0x000000001a002702 is out of bounds.


1a002704 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002704:	2300      	movs	r3, #0
1a002706:	2b1c      	cmp	r3, #28
1a002708:	d812      	bhi.n	1a002730 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00270a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00270c:	4a09      	ldr	r2, [pc, #36]	; (1a002734 <Board_SetupMuxing+0x30>)
1a00270e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002712:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002716:	784a      	ldrb	r2, [r1, #1]
1a002718:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00271a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00271e:	4906      	ldr	r1, [pc, #24]	; (1a002738 <Board_SetupMuxing+0x34>)
1a002720:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002724:	3301      	adds	r3, #1
1a002726:	2b1c      	cmp	r3, #28
1a002728:	d9f0      	bls.n	1a00270c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00272a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00272e:	4770      	bx	lr
1a002730:	4770      	bx	lr
1a002732:	bf00      	nop
1a002734:	1a004dd0 	.word	0x1a004dd0
1a002738:	40086000 	.word	0x40086000

1a00273c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00273c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00273e:	4a17      	ldr	r2, [pc, #92]	; (1a00279c <Board_SetupClocking+0x60>)
1a002740:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002748:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00274c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002750:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002758:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00275c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002760:	2201      	movs	r2, #1
1a002762:	490f      	ldr	r1, [pc, #60]	; (1a0027a0 <Board_SetupClocking+0x64>)
1a002764:	2006      	movs	r0, #6
1a002766:	f000 fc29 	bl	1a002fbc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00276a:	2400      	movs	r4, #0
1a00276c:	b14c      	cbz	r4, 1a002782 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00276e:	4b0b      	ldr	r3, [pc, #44]	; (1a00279c <Board_SetupClocking+0x60>)
1a002770:	685a      	ldr	r2, [r3, #4]
1a002772:	f022 020c 	bic.w	r2, r2, #12
1a002776:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002778:	685a      	ldr	r2, [r3, #4]
1a00277a:	f042 0203 	orr.w	r2, r2, #3
1a00277e:	605a      	str	r2, [r3, #4]
}
1a002780:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002782:	4808      	ldr	r0, [pc, #32]	; (1a0027a4 <Board_SetupClocking+0x68>)
1a002784:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002788:	2301      	movs	r3, #1
1a00278a:	788a      	ldrb	r2, [r1, #2]
1a00278c:	7849      	ldrb	r1, [r1, #1]
1a00278e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002792:	f000 fb63 	bl	1a002e5c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002796:	3401      	adds	r4, #1
1a002798:	e7e8      	b.n	1a00276c <Board_SetupClocking+0x30>
1a00279a:	bf00      	nop
1a00279c:	40043000 	.word	0x40043000
1a0027a0:	0c28cb00 	.word	0x0c28cb00
1a0027a4:	1a004dcc 	.word	0x1a004dcc

1a0027a8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0027a8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0027aa:	f7ff ffab 	bl	1a002704 <Board_SetupMuxing>
    Board_SetupClocking();
1a0027ae:	f7ff ffc5 	bl	1a00273c <Board_SetupClocking>
}
1a0027b2:	bd08      	pop	{r3, pc}

1a0027b4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0027b4:	4b09      	ldr	r3, [pc, #36]	; (1a0027dc <Chip_UART_GetIndex+0x28>)
1a0027b6:	4298      	cmp	r0, r3
1a0027b8:	d009      	beq.n	1a0027ce <Chip_UART_GetIndex+0x1a>
1a0027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0027be:	4298      	cmp	r0, r3
1a0027c0:	d007      	beq.n	1a0027d2 <Chip_UART_GetIndex+0x1e>
1a0027c2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0027c6:	4298      	cmp	r0, r3
1a0027c8:	d005      	beq.n	1a0027d6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0027ca:	2000      	movs	r0, #0
1a0027cc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0027ce:	2002      	movs	r0, #2
1a0027d0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0027d2:	2003      	movs	r0, #3
1a0027d4:	4770      	bx	lr
			return 1;
1a0027d6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0027d8:	4770      	bx	lr
1a0027da:	bf00      	nop
1a0027dc:	400c1000 	.word	0x400c1000

1a0027e0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0027e0:	b530      	push	{r4, r5, lr}
1a0027e2:	b083      	sub	sp, #12
1a0027e4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0027e6:	f7ff ffe5 	bl	1a0027b4 <Chip_UART_GetIndex>
1a0027ea:	2301      	movs	r3, #1
1a0027ec:	461a      	mov	r2, r3
1a0027ee:	4619      	mov	r1, r3
1a0027f0:	4d0e      	ldr	r5, [pc, #56]	; (1a00282c <Chip_UART_Init+0x4c>)
1a0027f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0027f6:	f000 fb77 	bl	1a002ee8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0027fa:	2307      	movs	r3, #7
1a0027fc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0027fe:	2300      	movs	r3, #0
1a002800:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002802:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002804:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002806:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002808:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00280a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00280c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00280e:	4b08      	ldr	r3, [pc, #32]	; (1a002830 <Chip_UART_Init+0x50>)
1a002810:	429c      	cmp	r4, r3
1a002812:	d006      	beq.n	1a002822 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002814:	2303      	movs	r3, #3
1a002816:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002818:	2310      	movs	r3, #16
1a00281a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00281c:	9b01      	ldr	r3, [sp, #4]
}
1a00281e:	b003      	add	sp, #12
1a002820:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002822:	2300      	movs	r3, #0
1a002824:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002826:	69a3      	ldr	r3, [r4, #24]
1a002828:	9301      	str	r3, [sp, #4]
1a00282a:	e7f3      	b.n	1a002814 <Chip_UART_Init+0x34>
1a00282c:	1a004e4c 	.word	0x1a004e4c
1a002830:	40082000 	.word	0x40082000

1a002834 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002834:	b538      	push	{r3, r4, r5, lr}
1a002836:	4605      	mov	r5, r0
1a002838:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00283a:	f7ff ffbb 	bl	1a0027b4 <Chip_UART_GetIndex>
1a00283e:	4b0c      	ldr	r3, [pc, #48]	; (1a002870 <Chip_UART_SetBaud+0x3c>)
1a002840:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002844:	f000 fb88 	bl	1a002f58 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002848:	0123      	lsls	r3, r4, #4
1a00284a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00284e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002850:	68ea      	ldr	r2, [r5, #12]
1a002852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002856:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002858:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00285a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00285e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002860:	68ea      	ldr	r2, [r5, #12]
1a002862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002866:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002868:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00286c:	0900      	lsrs	r0, r0, #4
1a00286e:	bd38      	pop	{r3, r4, r5, pc}
1a002870:	1a004e44 	.word	0x1a004e44

1a002874 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002878:	b083      	sub	sp, #12
1a00287a:	9001      	str	r0, [sp, #4]
1a00287c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00287e:	f7ff ff99 	bl	1a0027b4 <Chip_UART_GetIndex>
1a002882:	4b32      	ldr	r3, [pc, #200]	; (1a00294c <Chip_UART_SetBaudFDR+0xd8>)
1a002884:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002888:	f000 fb66 	bl	1a002f58 <Chip_Clock_GetRate>
1a00288c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00288e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002892:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002894:	f04f 0b00 	mov.w	fp, #0
1a002898:	46a2      	mov	sl, r4
1a00289a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00289c:	e02a      	b.n	1a0028f4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00289e:	4242      	negs	r2, r0
				div ++;
1a0028a0:	1c4b      	adds	r3, r1, #1
1a0028a2:	e017      	b.n	1a0028d4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0028a4:	b30a      	cbz	r2, 1a0028ea <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0028a6:	4617      	mov	r7, r2
			sd = d;
1a0028a8:	46ab      	mov	fp, r5
			sm = m;
1a0028aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0028ac:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0028ae:	3501      	adds	r5, #1
1a0028b0:	42ac      	cmp	r4, r5
1a0028b2:	d91e      	bls.n	1a0028f2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0028b4:	0933      	lsrs	r3, r6, #4
1a0028b6:	0730      	lsls	r0, r6, #28
1a0028b8:	fba4 0100 	umull	r0, r1, r4, r0
1a0028bc:	fb04 1103 	mla	r1, r4, r3, r1
1a0028c0:	1962      	adds	r2, r4, r5
1a0028c2:	fb08 f202 	mul.w	r2, r8, r2
1a0028c6:	2300      	movs	r3, #0
1a0028c8:	f000 fecc 	bl	1a003664 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0028cc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0028ce:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0028d0:	2800      	cmp	r0, #0
1a0028d2:	dbe4      	blt.n	1a00289e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0028d4:	4297      	cmp	r7, r2
1a0028d6:	d3ea      	bcc.n	1a0028ae <Chip_UART_SetBaudFDR+0x3a>
1a0028d8:	2b00      	cmp	r3, #0
1a0028da:	d0e8      	beq.n	1a0028ae <Chip_UART_SetBaudFDR+0x3a>
1a0028dc:	0c19      	lsrs	r1, r3, #16
1a0028de:	d1e6      	bne.n	1a0028ae <Chip_UART_SetBaudFDR+0x3a>
1a0028e0:	2b02      	cmp	r3, #2
1a0028e2:	d8df      	bhi.n	1a0028a4 <Chip_UART_SetBaudFDR+0x30>
1a0028e4:	2d00      	cmp	r5, #0
1a0028e6:	d0dd      	beq.n	1a0028a4 <Chip_UART_SetBaudFDR+0x30>
1a0028e8:	e7e1      	b.n	1a0028ae <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0028ea:	4617      	mov	r7, r2
			sd = d;
1a0028ec:	46ab      	mov	fp, r5
			sm = m;
1a0028ee:	46a2      	mov	sl, r4
			sdiv = div;
1a0028f0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0028f2:	3401      	adds	r4, #1
1a0028f4:	b11f      	cbz	r7, 1a0028fe <Chip_UART_SetBaudFDR+0x8a>
1a0028f6:	2c0f      	cmp	r4, #15
1a0028f8:	d801      	bhi.n	1a0028fe <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0028fa:	2500      	movs	r5, #0
1a0028fc:	e7d8      	b.n	1a0028b0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0028fe:	f1b9 0f00 	cmp.w	r9, #0
1a002902:	d01e      	beq.n	1a002942 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002904:	9a01      	ldr	r2, [sp, #4]
1a002906:	4611      	mov	r1, r2
1a002908:	68d3      	ldr	r3, [r2, #12]
1a00290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00290e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a002910:	fa5f f389 	uxtb.w	r3, r9
1a002914:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002916:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00291a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00291c:	68d3      	ldr	r3, [r2, #12]
1a00291e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002922:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002924:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002928:	b2db      	uxtb	r3, r3
1a00292a:	f00b 020f 	and.w	r2, fp, #15
1a00292e:	4313      	orrs	r3, r2
1a002930:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002932:	0933      	lsrs	r3, r6, #4
1a002934:	fb0a f303 	mul.w	r3, sl, r3
1a002938:	44da      	add	sl, fp
1a00293a:	fb09 f90a 	mul.w	r9, r9, sl
1a00293e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002942:	4648      	mov	r0, r9
1a002944:	b003      	add	sp, #12
1a002946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00294a:	bf00      	nop
1a00294c:	1a004e44 	.word	0x1a004e44

1a002950 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002950:	4b03      	ldr	r3, [pc, #12]	; (1a002960 <Chip_ADC_GetClockIndex+0x10>)
1a002952:	4298      	cmp	r0, r3
1a002954:	d001      	beq.n	1a00295a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002956:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002958:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00295a:	2004      	movs	r0, #4
1a00295c:	4770      	bx	lr
1a00295e:	bf00      	nop
1a002960:	400e4000 	.word	0x400e4000

1a002964 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002964:	b570      	push	{r4, r5, r6, lr}
1a002966:	460d      	mov	r5, r1
1a002968:	4614      	mov	r4, r2
1a00296a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00296c:	f7ff fff0 	bl	1a002950 <Chip_ADC_GetClockIndex>
1a002970:	f000 faf2 	bl	1a002f58 <Chip_Clock_GetRate>
	if (burstMode) {
1a002974:	b155      	cbz	r5, 1a00298c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002976:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00297a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00297e:	0064      	lsls	r4, r4, #1
1a002980:	fbb0 f0f4 	udiv	r0, r0, r4
1a002984:	b2c0      	uxtb	r0, r0
1a002986:	3801      	subs	r0, #1
	return div;
}
1a002988:	b2c0      	uxtb	r0, r0
1a00298a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00298c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002990:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002994:	e7f1      	b.n	1a00297a <getClkDiv+0x16>
1a002996:	Address 0x000000001a002996 is out of bounds.


1a002998 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002998:	b538      	push	{r3, r4, r5, lr}
1a00299a:	4605      	mov	r5, r0
1a00299c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00299e:	f7ff ffd7 	bl	1a002950 <Chip_ADC_GetClockIndex>
1a0029a2:	2301      	movs	r3, #1
1a0029a4:	461a      	mov	r2, r3
1a0029a6:	4619      	mov	r1, r3
1a0029a8:	f000 fa9e 	bl	1a002ee8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0029ac:	2100      	movs	r1, #0
1a0029ae:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0029b0:	4a08      	ldr	r2, [pc, #32]	; (1a0029d4 <Chip_ADC_Init+0x3c>)
1a0029b2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0029b4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0029b6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0029b8:	230b      	movs	r3, #11
1a0029ba:	4628      	mov	r0, r5
1a0029bc:	f7ff ffd2 	bl	1a002964 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0029c0:	0200      	lsls	r0, r0, #8
1a0029c2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0029c6:	7920      	ldrb	r0, [r4, #4]
1a0029c8:	0440      	lsls	r0, r0, #17
1a0029ca:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0029ce:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0029d0:	6028      	str	r0, [r5, #0]
}
1a0029d2:	bd38      	pop	{r3, r4, r5, pc}
1a0029d4:	00061a80 	.word	0x00061a80

1a0029d8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0029d8:	b570      	push	{r4, r5, r6, lr}
1a0029da:	4605      	mov	r5, r0
1a0029dc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0029de:	6804      	ldr	r4, [r0, #0]
1a0029e0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0029e4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0029e8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0029ea:	790b      	ldrb	r3, [r1, #4]
1a0029ec:	f1c3 030b 	rsb	r3, r3, #11
1a0029f0:	b2db      	uxtb	r3, r3
1a0029f2:	7949      	ldrb	r1, [r1, #5]
1a0029f4:	f7ff ffb6 	bl	1a002964 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0029f8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0029fc:	7933      	ldrb	r3, [r6, #4]
1a0029fe:	045b      	lsls	r3, r3, #17
1a002a00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002a04:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002a06:	602b      	str	r3, [r5, #0]
}
1a002a08:	bd70      	pop	{r4, r5, r6, pc}

1a002a0a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002a0a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002a0c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002a0e:	680a      	ldr	r2, [r1, #0]
1a002a10:	f7ff ffe2 	bl	1a0029d8 <Chip_ADC_SetSampleRate>
}
1a002a14:	bd08      	pop	{r3, pc}
1a002a16:	Address 0x000000001a002a16 is out of bounds.


1a002a18 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002a18:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002a1a:	680b      	ldr	r3, [r1, #0]
1a002a1c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002a20:	d002      	beq.n	1a002a28 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002a26:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002a28:	4607      	mov	r7, r0
1a002a2a:	2501      	movs	r5, #1
1a002a2c:	e03a      	b.n	1a002aa4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002a2e:	694b      	ldr	r3, [r1, #20]
1a002a30:	fb03 f302 	mul.w	r3, r3, r2
1a002a34:	fbb3 f3f5 	udiv	r3, r3, r5
1a002a38:	e01c      	b.n	1a002a74 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002a3a:	461c      	mov	r4, r3
	if (val < 0)
1a002a3c:	ebb0 0c04 	subs.w	ip, r0, r4
1a002a40:	d427      	bmi.n	1a002a92 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002a42:	4567      	cmp	r7, ip
1a002a44:	d906      	bls.n	1a002a54 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002a46:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002a48:	1c77      	adds	r7, r6, #1
1a002a4a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002a4c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002a4e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002a50:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002a52:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002a54:	3201      	adds	r2, #1
1a002a56:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002a5a:	dc1d      	bgt.n	1a002a98 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002a5c:	680c      	ldr	r4, [r1, #0]
1a002a5e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002a62:	d0e4      	beq.n	1a002a2e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002a64:	1c73      	adds	r3, r6, #1
1a002a66:	fa02 fc03 	lsl.w	ip, r2, r3
1a002a6a:	694b      	ldr	r3, [r1, #20]
1a002a6c:	fb03 f30c 	mul.w	r3, r3, ip
1a002a70:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002a74:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002ab0 <pll_calc_divs+0x98>
1a002a78:	4563      	cmp	r3, ip
1a002a7a:	d9eb      	bls.n	1a002a54 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002a7c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002ab4 <pll_calc_divs+0x9c>
1a002a80:	4563      	cmp	r3, ip
1a002a82:	d809      	bhi.n	1a002a98 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002a84:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002a88:	d1d7      	bne.n	1a002a3a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a002a8a:	1c74      	adds	r4, r6, #1
1a002a8c:	fa23 f404 	lsr.w	r4, r3, r4
1a002a90:	e7d4      	b.n	1a002a3c <pll_calc_divs+0x24>
		return -val;
1a002a92:	f1cc 0c00 	rsb	ip, ip, #0
1a002a96:	e7d4      	b.n	1a002a42 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002a98:	3601      	adds	r6, #1
1a002a9a:	2e03      	cmp	r6, #3
1a002a9c:	dc01      	bgt.n	1a002aa2 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a002a9e:	2201      	movs	r2, #1
1a002aa0:	e7d9      	b.n	1a002a56 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002aa2:	3501      	adds	r5, #1
1a002aa4:	2d04      	cmp	r5, #4
1a002aa6:	dc01      	bgt.n	1a002aac <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002aa8:	2600      	movs	r6, #0
1a002aaa:	e7f6      	b.n	1a002a9a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a002aac:	bcf0      	pop	{r4, r5, r6, r7}
1a002aae:	4770      	bx	lr
1a002ab0:	094c5eff 	.word	0x094c5eff
1a002ab4:	1312d000 	.word	0x1312d000

1a002ab8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002aba:	b099      	sub	sp, #100	; 0x64
1a002abc:	4605      	mov	r5, r0
1a002abe:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002ac0:	225c      	movs	r2, #92	; 0x5c
1a002ac2:	2100      	movs	r1, #0
1a002ac4:	a801      	add	r0, sp, #4
1a002ac6:	f001 f93a 	bl	1a003d3e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002aca:	2380      	movs	r3, #128	; 0x80
1a002acc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002ace:	6963      	ldr	r3, [r4, #20]
1a002ad0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002ad2:	7923      	ldrb	r3, [r4, #4]
1a002ad4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002ad8:	4669      	mov	r1, sp
1a002ada:	4628      	mov	r0, r5
1a002adc:	f7ff ff9c 	bl	1a002a18 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002ae0:	9b06      	ldr	r3, [sp, #24]
1a002ae2:	42ab      	cmp	r3, r5
1a002ae4:	d027      	beq.n	1a002b36 <pll_get_frac+0x7e>
	if (val < 0)
1a002ae6:	1aeb      	subs	r3, r5, r3
1a002ae8:	d42e      	bmi.n	1a002b48 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002aea:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002af2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002af4:	6963      	ldr	r3, [r4, #20]
1a002af6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002af8:	7923      	ldrb	r3, [r4, #4]
1a002afa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002afe:	a910      	add	r1, sp, #64	; 0x40
1a002b00:	4628      	mov	r0, r5
1a002b02:	f7ff ff89 	bl	1a002a18 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002b06:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002b08:	42ab      	cmp	r3, r5
1a002b0a:	d01f      	beq.n	1a002b4c <pll_get_frac+0x94>
	if (val < 0)
1a002b0c:	1aeb      	subs	r3, r5, r3
1a002b0e:	d425      	bmi.n	1a002b5c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002b10:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002b12:	4b2b      	ldr	r3, [pc, #172]	; (1a002bc0 <pll_get_frac+0x108>)
1a002b14:	429d      	cmp	r5, r3
1a002b16:	d923      	bls.n	1a002b60 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002b1a:	1aed      	subs	r5, r5, r3
1a002b1c:	d433      	bmi.n	1a002b86 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002b1e:	42ae      	cmp	r6, r5
1a002b20:	dc3b      	bgt.n	1a002b9a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002b22:	42be      	cmp	r6, r7
1a002b24:	dc31      	bgt.n	1a002b8a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002b26:	466d      	mov	r5, sp
1a002b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b34:	e006      	b.n	1a002b44 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002b36:	466d      	mov	r5, sp
1a002b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002b44:	b019      	add	sp, #100	; 0x64
1a002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002b48:	425b      	negs	r3, r3
1a002b4a:	e7ce      	b.n	1a002aea <pll_get_frac+0x32>
		*ppll = pll[2];
1a002b4c:	ad10      	add	r5, sp, #64	; 0x40
1a002b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002b5a:	e7f3      	b.n	1a002b44 <pll_get_frac+0x8c>
		return -val;
1a002b5c:	425b      	negs	r3, r3
1a002b5e:	e7d7      	b.n	1a002b10 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002b60:	2340      	movs	r3, #64	; 0x40
1a002b62:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002b64:	6963      	ldr	r3, [r4, #20]
1a002b66:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002b68:	a908      	add	r1, sp, #32
1a002b6a:	4628      	mov	r0, r5
1a002b6c:	f7ff ff54 	bl	1a002a18 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002b72:	42ab      	cmp	r3, r5
1a002b74:	d1d0      	bne.n	1a002b18 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002b76:	ad08      	add	r5, sp, #32
1a002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002b84:	e7de      	b.n	1a002b44 <pll_get_frac+0x8c>
		return -val;
1a002b86:	426d      	negs	r5, r5
1a002b88:	e7c9      	b.n	1a002b1e <pll_get_frac+0x66>
			*ppll = pll[2];
1a002b8a:	ad10      	add	r5, sp, #64	; 0x40
1a002b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b98:	e7d4      	b.n	1a002b44 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002b9a:	42af      	cmp	r7, r5
1a002b9c:	db07      	blt.n	1a002bae <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002b9e:	ad08      	add	r5, sp, #32
1a002ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ba4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002bac:	e7ca      	b.n	1a002b44 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002bae:	ad10      	add	r5, sp, #64	; 0x40
1a002bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002bbc:	e7c2      	b.n	1a002b44 <pll_get_frac+0x8c>
1a002bbe:	bf00      	nop
1a002bc0:	068e7780 	.word	0x068e7780

1a002bc4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002bc4:	b430      	push	{r4, r5}
1a002bc6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002bc8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002bca:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002bcc:	e000      	b.n	1a002bd0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002bce:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002bd0:	281c      	cmp	r0, #28
1a002bd2:	d118      	bne.n	1a002c06 <Chip_Clock_FindBaseClock+0x42>
1a002bd4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002bd8:	0051      	lsls	r1, r2, #1
1a002bda:	4a0c      	ldr	r2, [pc, #48]	; (1a002c0c <Chip_Clock_FindBaseClock+0x48>)
1a002bdc:	440a      	add	r2, r1
1a002bde:	7914      	ldrb	r4, [r2, #4]
1a002be0:	4284      	cmp	r4, r0
1a002be2:	d010      	beq.n	1a002c06 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002be4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002be8:	004a      	lsls	r2, r1, #1
1a002bea:	4908      	ldr	r1, [pc, #32]	; (1a002c0c <Chip_Clock_FindBaseClock+0x48>)
1a002bec:	5a8a      	ldrh	r2, [r1, r2]
1a002bee:	42aa      	cmp	r2, r5
1a002bf0:	d8ed      	bhi.n	1a002bce <Chip_Clock_FindBaseClock+0xa>
1a002bf2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002bf6:	0051      	lsls	r1, r2, #1
1a002bf8:	4a04      	ldr	r2, [pc, #16]	; (1a002c0c <Chip_Clock_FindBaseClock+0x48>)
1a002bfa:	440a      	add	r2, r1
1a002bfc:	8852      	ldrh	r2, [r2, #2]
1a002bfe:	42aa      	cmp	r2, r5
1a002c00:	d3e5      	bcc.n	1a002bce <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002c02:	4620      	mov	r0, r4
1a002c04:	e7e4      	b.n	1a002bd0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002c06:	bc30      	pop	{r4, r5}
1a002c08:	4770      	bx	lr
1a002c0a:	bf00      	nop
1a002c0c:	1a004e60 	.word	0x1a004e60

1a002c10 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002c10:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002c16:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002c18:	4a0d      	ldr	r2, [pc, #52]	; (1a002c50 <Chip_Clock_EnableCrystal+0x40>)
1a002c1a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002c1c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002c20:	6992      	ldr	r2, [r2, #24]
1a002c22:	428a      	cmp	r2, r1
1a002c24:	d001      	beq.n	1a002c2a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002c26:	4a0a      	ldr	r2, [pc, #40]	; (1a002c50 <Chip_Clock_EnableCrystal+0x40>)
1a002c28:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002c2a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002c2e:	4a09      	ldr	r2, [pc, #36]	; (1a002c54 <Chip_Clock_EnableCrystal+0x44>)
1a002c30:	6811      	ldr	r1, [r2, #0]
1a002c32:	4a09      	ldr	r2, [pc, #36]	; (1a002c58 <Chip_Clock_EnableCrystal+0x48>)
1a002c34:	4291      	cmp	r1, r2
1a002c36:	d901      	bls.n	1a002c3c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002c38:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002c3c:	4a04      	ldr	r2, [pc, #16]	; (1a002c50 <Chip_Clock_EnableCrystal+0x40>)
1a002c3e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002c40:	9b01      	ldr	r3, [sp, #4]
1a002c42:	1e5a      	subs	r2, r3, #1
1a002c44:	9201      	str	r2, [sp, #4]
1a002c46:	2b00      	cmp	r3, #0
1a002c48:	d1fa      	bne.n	1a002c40 <Chip_Clock_EnableCrystal+0x30>
}
1a002c4a:	b002      	add	sp, #8
1a002c4c:	4770      	bx	lr
1a002c4e:	bf00      	nop
1a002c50:	40050000 	.word	0x40050000
1a002c54:	1a004dc8 	.word	0x1a004dc8
1a002c58:	01312cff 	.word	0x01312cff

1a002c5c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002c5c:	3012      	adds	r0, #18
1a002c5e:	4b05      	ldr	r3, [pc, #20]	; (1a002c74 <Chip_Clock_GetDividerSource+0x18>)
1a002c60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002c64:	f010 0f01 	tst.w	r0, #1
1a002c68:	d102      	bne.n	1a002c70 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002c6a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002c6e:	4770      	bx	lr
		return CLKINPUT_PD;
1a002c70:	2011      	movs	r0, #17
}
1a002c72:	4770      	bx	lr
1a002c74:	40050000 	.word	0x40050000

1a002c78 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002c78:	f100 0212 	add.w	r2, r0, #18
1a002c7c:	4b03      	ldr	r3, [pc, #12]	; (1a002c8c <Chip_Clock_GetDividerDivisor+0x14>)
1a002c7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002c82:	4b03      	ldr	r3, [pc, #12]	; (1a002c90 <Chip_Clock_GetDividerDivisor+0x18>)
1a002c84:	5c18      	ldrb	r0, [r3, r0]
}
1a002c86:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002c8a:	4770      	bx	lr
1a002c8c:	40050000 	.word	0x40050000
1a002c90:	1a004e58 	.word	0x1a004e58

1a002c94 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002c94:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002c96:	2810      	cmp	r0, #16
1a002c98:	d80a      	bhi.n	1a002cb0 <Chip_Clock_GetClockInputHz+0x1c>
1a002c9a:	e8df f000 	tbb	[pc, r0]
1a002c9e:	0b44      	.short	0x0b44
1a002ca0:	0921180d 	.word	0x0921180d
1a002ca4:	2d2a2724 	.word	0x2d2a2724
1a002ca8:	34300909 	.word	0x34300909
1a002cac:	3c38      	.short	0x3c38
1a002cae:	40          	.byte	0x40
1a002caf:	00          	.byte	0x00
	uint32_t rate = 0;
1a002cb0:	2000      	movs	r0, #0
1a002cb2:	e03a      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002cb4:	481e      	ldr	r0, [pc, #120]	; (1a002d30 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002cb6:	e038      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002cb8:	4b1e      	ldr	r3, [pc, #120]	; (1a002d34 <Chip_Clock_GetClockInputHz+0xa0>)
1a002cba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002cbe:	f003 0307 	and.w	r3, r3, #7
1a002cc2:	2b04      	cmp	r3, #4
1a002cc4:	d001      	beq.n	1a002cca <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002cc6:	481c      	ldr	r0, [pc, #112]	; (1a002d38 <Chip_Clock_GetClockInputHz+0xa4>)
1a002cc8:	e02f      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002cca:	2000      	movs	r0, #0
1a002ccc:	e02d      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002cce:	4b19      	ldr	r3, [pc, #100]	; (1a002d34 <Chip_Clock_GetClockInputHz+0xa0>)
1a002cd0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002cd4:	f003 0307 	and.w	r3, r3, #7
1a002cd8:	2b04      	cmp	r3, #4
1a002cda:	d027      	beq.n	1a002d2c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002cdc:	4816      	ldr	r0, [pc, #88]	; (1a002d38 <Chip_Clock_GetClockInputHz+0xa4>)
1a002cde:	e024      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002ce0:	4b16      	ldr	r3, [pc, #88]	; (1a002d3c <Chip_Clock_GetClockInputHz+0xa8>)
1a002ce2:	6818      	ldr	r0, [r3, #0]
		break;
1a002ce4:	e021      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002ce6:	4b16      	ldr	r3, [pc, #88]	; (1a002d40 <Chip_Clock_GetClockInputHz+0xac>)
1a002ce8:	6818      	ldr	r0, [r3, #0]
		break;
1a002cea:	e01e      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002cec:	4b15      	ldr	r3, [pc, #84]	; (1a002d44 <Chip_Clock_GetClockInputHz+0xb0>)
1a002cee:	6818      	ldr	r0, [r3, #0]
		break;
1a002cf0:	e01b      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002cf2:	4b14      	ldr	r3, [pc, #80]	; (1a002d44 <Chip_Clock_GetClockInputHz+0xb0>)
1a002cf4:	6858      	ldr	r0, [r3, #4]
		break;
1a002cf6:	e018      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002cf8:	f000 f868 	bl	1a002dcc <Chip_Clock_GetMainPLLHz>
		break;
1a002cfc:	e015      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002cfe:	2100      	movs	r1, #0
1a002d00:	f000 f89a 	bl	1a002e38 <Chip_Clock_GetDivRate>
		break;
1a002d04:	e011      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002d06:	2101      	movs	r1, #1
1a002d08:	f000 f896 	bl	1a002e38 <Chip_Clock_GetDivRate>
		break;
1a002d0c:	e00d      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002d0e:	2102      	movs	r1, #2
1a002d10:	f000 f892 	bl	1a002e38 <Chip_Clock_GetDivRate>
		break;
1a002d14:	e009      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002d16:	2103      	movs	r1, #3
1a002d18:	f000 f88e 	bl	1a002e38 <Chip_Clock_GetDivRate>
		break;
1a002d1c:	e005      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002d1e:	2104      	movs	r1, #4
1a002d20:	f000 f88a 	bl	1a002e38 <Chip_Clock_GetDivRate>
		break;
1a002d24:	e001      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002d26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002d2a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002d2c:	4806      	ldr	r0, [pc, #24]	; (1a002d48 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002d2e:	e7fc      	b.n	1a002d2a <Chip_Clock_GetClockInputHz+0x96>
1a002d30:	00b71b00 	.word	0x00b71b00
1a002d34:	40043000 	.word	0x40043000
1a002d38:	017d7840 	.word	0x017d7840
1a002d3c:	1a004d9c 	.word	0x1a004d9c
1a002d40:	1a004dc8 	.word	0x1a004dc8
1a002d44:	10002aec 	.word	0x10002aec
1a002d48:	02faf080 	.word	0x02faf080

1a002d4c <Chip_Clock_CalcMainPLLValue>:
{
1a002d4c:	b538      	push	{r3, r4, r5, lr}
1a002d4e:	4605      	mov	r5, r0
1a002d50:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002d52:	7908      	ldrb	r0, [r1, #4]
1a002d54:	f7ff ff9e 	bl	1a002c94 <Chip_Clock_GetClockInputHz>
1a002d58:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002d5a:	4b19      	ldr	r3, [pc, #100]	; (1a002dc0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002d5c:	442b      	add	r3, r5
1a002d5e:	4a19      	ldr	r2, [pc, #100]	; (1a002dc4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002d60:	4293      	cmp	r3, r2
1a002d62:	d821      	bhi.n	1a002da8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002d64:	b318      	cbz	r0, 1a002dae <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002d66:	2380      	movs	r3, #128	; 0x80
1a002d68:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002d6a:	2300      	movs	r3, #0
1a002d6c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002d6e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002d70:	fbb5 f3f0 	udiv	r3, r5, r0
1a002d74:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002d76:	4a14      	ldr	r2, [pc, #80]	; (1a002dc8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002d78:	4295      	cmp	r5, r2
1a002d7a:	d903      	bls.n	1a002d84 <Chip_Clock_CalcMainPLLValue+0x38>
1a002d7c:	fb03 f000 	mul.w	r0, r3, r0
1a002d80:	42a8      	cmp	r0, r5
1a002d82:	d007      	beq.n	1a002d94 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002d84:	4621      	mov	r1, r4
1a002d86:	4628      	mov	r0, r5
1a002d88:	f7ff fe96 	bl	1a002ab8 <pll_get_frac>
		if (!ppll->nsel) {
1a002d8c:	68a3      	ldr	r3, [r4, #8]
1a002d8e:	b18b      	cbz	r3, 1a002db4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002d90:	3b01      	subs	r3, #1
1a002d92:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002d94:	6923      	ldr	r3, [r4, #16]
1a002d96:	b183      	cbz	r3, 1a002dba <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002d98:	68e2      	ldr	r2, [r4, #12]
1a002d9a:	b10a      	cbz	r2, 1a002da0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002d9c:	3a01      	subs	r2, #1
1a002d9e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002da0:	3b01      	subs	r3, #1
1a002da2:	6123      	str	r3, [r4, #16]
	return 0;
1a002da4:	2000      	movs	r0, #0
}
1a002da6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002dac:	e7fb      	b.n	1a002da6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002db2:	e7f8      	b.n	1a002da6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002db8:	e7f5      	b.n	1a002da6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002dbe:	e7f2      	b.n	1a002da6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002dc0:	ff6b3a10 	.word	0xff6b3a10
1a002dc4:	0b940510 	.word	0x0b940510
1a002dc8:	094c5eff 	.word	0x094c5eff

1a002dcc <Chip_Clock_GetMainPLLHz>:
{
1a002dcc:	b530      	push	{r4, r5, lr}
1a002dce:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002dd0:	4d17      	ldr	r5, [pc, #92]	; (1a002e30 <Chip_Clock_GetMainPLLHz+0x64>)
1a002dd2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002dd4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002dd8:	f7ff ff5c 	bl	1a002c94 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002ddc:	4b15      	ldr	r3, [pc, #84]	; (1a002e34 <Chip_Clock_GetMainPLLHz+0x68>)
1a002dde:	681b      	ldr	r3, [r3, #0]
1a002de0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002de2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002de4:	f013 0f01 	tst.w	r3, #1
1a002de8:	d020      	beq.n	1a002e2c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002dea:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002dee:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002df2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002df6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002dfa:	3301      	adds	r3, #1
	n = nsel + 1;
1a002dfc:	3201      	adds	r2, #1
	p = ptab[psel];
1a002dfe:	f10d 0c08 	add.w	ip, sp, #8
1a002e02:	4461      	add	r1, ip
1a002e04:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002e08:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002e0c:	d108      	bne.n	1a002e20 <Chip_Clock_GetMainPLLHz+0x54>
1a002e0e:	b93d      	cbnz	r5, 1a002e20 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002e10:	0049      	lsls	r1, r1, #1
1a002e12:	fbb3 f3f1 	udiv	r3, r3, r1
1a002e16:	fbb0 f0f2 	udiv	r0, r0, r2
1a002e1a:	fb00 f003 	mul.w	r0, r0, r3
1a002e1e:	e003      	b.n	1a002e28 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002e20:	fbb0 f0f2 	udiv	r0, r0, r2
1a002e24:	fb03 f000 	mul.w	r0, r3, r0
}
1a002e28:	b003      	add	sp, #12
1a002e2a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002e2c:	2000      	movs	r0, #0
1a002e2e:	e7fb      	b.n	1a002e28 <Chip_Clock_GetMainPLLHz+0x5c>
1a002e30:	40050000 	.word	0x40050000
1a002e34:	1a004e54 	.word	0x1a004e54

1a002e38 <Chip_Clock_GetDivRate>:
{
1a002e38:	b538      	push	{r3, r4, r5, lr}
1a002e3a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002e3c:	4608      	mov	r0, r1
1a002e3e:	f7ff ff0d 	bl	1a002c5c <Chip_Clock_GetDividerSource>
1a002e42:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002e44:	4620      	mov	r0, r4
1a002e46:	f7ff ff17 	bl	1a002c78 <Chip_Clock_GetDividerDivisor>
1a002e4a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002e4c:	4628      	mov	r0, r5
1a002e4e:	f7ff ff21 	bl	1a002c94 <Chip_Clock_GetClockInputHz>
1a002e52:	3401      	adds	r4, #1
}
1a002e54:	fbb0 f0f4 	udiv	r0, r0, r4
1a002e58:	bd38      	pop	{r3, r4, r5, pc}
1a002e5a:	Address 0x000000001a002e5a is out of bounds.


1a002e5c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002e5c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002e5e:	f100 0416 	add.w	r4, r0, #22
1a002e62:	00a4      	lsls	r4, r4, #2
1a002e64:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002e68:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002e6c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002e6e:	281b      	cmp	r0, #27
1a002e70:	d813      	bhi.n	1a002e9a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002e72:	2911      	cmp	r1, #17
1a002e74:	d01a      	beq.n	1a002eac <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002e76:	4d0e      	ldr	r5, [pc, #56]	; (1a002eb0 <Chip_Clock_SetBaseClock+0x54>)
1a002e78:	4025      	ands	r5, r4

			if (autoblocken) {
1a002e7a:	b10a      	cbz	r2, 1a002e80 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002e7c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002e80:	b10b      	cbz	r3, 1a002e86 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002e82:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002e86:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002e8a:	3016      	adds	r0, #22
1a002e8c:	0080      	lsls	r0, r0, #2
1a002e8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002e92:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002e96:	6045      	str	r5, [r0, #4]
1a002e98:	e008      	b.n	1a002eac <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002e9a:	f044 0401 	orr.w	r4, r4, #1
1a002e9e:	3016      	adds	r0, #22
1a002ea0:	0080      	lsls	r0, r0, #2
1a002ea2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002ea6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002eaa:	6044      	str	r4, [r0, #4]
	}
}
1a002eac:	bc30      	pop	{r4, r5}
1a002eae:	4770      	bx	lr
1a002eb0:	e0fff7fe 	.word	0xe0fff7fe

1a002eb4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002eb4:	281b      	cmp	r0, #27
1a002eb6:	d80c      	bhi.n	1a002ed2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002eb8:	3016      	adds	r0, #22
1a002eba:	0080      	lsls	r0, r0, #2
1a002ebc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002ec0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002ec4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002ec6:	f010 0f01 	tst.w	r0, #1
1a002eca:	d104      	bne.n	1a002ed6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ecc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ed0:	4770      	bx	lr
		return CLKINPUT_PD;
1a002ed2:	2011      	movs	r0, #17
1a002ed4:	4770      	bx	lr
		return CLKINPUT_PD;
1a002ed6:	2011      	movs	r0, #17
}
1a002ed8:	4770      	bx	lr

1a002eda <Chip_Clock_GetBaseClocktHz>:
{
1a002eda:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002edc:	f7ff ffea 	bl	1a002eb4 <Chip_Clock_GetBaseClock>
1a002ee0:	f7ff fed8 	bl	1a002c94 <Chip_Clock_GetClockInputHz>
}
1a002ee4:	bd08      	pop	{r3, pc}
1a002ee6:	Address 0x000000001a002ee6 is out of bounds.


1a002ee8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002ee8:	b971      	cbnz	r1, 1a002f08 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002eea:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002eec:	b10a      	cbz	r2, 1a002ef2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002eee:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002ef2:	2b02      	cmp	r3, #2
1a002ef4:	d00a      	beq.n	1a002f0c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002ef6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002efa:	d30a      	bcc.n	1a002f12 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002efc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f00:	4b06      	ldr	r3, [pc, #24]	; (1a002f1c <Chip_Clock_EnableOpts+0x34>)
1a002f02:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002f06:	4770      	bx	lr
		reg |= (1 << 1);
1a002f08:	2103      	movs	r1, #3
1a002f0a:	e7ef      	b.n	1a002eec <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002f0c:	f041 0120 	orr.w	r1, r1, #32
1a002f10:	e7f1      	b.n	1a002ef6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002f12:	3020      	adds	r0, #32
1a002f14:	4b02      	ldr	r3, [pc, #8]	; (1a002f20 <Chip_Clock_EnableOpts+0x38>)
1a002f16:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002f1a:	4770      	bx	lr
1a002f1c:	40052000 	.word	0x40052000
1a002f20:	40051000 	.word	0x40051000

1a002f24 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002f24:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f28:	d309      	bcc.n	1a002f3e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002f2a:	4a09      	ldr	r2, [pc, #36]	; (1a002f50 <Chip_Clock_Enable+0x2c>)
1a002f2c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f30:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002f34:	f043 0301 	orr.w	r3, r3, #1
1a002f38:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002f3c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002f3e:	4a05      	ldr	r2, [pc, #20]	; (1a002f54 <Chip_Clock_Enable+0x30>)
1a002f40:	3020      	adds	r0, #32
1a002f42:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002f46:	f043 0301 	orr.w	r3, r3, #1
1a002f4a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002f4e:	4770      	bx	lr
1a002f50:	40052000 	.word	0x40052000
1a002f54:	40051000 	.word	0x40051000

1a002f58 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002f58:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002f5a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f5e:	d309      	bcc.n	1a002f74 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002f60:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002f64:	4a0d      	ldr	r2, [pc, #52]	; (1a002f9c <Chip_Clock_GetRate+0x44>)
1a002f66:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002f6a:	f014 0f01 	tst.w	r4, #1
1a002f6e:	d107      	bne.n	1a002f80 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002f70:	2000      	movs	r0, #0
	}

	return rate;
}
1a002f72:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002f74:	f100 0320 	add.w	r3, r0, #32
1a002f78:	4a09      	ldr	r2, [pc, #36]	; (1a002fa0 <Chip_Clock_GetRate+0x48>)
1a002f7a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002f7e:	e7f4      	b.n	1a002f6a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002f80:	f7ff fe20 	bl	1a002bc4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002f84:	f7ff ffa9 	bl	1a002eda <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002f88:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002f8c:	d103      	bne.n	1a002f96 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002f8e:	2301      	movs	r3, #1
		rate = rate / div;
1a002f90:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f94:	e7ed      	b.n	1a002f72 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002f96:	2302      	movs	r3, #2
1a002f98:	e7fa      	b.n	1a002f90 <Chip_Clock_GetRate+0x38>
1a002f9a:	bf00      	nop
1a002f9c:	40052000 	.word	0x40052000
1a002fa0:	40051000 	.word	0x40051000

1a002fa4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002fa4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002fa6:	2069      	movs	r0, #105	; 0x69
1a002fa8:	f7ff ffd6 	bl	1a002f58 <Chip_Clock_GetRate>
1a002fac:	4b01      	ldr	r3, [pc, #4]	; (1a002fb4 <SystemCoreClockUpdate+0x10>)
1a002fae:	6018      	str	r0, [r3, #0]
}
1a002fb0:	bd08      	pop	{r3, pc}
1a002fb2:	bf00      	nop
1a002fb4:	10002c10 	.word	0x10002c10

1a002fb8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002fb8:	4770      	bx	lr
1a002fba:	Address 0x000000001a002fba is out of bounds.


1a002fbc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002fbc:	b570      	push	{r4, r5, r6, lr}
1a002fbe:	b08a      	sub	sp, #40	; 0x28
1a002fc0:	4605      	mov	r5, r0
1a002fc2:	460e      	mov	r6, r1
1a002fc4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002fc6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002fca:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002fcc:	2806      	cmp	r0, #6
1a002fce:	d018      	beq.n	1a003002 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002fd0:	2300      	movs	r3, #0
1a002fd2:	2201      	movs	r2, #1
1a002fd4:	4629      	mov	r1, r5
1a002fd6:	2004      	movs	r0, #4
1a002fd8:	f7ff ff40 	bl	1a002e5c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002fdc:	4a4a      	ldr	r2, [pc, #296]	; (1a003108 <Chip_SetupCoreClock+0x14c>)
1a002fde:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002fe0:	f043 0301 	orr.w	r3, r3, #1
1a002fe4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002fe6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002fea:	a901      	add	r1, sp, #4
1a002fec:	4630      	mov	r0, r6
1a002fee:	f7ff fead 	bl	1a002d4c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002ff2:	4b46      	ldr	r3, [pc, #280]	; (1a00310c <Chip_SetupCoreClock+0x150>)
1a002ff4:	429e      	cmp	r6, r3
1a002ff6:	d916      	bls.n	1a003026 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002ff8:	9b01      	ldr	r3, [sp, #4]
1a002ffa:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002ffe:	d003      	beq.n	1a003008 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003000:	e7fe      	b.n	1a003000 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003002:	f7ff fe05 	bl	1a002c10 <Chip_Clock_EnableCrystal>
1a003006:	e7e3      	b.n	1a002fd0 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003008:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00300c:	d005      	beq.n	1a00301a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00300e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003012:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003014:	2500      	movs	r5, #0
			direct = 1;
1a003016:	2601      	movs	r6, #1
1a003018:	e007      	b.n	1a00302a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00301a:	9b04      	ldr	r3, [sp, #16]
1a00301c:	3301      	adds	r3, #1
1a00301e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003020:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003022:	2600      	movs	r6, #0
1a003024:	e001      	b.n	1a00302a <Chip_SetupCoreClock+0x6e>
1a003026:	2500      	movs	r5, #0
1a003028:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00302a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00302e:	9b01      	ldr	r3, [sp, #4]
1a003030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003034:	9a05      	ldr	r2, [sp, #20]
1a003036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00303a:	9a03      	ldr	r2, [sp, #12]
1a00303c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003040:	9a04      	ldr	r2, [sp, #16]
1a003042:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003046:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00304a:	4a2f      	ldr	r2, [pc, #188]	; (1a003108 <Chip_SetupCoreClock+0x14c>)
1a00304c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00304e:	4b2e      	ldr	r3, [pc, #184]	; (1a003108 <Chip_SetupCoreClock+0x14c>)
1a003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003052:	f013 0f01 	tst.w	r3, #1
1a003056:	d0fa      	beq.n	1a00304e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003058:	2300      	movs	r3, #0
1a00305a:	2201      	movs	r2, #1
1a00305c:	2109      	movs	r1, #9
1a00305e:	2004      	movs	r0, #4
1a003060:	f7ff fefc 	bl	1a002e5c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003064:	b306      	cbz	r6, 1a0030a8 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003066:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00306a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00306e:	1e5a      	subs	r2, r3, #1
1a003070:	9209      	str	r2, [sp, #36]	; 0x24
1a003072:	2b00      	cmp	r3, #0
1a003074:	d1fa      	bne.n	1a00306c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003076:	9b01      	ldr	r3, [sp, #4]
1a003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00307c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00307e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003082:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003086:	9a05      	ldr	r2, [sp, #20]
1a003088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00308c:	9a03      	ldr	r2, [sp, #12]
1a00308e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003092:	9a04      	ldr	r2, [sp, #16]
1a003094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00309c:	4a1a      	ldr	r2, [pc, #104]	; (1a003108 <Chip_SetupCoreClock+0x14c>)
1a00309e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0030a0:	2c00      	cmp	r4, #0
1a0030a2:	d12e      	bne.n	1a003102 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0030a4:	b00a      	add	sp, #40	; 0x28
1a0030a6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0030a8:	2d00      	cmp	r5, #0
1a0030aa:	d0f9      	beq.n	1a0030a0 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030ac:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0030b0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0030b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0030b4:	1e5a      	subs	r2, r3, #1
1a0030b6:	9209      	str	r2, [sp, #36]	; 0x24
1a0030b8:	2b00      	cmp	r3, #0
1a0030ba:	d1fa      	bne.n	1a0030b2 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0030bc:	9b04      	ldr	r3, [sp, #16]
1a0030be:	1e5a      	subs	r2, r3, #1
1a0030c0:	9204      	str	r2, [sp, #16]
1a0030c2:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0030c6:	9b01      	ldr	r3, [sp, #4]
1a0030c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0030cc:	9905      	ldr	r1, [sp, #20]
1a0030ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0030d2:	9903      	ldr	r1, [sp, #12]
1a0030d4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0030d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030e0:	4a09      	ldr	r2, [pc, #36]	; (1a003108 <Chip_SetupCoreClock+0x14c>)
1a0030e2:	6453      	str	r3, [r2, #68]	; 0x44
1a0030e4:	e7dc      	b.n	1a0030a0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0030e6:	480a      	ldr	r0, [pc, #40]	; (1a003110 <Chip_SetupCoreClock+0x154>)
1a0030e8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0030ec:	78cb      	ldrb	r3, [r1, #3]
1a0030ee:	788a      	ldrb	r2, [r1, #2]
1a0030f0:	7849      	ldrb	r1, [r1, #1]
1a0030f2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0030f6:	f7ff feb1 	bl	1a002e5c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0030fa:	3401      	adds	r4, #1
1a0030fc:	2c11      	cmp	r4, #17
1a0030fe:	d9f2      	bls.n	1a0030e6 <Chip_SetupCoreClock+0x12a>
1a003100:	e7d0      	b.n	1a0030a4 <Chip_SetupCoreClock+0xe8>
1a003102:	2400      	movs	r4, #0
1a003104:	e7fa      	b.n	1a0030fc <Chip_SetupCoreClock+0x140>
1a003106:	bf00      	nop
1a003108:	40050000 	.word	0x40050000
1a00310c:	068e7780 	.word	0x068e7780
1a003110:	1a004ecc 	.word	0x1a004ecc

1a003114 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003114:	4b03      	ldr	r3, [pc, #12]	; (1a003124 <Chip_SSP_GetClockIndex+0x10>)
1a003116:	4298      	cmp	r0, r3
1a003118:	d001      	beq.n	1a00311e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00311a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00311c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00311e:	20a5      	movs	r0, #165	; 0xa5
1a003120:	4770      	bx	lr
1a003122:	bf00      	nop
1a003124:	400c5000 	.word	0x400c5000

1a003128 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003128:	4b04      	ldr	r3, [pc, #16]	; (1a00313c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00312a:	4298      	cmp	r0, r3
1a00312c:	d002      	beq.n	1a003134 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00312e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003132:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003134:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003138:	4770      	bx	lr
1a00313a:	bf00      	nop
1a00313c:	400c5000 	.word	0x400c5000

1a003140 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003140:	6803      	ldr	r3, [r0, #0]
1a003142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003146:	0209      	lsls	r1, r1, #8
1a003148:	b289      	uxth	r1, r1
1a00314a:	4319      	orrs	r1, r3
1a00314c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00314e:	6102      	str	r2, [r0, #16]
}
1a003150:	4770      	bx	lr

1a003152 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003152:	b570      	push	{r4, r5, r6, lr}
1a003154:	4606      	mov	r6, r0
1a003156:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003158:	f7ff ffe6 	bl	1a003128 <Chip_SSP_GetPeriphClockIndex>
1a00315c:	f7ff fefc 	bl	1a002f58 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003160:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003166:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003168:	e000      	b.n	1a00316c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00316a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00316c:	42ab      	cmp	r3, r5
1a00316e:	d90b      	bls.n	1a003188 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003170:	1c4c      	adds	r4, r1, #1
1a003172:	fb02 f304 	mul.w	r3, r2, r4
1a003176:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00317a:	429d      	cmp	r5, r3
1a00317c:	d2f6      	bcs.n	1a00316c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00317e:	2cff      	cmp	r4, #255	; 0xff
1a003180:	d9f3      	bls.n	1a00316a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003182:	3202      	adds	r2, #2
				cr0_div = 0;
1a003184:	2100      	movs	r1, #0
1a003186:	e7f1      	b.n	1a00316c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003188:	4630      	mov	r0, r6
1a00318a:	f7ff ffd9 	bl	1a003140 <Chip_SSP_SetClockRate>
}
1a00318e:	bd70      	pop	{r4, r5, r6, pc}

1a003190 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003190:	b510      	push	{r4, lr}
1a003192:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003194:	f7ff ffbe 	bl	1a003114 <Chip_SSP_GetClockIndex>
1a003198:	f7ff fec4 	bl	1a002f24 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00319c:	4620      	mov	r0, r4
1a00319e:	f7ff ffc3 	bl	1a003128 <Chip_SSP_GetPeriphClockIndex>
1a0031a2:	f7ff febf 	bl	1a002f24 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0031a6:	6863      	ldr	r3, [r4, #4]
1a0031a8:	f023 0304 	bic.w	r3, r3, #4
1a0031ac:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0031ae:	6823      	ldr	r3, [r4, #0]
1a0031b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0031b4:	f043 0307 	orr.w	r3, r3, #7
1a0031b8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0031ba:	4902      	ldr	r1, [pc, #8]	; (1a0031c4 <Chip_SSP_Init+0x34>)
1a0031bc:	4620      	mov	r0, r4
1a0031be:	f7ff ffc8 	bl	1a003152 <Chip_SSP_SetBitRate>
}
1a0031c2:	bd10      	pop	{r4, pc}
1a0031c4:	000186a0 	.word	0x000186a0

1a0031c8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0031c8:	2901      	cmp	r1, #1
1a0031ca:	d109      	bne.n	1a0031e0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0031cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0031d0:	0082      	lsls	r2, r0, #2
1a0031d2:	4b04      	ldr	r3, [pc, #16]	; (1a0031e4 <Chip_I2C_EventHandler+0x1c>)
1a0031d4:	4413      	add	r3, r2
1a0031d6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0031d8:	7d13      	ldrb	r3, [r2, #20]
1a0031da:	b2db      	uxtb	r3, r3
1a0031dc:	2b04      	cmp	r3, #4
1a0031de:	d0fb      	beq.n	1a0031d8 <Chip_I2C_EventHandler+0x10>
}
1a0031e0:	4770      	bx	lr
1a0031e2:	bf00      	nop
1a0031e4:	10000004 	.word	0x10000004

1a0031e8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0031e8:	b570      	push	{r4, r5, r6, lr}
1a0031ea:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0031ec:	4e06      	ldr	r6, [pc, #24]	; (1a003208 <Chip_I2C_Init+0x20>)
1a0031ee:	00c4      	lsls	r4, r0, #3
1a0031f0:	1a22      	subs	r2, r4, r0
1a0031f2:	0093      	lsls	r3, r2, #2
1a0031f4:	4433      	add	r3, r6
1a0031f6:	8898      	ldrh	r0, [r3, #4]
1a0031f8:	f7ff fe94 	bl	1a002f24 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0031fc:	1b64      	subs	r4, r4, r5
1a0031fe:	00a3      	lsls	r3, r4, #2
1a003200:	58f3      	ldr	r3, [r6, r3]
1a003202:	226c      	movs	r2, #108	; 0x6c
1a003204:	619a      	str	r2, [r3, #24]
}
1a003206:	bd70      	pop	{r4, r5, r6, pc}
1a003208:	10000004 	.word	0x10000004

1a00320c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003210:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003212:	4e0b      	ldr	r6, [pc, #44]	; (1a003240 <Chip_I2C_SetClockRate+0x34>)
1a003214:	00c5      	lsls	r5, r0, #3
1a003216:	1a2b      	subs	r3, r5, r0
1a003218:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00321c:	eb06 0308 	add.w	r3, r6, r8
1a003220:	8898      	ldrh	r0, [r3, #4]
1a003222:	f7ff fe99 	bl	1a002f58 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003226:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00322a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00322e:	0842      	lsrs	r2, r0, #1
1a003230:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003232:	f856 3008 	ldr.w	r3, [r6, r8]
1a003236:	691a      	ldr	r2, [r3, #16]
1a003238:	1a80      	subs	r0, r0, r2
1a00323a:	6158      	str	r0, [r3, #20]
}
1a00323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003240:	10000004 	.word	0x10000004

1a003244 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003244:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003246:	4a0b      	ldr	r2, [pc, #44]	; (1a003274 <SystemInit+0x30>)
1a003248:	4b0b      	ldr	r3, [pc, #44]	; (1a003278 <SystemInit+0x34>)
1a00324a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00324c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003250:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003252:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003256:	2b20      	cmp	r3, #32
1a003258:	d004      	beq.n	1a003264 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00325a:	f7ff faa5 	bl	1a0027a8 <Board_SystemInit>
   Board_Init();
1a00325e:	f7ff fa2b 	bl	1a0026b8 <Board_Init>
}
1a003262:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003264:	4a04      	ldr	r2, [pc, #16]	; (1a003278 <SystemInit+0x34>)
1a003266:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00326a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00326e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003272:	e7f2      	b.n	1a00325a <SystemInit+0x16>
1a003274:	1a000000 	.word	0x1a000000
1a003278:	e000ed00 	.word	0xe000ed00

1a00327c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00327c:	4b04      	ldr	r3, [pc, #16]	; (1a003290 <cyclesCounterInit+0x14>)
1a00327e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003280:	4a04      	ldr	r2, [pc, #16]	; (1a003294 <cyclesCounterInit+0x18>)
1a003282:	6813      	ldr	r3, [r2, #0]
1a003284:	f043 0301 	orr.w	r3, r3, #1
1a003288:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00328a:	2001      	movs	r0, #1
1a00328c:	4770      	bx	lr
1a00328e:	bf00      	nop
1a003290:	1000003c 	.word	0x1000003c
1a003294:	e0001000 	.word	0xe0001000

1a003298 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00329c:	4680      	mov	r8, r0
1a00329e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0032a0:	4c19      	ldr	r4, [pc, #100]	; (1a003308 <uartInit+0x70>)
1a0032a2:	0045      	lsls	r5, r0, #1
1a0032a4:	182a      	adds	r2, r5, r0
1a0032a6:	0093      	lsls	r3, r2, #2
1a0032a8:	18e6      	adds	r6, r4, r3
1a0032aa:	58e7      	ldr	r7, [r4, r3]
1a0032ac:	4638      	mov	r0, r7
1a0032ae:	f7ff fa97 	bl	1a0027e0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0032b2:	4649      	mov	r1, r9
1a0032b4:	4638      	mov	r0, r7
1a0032b6:	f7ff fabd 	bl	1a002834 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0032ba:	2307      	movs	r3, #7
1a0032bc:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0032be:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0032c0:	2301      	movs	r3, #1
1a0032c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0032c4:	7930      	ldrb	r0, [r6, #4]
1a0032c6:	7973      	ldrb	r3, [r6, #5]
1a0032c8:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0032ca:	f042 0218 	orr.w	r2, r2, #24
1a0032ce:	490f      	ldr	r1, [pc, #60]	; (1a00330c <uartInit+0x74>)
1a0032d0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0032d8:	79f0      	ldrb	r0, [r6, #7]
1a0032da:	7a33      	ldrb	r3, [r6, #8]
1a0032dc:	7a72      	ldrb	r2, [r6, #9]
1a0032de:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0032e2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0032ea:	f1b8 0f01 	cmp.w	r8, #1
1a0032ee:	d001      	beq.n	1a0032f4 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0032f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0032f4:	4a06      	ldr	r2, [pc, #24]	; (1a003310 <uartInit+0x78>)
1a0032f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0032f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0032fc:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0032fe:	221a      	movs	r2, #26
1a003300:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003304:	e7f4      	b.n	1a0032f0 <uartInit+0x58>
1a003306:	bf00      	nop
1a003308:	1a004f14 	.word	0x1a004f14
1a00330c:	40086000 	.word	0x40086000
1a003310:	40081000 	.word	0x40081000

1a003314 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003314:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003316:	4d0b      	ldr	r5, [pc, #44]	; (1a003344 <gpioObtainPinInit+0x30>)
1a003318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00331c:	182c      	adds	r4, r5, r0
1a00331e:	5628      	ldrsb	r0, [r5, r0]
1a003320:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003322:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003326:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003328:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00332c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00332e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003332:	9b02      	ldr	r3, [sp, #8]
1a003334:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003336:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00333a:	9b03      	ldr	r3, [sp, #12]
1a00333c:	701a      	strb	r2, [r3, #0]
}
1a00333e:	bc30      	pop	{r4, r5}
1a003340:	4770      	bx	lr
1a003342:	bf00      	nop
1a003344:	1a004f5c 	.word	0x1a004f5c

1a003348 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003348:	f110 0f02 	cmn.w	r0, #2
1a00334c:	f000 80c7 	beq.w	1a0034de <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003350:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003354:	f000 80c5 	beq.w	1a0034e2 <gpioInit+0x19a>
{
1a003358:	b570      	push	{r4, r5, r6, lr}
1a00335a:	b084      	sub	sp, #16
1a00335c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00335e:	2300      	movs	r3, #0
1a003360:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003364:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003368:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00336c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003370:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003374:	f10d 030b 	add.w	r3, sp, #11
1a003378:	9301      	str	r3, [sp, #4]
1a00337a:	ab03      	add	r3, sp, #12
1a00337c:	9300      	str	r3, [sp, #0]
1a00337e:	f10d 030d 	add.w	r3, sp, #13
1a003382:	f10d 020e 	add.w	r2, sp, #14
1a003386:	f10d 010f 	add.w	r1, sp, #15
1a00338a:	f7ff ffc3 	bl	1a003314 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00338e:	2c05      	cmp	r4, #5
1a003390:	f200 80a9 	bhi.w	1a0034e6 <gpioInit+0x19e>
1a003394:	e8df f004 	tbb	[pc, r4]
1a003398:	45278109 	.word	0x45278109
1a00339c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00339e:	4853      	ldr	r0, [pc, #332]	; (1a0034ec <gpioInit+0x1a4>)
1a0033a0:	f7ff fe0a 	bl	1a002fb8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0033a4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0033a6:	b004      	add	sp, #16
1a0033a8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0033aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0033ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0033b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0033b6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0033ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0033be:	494c      	ldr	r1, [pc, #304]	; (1a0034f0 <gpioInit+0x1a8>)
1a0033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0033c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0033c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0033cc:	2001      	movs	r0, #1
1a0033ce:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0033d2:	4c46      	ldr	r4, [pc, #280]	; (1a0034ec <gpioInit+0x1a4>)
1a0033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0033d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0033dc:	ea22 0201 	bic.w	r2, r2, r1
1a0033e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0033e4:	e7df      	b.n	1a0033a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0033e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0033ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0033ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0033f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0033f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0033fa:	493d      	ldr	r1, [pc, #244]	; (1a0034f0 <gpioInit+0x1a8>)
1a0033fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003400:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003404:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003408:	2001      	movs	r0, #1
1a00340a:	fa00 f102 	lsl.w	r1, r0, r2
1a00340e:	4c37      	ldr	r4, [pc, #220]	; (1a0034ec <gpioInit+0x1a4>)
1a003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003414:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003418:	ea22 0201 	bic.w	r2, r2, r1
1a00341c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003420:	e7c1      	b.n	1a0033a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003422:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003426:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00342a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00342e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003432:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003436:	492e      	ldr	r1, [pc, #184]	; (1a0034f0 <gpioInit+0x1a8>)
1a003438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00343c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003440:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003444:	2001      	movs	r0, #1
1a003446:	fa00 f102 	lsl.w	r1, r0, r2
1a00344a:	4c28      	ldr	r4, [pc, #160]	; (1a0034ec <gpioInit+0x1a4>)
1a00344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003450:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003454:	ea22 0201 	bic.w	r2, r2, r1
1a003458:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00345c:	e7a3      	b.n	1a0033a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00345e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003462:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003466:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00346a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00346e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003472:	491f      	ldr	r1, [pc, #124]	; (1a0034f0 <gpioInit+0x1a8>)
1a003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003478:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00347c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003480:	2001      	movs	r0, #1
1a003482:	fa00 f102 	lsl.w	r1, r0, r2
1a003486:	4c19      	ldr	r4, [pc, #100]	; (1a0034ec <gpioInit+0x1a4>)
1a003488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00348c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003490:	ea22 0201 	bic.w	r2, r2, r1
1a003494:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003498:	e785      	b.n	1a0033a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00349a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00349e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0034a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0034aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034ae:	4910      	ldr	r1, [pc, #64]	; (1a0034f0 <gpioInit+0x1a8>)
1a0034b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0034b4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0034b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034bc:	2001      	movs	r0, #1
1a0034be:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0034c2:	4b0a      	ldr	r3, [pc, #40]	; (1a0034ec <gpioInit+0x1a4>)
1a0034c4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0034c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0034cc:	4331      	orrs	r1, r6
1a0034ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0034d2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0034d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0034d8:	2100      	movs	r1, #0
1a0034da:	5499      	strb	r1, [r3, r2]
1a0034dc:	e763      	b.n	1a0033a6 <gpioInit+0x5e>
	  return FALSE;
1a0034de:	2000      	movs	r0, #0
1a0034e0:	4770      	bx	lr
	  return FALSE;
1a0034e2:	2000      	movs	r0, #0
}
1a0034e4:	4770      	bx	lr
      ret_val = 0;
1a0034e6:	2000      	movs	r0, #0
1a0034e8:	e75d      	b.n	1a0033a6 <gpioInit+0x5e>
1a0034ea:	bf00      	nop
1a0034ec:	400f4000 	.word	0x400f4000
1a0034f0:	40086000 	.word	0x40086000

1a0034f4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0034f4:	f110 0f02 	cmn.w	r0, #2
1a0034f8:	d02d      	beq.n	1a003556 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0034fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0034fe:	d02c      	beq.n	1a00355a <gpioWrite+0x66>
{
1a003500:	b510      	push	{r4, lr}
1a003502:	b084      	sub	sp, #16
1a003504:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003506:	2300      	movs	r3, #0
1a003508:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00350c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003510:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003514:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003518:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00351c:	f10d 030b 	add.w	r3, sp, #11
1a003520:	9301      	str	r3, [sp, #4]
1a003522:	ab03      	add	r3, sp, #12
1a003524:	9300      	str	r3, [sp, #0]
1a003526:	f10d 030d 	add.w	r3, sp, #13
1a00352a:	f10d 020e 	add.w	r2, sp, #14
1a00352e:	f10d 010f 	add.w	r1, sp, #15
1a003532:	f7ff feef 	bl	1a003314 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003536:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00353a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00353e:	1c21      	adds	r1, r4, #0
1a003540:	bf18      	it	ne
1a003542:	2101      	movne	r1, #1
1a003544:	015b      	lsls	r3, r3, #5
1a003546:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00354a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00354e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003550:	2001      	movs	r0, #1
}
1a003552:	b004      	add	sp, #16
1a003554:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003556:	2000      	movs	r0, #0
1a003558:	4770      	bx	lr
	  return FALSE;
1a00355a:	2000      	movs	r0, #0
}
1a00355c:	4770      	bx	lr

1a00355e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00355e:	f110 0f02 	cmn.w	r0, #2
1a003562:	d02c      	beq.n	1a0035be <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003564:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003568:	d02b      	beq.n	1a0035c2 <gpioRead+0x64>
{
1a00356a:	b500      	push	{lr}
1a00356c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00356e:	2300      	movs	r3, #0
1a003570:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003574:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003578:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00357c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003580:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003584:	f10d 030b 	add.w	r3, sp, #11
1a003588:	9301      	str	r3, [sp, #4]
1a00358a:	ab03      	add	r3, sp, #12
1a00358c:	9300      	str	r3, [sp, #0]
1a00358e:	f10d 030d 	add.w	r3, sp, #13
1a003592:	f10d 020e 	add.w	r2, sp, #14
1a003596:	f10d 010f 	add.w	r1, sp, #15
1a00359a:	f7ff febb 	bl	1a003314 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00359e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0035a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0035a6:	015b      	lsls	r3, r3, #5
1a0035a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0035ac:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0035b0:	5c98      	ldrb	r0, [r3, r2]
1a0035b2:	3000      	adds	r0, #0
1a0035b4:	bf18      	it	ne
1a0035b6:	2001      	movne	r0, #1

   return ret_val;
}
1a0035b8:	b005      	add	sp, #20
1a0035ba:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0035be:	2001      	movs	r0, #1
1a0035c0:	4770      	bx	lr
      return FALSE;
1a0035c2:	2000      	movs	r0, #0
}
1a0035c4:	4770      	bx	lr

1a0035c6 <gpioToggle>:
{
1a0035c6:	b510      	push	{r4, lr}
1a0035c8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0035ca:	f7ff ffc8 	bl	1a00355e <gpioRead>
1a0035ce:	fab0 f180 	clz	r1, r0
1a0035d2:	0949      	lsrs	r1, r1, #5
1a0035d4:	4620      	mov	r0, r4
1a0035d6:	f7ff ff8d 	bl	1a0034f4 <gpioWrite>
}
1a0035da:	bd10      	pop	{r4, pc}

1a0035dc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0035dc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0035de:	4b04      	ldr	r3, [pc, #16]	; (1a0035f0 <USB0_IRQHandler+0x14>)
1a0035e0:	681b      	ldr	r3, [r3, #0]
1a0035e2:	681b      	ldr	r3, [r3, #0]
1a0035e4:	68db      	ldr	r3, [r3, #12]
1a0035e6:	4a03      	ldr	r2, [pc, #12]	; (1a0035f4 <USB0_IRQHandler+0x18>)
1a0035e8:	6810      	ldr	r0, [r2, #0]
1a0035ea:	4798      	blx	r3
}
1a0035ec:	bd08      	pop	{r3, pc}
1a0035ee:	bf00      	nop
1a0035f0:	10002c14 	.word	0x10002c14
1a0035f4:	10002af4 	.word	0x10002af4

1a0035f8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0035f8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0035fa:	f7ff fcd3 	bl	1a002fa4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0035fe:	4b18      	ldr	r3, [pc, #96]	; (1a003660 <boardInit+0x68>)
1a003600:	6818      	ldr	r0, [r3, #0]
1a003602:	f7ff fe3b 	bl	1a00327c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003606:	2105      	movs	r1, #5
1a003608:	2000      	movs	r0, #0
1a00360a:	f7ff fe9d 	bl	1a003348 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00360e:	2100      	movs	r1, #0
1a003610:	2024      	movs	r0, #36	; 0x24
1a003612:	f7ff fe99 	bl	1a003348 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003616:	2100      	movs	r1, #0
1a003618:	2025      	movs	r0, #37	; 0x25
1a00361a:	f7ff fe95 	bl	1a003348 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00361e:	2100      	movs	r1, #0
1a003620:	2026      	movs	r0, #38	; 0x26
1a003622:	f7ff fe91 	bl	1a003348 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003626:	2100      	movs	r1, #0
1a003628:	2027      	movs	r0, #39	; 0x27
1a00362a:	f7ff fe8d 	bl	1a003348 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00362e:	2101      	movs	r1, #1
1a003630:	2028      	movs	r0, #40	; 0x28
1a003632:	f7ff fe89 	bl	1a003348 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003636:	2101      	movs	r1, #1
1a003638:	2029      	movs	r0, #41	; 0x29
1a00363a:	f7ff fe85 	bl	1a003348 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00363e:	2101      	movs	r1, #1
1a003640:	202a      	movs	r0, #42	; 0x2a
1a003642:	f7ff fe81 	bl	1a003348 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003646:	2101      	movs	r1, #1
1a003648:	202b      	movs	r0, #43	; 0x2b
1a00364a:	f7ff fe7d 	bl	1a003348 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00364e:	2101      	movs	r1, #1
1a003650:	202c      	movs	r0, #44	; 0x2c
1a003652:	f7ff fe79 	bl	1a003348 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003656:	2101      	movs	r1, #1
1a003658:	202d      	movs	r0, #45	; 0x2d
1a00365a:	f7ff fe75 	bl	1a003348 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00365e:	bd08      	pop	{r3, pc}
1a003660:	10002c10 	.word	0x10002c10

1a003664 <__aeabi_uldivmod>:
1a003664:	b953      	cbnz	r3, 1a00367c <__aeabi_uldivmod+0x18>
1a003666:	b94a      	cbnz	r2, 1a00367c <__aeabi_uldivmod+0x18>
1a003668:	2900      	cmp	r1, #0
1a00366a:	bf08      	it	eq
1a00366c:	2800      	cmpeq	r0, #0
1a00366e:	bf1c      	itt	ne
1a003670:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003674:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003678:	f000 b974 	b.w	1a003964 <__aeabi_idiv0>
1a00367c:	f1ad 0c08 	sub.w	ip, sp, #8
1a003680:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003684:	f000 f806 	bl	1a003694 <__udivmoddi4>
1a003688:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00368c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003690:	b004      	add	sp, #16
1a003692:	4770      	bx	lr

1a003694 <__udivmoddi4>:
1a003694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003698:	9e08      	ldr	r6, [sp, #32]
1a00369a:	4604      	mov	r4, r0
1a00369c:	4688      	mov	r8, r1
1a00369e:	2b00      	cmp	r3, #0
1a0036a0:	f040 8085 	bne.w	1a0037ae <__udivmoddi4+0x11a>
1a0036a4:	428a      	cmp	r2, r1
1a0036a6:	4615      	mov	r5, r2
1a0036a8:	d948      	bls.n	1a00373c <__udivmoddi4+0xa8>
1a0036aa:	fab2 f282 	clz	r2, r2
1a0036ae:	b14a      	cbz	r2, 1a0036c4 <__udivmoddi4+0x30>
1a0036b0:	f1c2 0720 	rsb	r7, r2, #32
1a0036b4:	fa01 f302 	lsl.w	r3, r1, r2
1a0036b8:	fa20 f707 	lsr.w	r7, r0, r7
1a0036bc:	4095      	lsls	r5, r2
1a0036be:	ea47 0803 	orr.w	r8, r7, r3
1a0036c2:	4094      	lsls	r4, r2
1a0036c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0036c8:	0c23      	lsrs	r3, r4, #16
1a0036ca:	fbb8 f7fe 	udiv	r7, r8, lr
1a0036ce:	fa1f fc85 	uxth.w	ip, r5
1a0036d2:	fb0e 8817 	mls	r8, lr, r7, r8
1a0036d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0036da:	fb07 f10c 	mul.w	r1, r7, ip
1a0036de:	4299      	cmp	r1, r3
1a0036e0:	d909      	bls.n	1a0036f6 <__udivmoddi4+0x62>
1a0036e2:	18eb      	adds	r3, r5, r3
1a0036e4:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0036e8:	f080 80e3 	bcs.w	1a0038b2 <__udivmoddi4+0x21e>
1a0036ec:	4299      	cmp	r1, r3
1a0036ee:	f240 80e0 	bls.w	1a0038b2 <__udivmoddi4+0x21e>
1a0036f2:	3f02      	subs	r7, #2
1a0036f4:	442b      	add	r3, r5
1a0036f6:	1a5b      	subs	r3, r3, r1
1a0036f8:	b2a4      	uxth	r4, r4
1a0036fa:	fbb3 f0fe 	udiv	r0, r3, lr
1a0036fe:	fb0e 3310 	mls	r3, lr, r0, r3
1a003702:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003706:	fb00 fc0c 	mul.w	ip, r0, ip
1a00370a:	45a4      	cmp	ip, r4
1a00370c:	d909      	bls.n	1a003722 <__udivmoddi4+0x8e>
1a00370e:	192c      	adds	r4, r5, r4
1a003710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003714:	f080 80cb 	bcs.w	1a0038ae <__udivmoddi4+0x21a>
1a003718:	45a4      	cmp	ip, r4
1a00371a:	f240 80c8 	bls.w	1a0038ae <__udivmoddi4+0x21a>
1a00371e:	3802      	subs	r0, #2
1a003720:	442c      	add	r4, r5
1a003722:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003726:	eba4 040c 	sub.w	r4, r4, ip
1a00372a:	2700      	movs	r7, #0
1a00372c:	b11e      	cbz	r6, 1a003736 <__udivmoddi4+0xa2>
1a00372e:	40d4      	lsrs	r4, r2
1a003730:	2300      	movs	r3, #0
1a003732:	e9c6 4300 	strd	r4, r3, [r6]
1a003736:	4639      	mov	r1, r7
1a003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00373c:	2a00      	cmp	r2, #0
1a00373e:	d053      	beq.n	1a0037e8 <__udivmoddi4+0x154>
1a003740:	fab2 f282 	clz	r2, r2
1a003744:	2a00      	cmp	r2, #0
1a003746:	f040 80b6 	bne.w	1a0038b6 <__udivmoddi4+0x222>
1a00374a:	1b49      	subs	r1, r1, r5
1a00374c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003750:	fa1f f885 	uxth.w	r8, r5
1a003754:	2701      	movs	r7, #1
1a003756:	fbb1 fcfe 	udiv	ip, r1, lr
1a00375a:	0c23      	lsrs	r3, r4, #16
1a00375c:	fb0e 111c 	mls	r1, lr, ip, r1
1a003760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003764:	fb08 f10c 	mul.w	r1, r8, ip
1a003768:	4299      	cmp	r1, r3
1a00376a:	d907      	bls.n	1a00377c <__udivmoddi4+0xe8>
1a00376c:	18eb      	adds	r3, r5, r3
1a00376e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003772:	d202      	bcs.n	1a00377a <__udivmoddi4+0xe6>
1a003774:	4299      	cmp	r1, r3
1a003776:	f200 80ec 	bhi.w	1a003952 <__udivmoddi4+0x2be>
1a00377a:	4684      	mov	ip, r0
1a00377c:	1a59      	subs	r1, r3, r1
1a00377e:	b2a3      	uxth	r3, r4
1a003780:	fbb1 f0fe 	udiv	r0, r1, lr
1a003784:	fb0e 1410 	mls	r4, lr, r0, r1
1a003788:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00378c:	fb08 f800 	mul.w	r8, r8, r0
1a003790:	45a0      	cmp	r8, r4
1a003792:	d907      	bls.n	1a0037a4 <__udivmoddi4+0x110>
1a003794:	192c      	adds	r4, r5, r4
1a003796:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00379a:	d202      	bcs.n	1a0037a2 <__udivmoddi4+0x10e>
1a00379c:	45a0      	cmp	r8, r4
1a00379e:	f200 80dc 	bhi.w	1a00395a <__udivmoddi4+0x2c6>
1a0037a2:	4618      	mov	r0, r3
1a0037a4:	eba4 0408 	sub.w	r4, r4, r8
1a0037a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0037ac:	e7be      	b.n	1a00372c <__udivmoddi4+0x98>
1a0037ae:	428b      	cmp	r3, r1
1a0037b0:	d908      	bls.n	1a0037c4 <__udivmoddi4+0x130>
1a0037b2:	2e00      	cmp	r6, #0
1a0037b4:	d078      	beq.n	1a0038a8 <__udivmoddi4+0x214>
1a0037b6:	2700      	movs	r7, #0
1a0037b8:	e9c6 0100 	strd	r0, r1, [r6]
1a0037bc:	4638      	mov	r0, r7
1a0037be:	4639      	mov	r1, r7
1a0037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0037c4:	fab3 f783 	clz	r7, r3
1a0037c8:	b97f      	cbnz	r7, 1a0037ea <__udivmoddi4+0x156>
1a0037ca:	428b      	cmp	r3, r1
1a0037cc:	d302      	bcc.n	1a0037d4 <__udivmoddi4+0x140>
1a0037ce:	4282      	cmp	r2, r0
1a0037d0:	f200 80bd 	bhi.w	1a00394e <__udivmoddi4+0x2ba>
1a0037d4:	1a84      	subs	r4, r0, r2
1a0037d6:	eb61 0303 	sbc.w	r3, r1, r3
1a0037da:	2001      	movs	r0, #1
1a0037dc:	4698      	mov	r8, r3
1a0037de:	2e00      	cmp	r6, #0
1a0037e0:	d0a9      	beq.n	1a003736 <__udivmoddi4+0xa2>
1a0037e2:	e9c6 4800 	strd	r4, r8, [r6]
1a0037e6:	e7a6      	b.n	1a003736 <__udivmoddi4+0xa2>
1a0037e8:	deff      	udf	#255	; 0xff
1a0037ea:	f1c7 0520 	rsb	r5, r7, #32
1a0037ee:	40bb      	lsls	r3, r7
1a0037f0:	fa22 fc05 	lsr.w	ip, r2, r5
1a0037f4:	ea4c 0c03 	orr.w	ip, ip, r3
1a0037f8:	fa01 f407 	lsl.w	r4, r1, r7
1a0037fc:	fa20 f805 	lsr.w	r8, r0, r5
1a003800:	fa21 f305 	lsr.w	r3, r1, r5
1a003804:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a003808:	ea48 0404 	orr.w	r4, r8, r4
1a00380c:	fbb3 f9fe 	udiv	r9, r3, lr
1a003810:	0c21      	lsrs	r1, r4, #16
1a003812:	fb0e 3319 	mls	r3, lr, r9, r3
1a003816:	fa1f f88c 	uxth.w	r8, ip
1a00381a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00381e:	fb09 fa08 	mul.w	sl, r9, r8
1a003822:	459a      	cmp	sl, r3
1a003824:	fa02 f207 	lsl.w	r2, r2, r7
1a003828:	fa00 f107 	lsl.w	r1, r0, r7
1a00382c:	d90b      	bls.n	1a003846 <__udivmoddi4+0x1b2>
1a00382e:	eb1c 0303 	adds.w	r3, ip, r3
1a003832:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003836:	f080 8088 	bcs.w	1a00394a <__udivmoddi4+0x2b6>
1a00383a:	459a      	cmp	sl, r3
1a00383c:	f240 8085 	bls.w	1a00394a <__udivmoddi4+0x2b6>
1a003840:	f1a9 0902 	sub.w	r9, r9, #2
1a003844:	4463      	add	r3, ip
1a003846:	eba3 030a 	sub.w	r3, r3, sl
1a00384a:	b2a4      	uxth	r4, r4
1a00384c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003850:	fb0e 3310 	mls	r3, lr, r0, r3
1a003854:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003858:	fb00 f808 	mul.w	r8, r0, r8
1a00385c:	45a0      	cmp	r8, r4
1a00385e:	d908      	bls.n	1a003872 <__udivmoddi4+0x1de>
1a003860:	eb1c 0404 	adds.w	r4, ip, r4
1a003864:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003868:	d26b      	bcs.n	1a003942 <__udivmoddi4+0x2ae>
1a00386a:	45a0      	cmp	r8, r4
1a00386c:	d969      	bls.n	1a003942 <__udivmoddi4+0x2ae>
1a00386e:	3802      	subs	r0, #2
1a003870:	4464      	add	r4, ip
1a003872:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003876:	eba4 0408 	sub.w	r4, r4, r8
1a00387a:	fba0 8902 	umull	r8, r9, r0, r2
1a00387e:	454c      	cmp	r4, r9
1a003880:	46c6      	mov	lr, r8
1a003882:	464b      	mov	r3, r9
1a003884:	d354      	bcc.n	1a003930 <__udivmoddi4+0x29c>
1a003886:	d051      	beq.n	1a00392c <__udivmoddi4+0x298>
1a003888:	2e00      	cmp	r6, #0
1a00388a:	d069      	beq.n	1a003960 <__udivmoddi4+0x2cc>
1a00388c:	ebb1 020e 	subs.w	r2, r1, lr
1a003890:	eb64 0403 	sbc.w	r4, r4, r3
1a003894:	fa04 f505 	lsl.w	r5, r4, r5
1a003898:	fa22 f307 	lsr.w	r3, r2, r7
1a00389c:	40fc      	lsrs	r4, r7
1a00389e:	431d      	orrs	r5, r3
1a0038a0:	e9c6 5400 	strd	r5, r4, [r6]
1a0038a4:	2700      	movs	r7, #0
1a0038a6:	e746      	b.n	1a003736 <__udivmoddi4+0xa2>
1a0038a8:	4637      	mov	r7, r6
1a0038aa:	4630      	mov	r0, r6
1a0038ac:	e743      	b.n	1a003736 <__udivmoddi4+0xa2>
1a0038ae:	4618      	mov	r0, r3
1a0038b0:	e737      	b.n	1a003722 <__udivmoddi4+0x8e>
1a0038b2:	4607      	mov	r7, r0
1a0038b4:	e71f      	b.n	1a0036f6 <__udivmoddi4+0x62>
1a0038b6:	f1c2 0320 	rsb	r3, r2, #32
1a0038ba:	fa20 f703 	lsr.w	r7, r0, r3
1a0038be:	4095      	lsls	r5, r2
1a0038c0:	fa01 f002 	lsl.w	r0, r1, r2
1a0038c4:	fa21 f303 	lsr.w	r3, r1, r3
1a0038c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0038cc:	4338      	orrs	r0, r7
1a0038ce:	0c01      	lsrs	r1, r0, #16
1a0038d0:	fbb3 f7fe 	udiv	r7, r3, lr
1a0038d4:	fa1f f885 	uxth.w	r8, r5
1a0038d8:	fb0e 3317 	mls	r3, lr, r7, r3
1a0038dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0038e0:	fb07 f308 	mul.w	r3, r7, r8
1a0038e4:	428b      	cmp	r3, r1
1a0038e6:	fa04 f402 	lsl.w	r4, r4, r2
1a0038ea:	d907      	bls.n	1a0038fc <__udivmoddi4+0x268>
1a0038ec:	1869      	adds	r1, r5, r1
1a0038ee:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0038f2:	d228      	bcs.n	1a003946 <__udivmoddi4+0x2b2>
1a0038f4:	428b      	cmp	r3, r1
1a0038f6:	d926      	bls.n	1a003946 <__udivmoddi4+0x2b2>
1a0038f8:	3f02      	subs	r7, #2
1a0038fa:	4429      	add	r1, r5
1a0038fc:	1acb      	subs	r3, r1, r3
1a0038fe:	b281      	uxth	r1, r0
1a003900:	fbb3 f0fe 	udiv	r0, r3, lr
1a003904:	fb0e 3310 	mls	r3, lr, r0, r3
1a003908:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00390c:	fb00 f308 	mul.w	r3, r0, r8
1a003910:	428b      	cmp	r3, r1
1a003912:	d907      	bls.n	1a003924 <__udivmoddi4+0x290>
1a003914:	1869      	adds	r1, r5, r1
1a003916:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00391a:	d210      	bcs.n	1a00393e <__udivmoddi4+0x2aa>
1a00391c:	428b      	cmp	r3, r1
1a00391e:	d90e      	bls.n	1a00393e <__udivmoddi4+0x2aa>
1a003920:	3802      	subs	r0, #2
1a003922:	4429      	add	r1, r5
1a003924:	1ac9      	subs	r1, r1, r3
1a003926:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00392a:	e714      	b.n	1a003756 <__udivmoddi4+0xc2>
1a00392c:	4541      	cmp	r1, r8
1a00392e:	d2ab      	bcs.n	1a003888 <__udivmoddi4+0x1f4>
1a003930:	ebb8 0e02 	subs.w	lr, r8, r2
1a003934:	eb69 020c 	sbc.w	r2, r9, ip
1a003938:	3801      	subs	r0, #1
1a00393a:	4613      	mov	r3, r2
1a00393c:	e7a4      	b.n	1a003888 <__udivmoddi4+0x1f4>
1a00393e:	4660      	mov	r0, ip
1a003940:	e7f0      	b.n	1a003924 <__udivmoddi4+0x290>
1a003942:	4618      	mov	r0, r3
1a003944:	e795      	b.n	1a003872 <__udivmoddi4+0x1de>
1a003946:	4667      	mov	r7, ip
1a003948:	e7d8      	b.n	1a0038fc <__udivmoddi4+0x268>
1a00394a:	4681      	mov	r9, r0
1a00394c:	e77b      	b.n	1a003846 <__udivmoddi4+0x1b2>
1a00394e:	4638      	mov	r0, r7
1a003950:	e745      	b.n	1a0037de <__udivmoddi4+0x14a>
1a003952:	f1ac 0c02 	sub.w	ip, ip, #2
1a003956:	442b      	add	r3, r5
1a003958:	e710      	b.n	1a00377c <__udivmoddi4+0xe8>
1a00395a:	3802      	subs	r0, #2
1a00395c:	442c      	add	r4, r5
1a00395e:	e721      	b.n	1a0037a4 <__udivmoddi4+0x110>
1a003960:	4637      	mov	r7, r6
1a003962:	e6e8      	b.n	1a003736 <__udivmoddi4+0xa2>

1a003964 <__aeabi_idiv0>:
1a003964:	4770      	bx	lr
1a003966:	bf00      	nop

1a003968 <__sflush_r>:
1a003968:	898a      	ldrh	r2, [r1, #12]
1a00396a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00396e:	4605      	mov	r5, r0
1a003970:	0710      	lsls	r0, r2, #28
1a003972:	460c      	mov	r4, r1
1a003974:	d458      	bmi.n	1a003a28 <__sflush_r+0xc0>
1a003976:	684b      	ldr	r3, [r1, #4]
1a003978:	2b00      	cmp	r3, #0
1a00397a:	dc05      	bgt.n	1a003988 <__sflush_r+0x20>
1a00397c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00397e:	2b00      	cmp	r3, #0
1a003980:	dc02      	bgt.n	1a003988 <__sflush_r+0x20>
1a003982:	2000      	movs	r0, #0
1a003984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00398a:	2e00      	cmp	r6, #0
1a00398c:	d0f9      	beq.n	1a003982 <__sflush_r+0x1a>
1a00398e:	2300      	movs	r3, #0
1a003990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003994:	682f      	ldr	r7, [r5, #0]
1a003996:	602b      	str	r3, [r5, #0]
1a003998:	d032      	beq.n	1a003a00 <__sflush_r+0x98>
1a00399a:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a00399c:	89a3      	ldrh	r3, [r4, #12]
1a00399e:	075a      	lsls	r2, r3, #29
1a0039a0:	d505      	bpl.n	1a0039ae <__sflush_r+0x46>
1a0039a2:	6863      	ldr	r3, [r4, #4]
1a0039a4:	1ac0      	subs	r0, r0, r3
1a0039a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0039a8:	b10b      	cbz	r3, 1a0039ae <__sflush_r+0x46>
1a0039aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0039ac:	1ac0      	subs	r0, r0, r3
1a0039ae:	2300      	movs	r3, #0
1a0039b0:	4602      	mov	r2, r0
1a0039b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0039b4:	6a21      	ldr	r1, [r4, #32]
1a0039b6:	4628      	mov	r0, r5
1a0039b8:	47b0      	blx	r6
1a0039ba:	1c43      	adds	r3, r0, #1
1a0039bc:	89a3      	ldrh	r3, [r4, #12]
1a0039be:	d106      	bne.n	1a0039ce <__sflush_r+0x66>
1a0039c0:	6829      	ldr	r1, [r5, #0]
1a0039c2:	291d      	cmp	r1, #29
1a0039c4:	d849      	bhi.n	1a003a5a <__sflush_r+0xf2>
1a0039c6:	4a2a      	ldr	r2, [pc, #168]	; (1a003a70 <__sflush_r+0x108>)
1a0039c8:	40ca      	lsrs	r2, r1
1a0039ca:	07d6      	lsls	r6, r2, #31
1a0039cc:	d545      	bpl.n	1a003a5a <__sflush_r+0xf2>
1a0039ce:	2200      	movs	r2, #0
1a0039d0:	6062      	str	r2, [r4, #4]
1a0039d2:	04d9      	lsls	r1, r3, #19
1a0039d4:	6922      	ldr	r2, [r4, #16]
1a0039d6:	6022      	str	r2, [r4, #0]
1a0039d8:	d504      	bpl.n	1a0039e4 <__sflush_r+0x7c>
1a0039da:	1c42      	adds	r2, r0, #1
1a0039dc:	d101      	bne.n	1a0039e2 <__sflush_r+0x7a>
1a0039de:	682b      	ldr	r3, [r5, #0]
1a0039e0:	b903      	cbnz	r3, 1a0039e4 <__sflush_r+0x7c>
1a0039e2:	6560      	str	r0, [r4, #84]	; 0x54
1a0039e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0039e6:	602f      	str	r7, [r5, #0]
1a0039e8:	2900      	cmp	r1, #0
1a0039ea:	d0ca      	beq.n	1a003982 <__sflush_r+0x1a>
1a0039ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0039f0:	4299      	cmp	r1, r3
1a0039f2:	d002      	beq.n	1a0039fa <__sflush_r+0x92>
1a0039f4:	4628      	mov	r0, r5
1a0039f6:	f000 f9ab 	bl	1a003d50 <_free_r>
1a0039fa:	2000      	movs	r0, #0
1a0039fc:	6360      	str	r0, [r4, #52]	; 0x34
1a0039fe:	e7c1      	b.n	1a003984 <__sflush_r+0x1c>
1a003a00:	6a21      	ldr	r1, [r4, #32]
1a003a02:	2301      	movs	r3, #1
1a003a04:	4628      	mov	r0, r5
1a003a06:	47b0      	blx	r6
1a003a08:	1c41      	adds	r1, r0, #1
1a003a0a:	d1c7      	bne.n	1a00399c <__sflush_r+0x34>
1a003a0c:	682b      	ldr	r3, [r5, #0]
1a003a0e:	2b00      	cmp	r3, #0
1a003a10:	d0c4      	beq.n	1a00399c <__sflush_r+0x34>
1a003a12:	2b1d      	cmp	r3, #29
1a003a14:	d001      	beq.n	1a003a1a <__sflush_r+0xb2>
1a003a16:	2b16      	cmp	r3, #22
1a003a18:	d101      	bne.n	1a003a1e <__sflush_r+0xb6>
1a003a1a:	602f      	str	r7, [r5, #0]
1a003a1c:	e7b1      	b.n	1a003982 <__sflush_r+0x1a>
1a003a1e:	89a3      	ldrh	r3, [r4, #12]
1a003a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003a24:	81a3      	strh	r3, [r4, #12]
1a003a26:	e7ad      	b.n	1a003984 <__sflush_r+0x1c>
1a003a28:	690f      	ldr	r7, [r1, #16]
1a003a2a:	2f00      	cmp	r7, #0
1a003a2c:	d0a9      	beq.n	1a003982 <__sflush_r+0x1a>
1a003a2e:	0793      	lsls	r3, r2, #30
1a003a30:	680e      	ldr	r6, [r1, #0]
1a003a32:	bf08      	it	eq
1a003a34:	694b      	ldreq	r3, [r1, #20]
1a003a36:	600f      	str	r7, [r1, #0]
1a003a38:	bf18      	it	ne
1a003a3a:	2300      	movne	r3, #0
1a003a3c:	eba6 0807 	sub.w	r8, r6, r7
1a003a40:	608b      	str	r3, [r1, #8]
1a003a42:	f1b8 0f00 	cmp.w	r8, #0
1a003a46:	dd9c      	ble.n	1a003982 <__sflush_r+0x1a>
1a003a48:	4643      	mov	r3, r8
1a003a4a:	463a      	mov	r2, r7
1a003a4c:	6a21      	ldr	r1, [r4, #32]
1a003a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003a50:	4628      	mov	r0, r5
1a003a52:	47b0      	blx	r6
1a003a54:	2800      	cmp	r0, #0
1a003a56:	dc06      	bgt.n	1a003a66 <__sflush_r+0xfe>
1a003a58:	89a3      	ldrh	r3, [r4, #12]
1a003a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003a5e:	81a3      	strh	r3, [r4, #12]
1a003a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a64:	e78e      	b.n	1a003984 <__sflush_r+0x1c>
1a003a66:	4407      	add	r7, r0
1a003a68:	eba8 0800 	sub.w	r8, r8, r0
1a003a6c:	e7e9      	b.n	1a003a42 <__sflush_r+0xda>
1a003a6e:	bf00      	nop
1a003a70:	20400001 	.word	0x20400001

1a003a74 <_fflush_r>:
1a003a74:	b538      	push	{r3, r4, r5, lr}
1a003a76:	690b      	ldr	r3, [r1, #16]
1a003a78:	4605      	mov	r5, r0
1a003a7a:	460c      	mov	r4, r1
1a003a7c:	b913      	cbnz	r3, 1a003a84 <_fflush_r+0x10>
1a003a7e:	2500      	movs	r5, #0
1a003a80:	4628      	mov	r0, r5
1a003a82:	bd38      	pop	{r3, r4, r5, pc}
1a003a84:	b118      	cbz	r0, 1a003a8e <_fflush_r+0x1a>
1a003a86:	6983      	ldr	r3, [r0, #24]
1a003a88:	b90b      	cbnz	r3, 1a003a8e <_fflush_r+0x1a>
1a003a8a:	f000 f887 	bl	1a003b9c <__sinit>
1a003a8e:	4b14      	ldr	r3, [pc, #80]	; (1a003ae0 <_fflush_r+0x6c>)
1a003a90:	429c      	cmp	r4, r3
1a003a92:	d11b      	bne.n	1a003acc <_fflush_r+0x58>
1a003a94:	686c      	ldr	r4, [r5, #4]
1a003a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003a9a:	2b00      	cmp	r3, #0
1a003a9c:	d0ef      	beq.n	1a003a7e <_fflush_r+0xa>
1a003a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003aa0:	07d0      	lsls	r0, r2, #31
1a003aa2:	d404      	bmi.n	1a003aae <_fflush_r+0x3a>
1a003aa4:	0599      	lsls	r1, r3, #22
1a003aa6:	d402      	bmi.n	1a003aae <_fflush_r+0x3a>
1a003aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003aaa:	f000 f938 	bl	1a003d1e <__retarget_lock_acquire_recursive>
1a003aae:	4628      	mov	r0, r5
1a003ab0:	4621      	mov	r1, r4
1a003ab2:	f7ff ff59 	bl	1a003968 <__sflush_r>
1a003ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003ab8:	07da      	lsls	r2, r3, #31
1a003aba:	4605      	mov	r5, r0
1a003abc:	d4e0      	bmi.n	1a003a80 <_fflush_r+0xc>
1a003abe:	89a3      	ldrh	r3, [r4, #12]
1a003ac0:	059b      	lsls	r3, r3, #22
1a003ac2:	d4dd      	bmi.n	1a003a80 <_fflush_r+0xc>
1a003ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003ac6:	f000 f92b 	bl	1a003d20 <__retarget_lock_release_recursive>
1a003aca:	e7d9      	b.n	1a003a80 <_fflush_r+0xc>
1a003acc:	4b05      	ldr	r3, [pc, #20]	; (1a003ae4 <_fflush_r+0x70>)
1a003ace:	429c      	cmp	r4, r3
1a003ad0:	d101      	bne.n	1a003ad6 <_fflush_r+0x62>
1a003ad2:	68ac      	ldr	r4, [r5, #8]
1a003ad4:	e7df      	b.n	1a003a96 <_fflush_r+0x22>
1a003ad6:	4b04      	ldr	r3, [pc, #16]	; (1a003ae8 <_fflush_r+0x74>)
1a003ad8:	429c      	cmp	r4, r3
1a003ada:	bf08      	it	eq
1a003adc:	68ec      	ldreq	r4, [r5, #12]
1a003ade:	e7da      	b.n	1a003a96 <_fflush_r+0x22>
1a003ae0:	1a005064 	.word	0x1a005064
1a003ae4:	1a005084 	.word	0x1a005084
1a003ae8:	1a005044 	.word	0x1a005044

1a003aec <std>:
1a003aec:	2300      	movs	r3, #0
1a003aee:	b510      	push	{r4, lr}
1a003af0:	4604      	mov	r4, r0
1a003af2:	e9c0 3300 	strd	r3, r3, [r0]
1a003af6:	6083      	str	r3, [r0, #8]
1a003af8:	8181      	strh	r1, [r0, #12]
1a003afa:	6643      	str	r3, [r0, #100]	; 0x64
1a003afc:	81c2      	strh	r2, [r0, #14]
1a003afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003b02:	6183      	str	r3, [r0, #24]
1a003b04:	4619      	mov	r1, r3
1a003b06:	2208      	movs	r2, #8
1a003b08:	305c      	adds	r0, #92	; 0x5c
1a003b0a:	f000 f918 	bl	1a003d3e <memset>
1a003b0e:	4b05      	ldr	r3, [pc, #20]	; (1a003b24 <std+0x38>)
1a003b10:	6263      	str	r3, [r4, #36]	; 0x24
1a003b12:	4b05      	ldr	r3, [pc, #20]	; (1a003b28 <std+0x3c>)
1a003b14:	62a3      	str	r3, [r4, #40]	; 0x28
1a003b16:	4b05      	ldr	r3, [pc, #20]	; (1a003b2c <std+0x40>)
1a003b18:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003b1a:	4b05      	ldr	r3, [pc, #20]	; (1a003b30 <std+0x44>)
1a003b1c:	6224      	str	r4, [r4, #32]
1a003b1e:	6323      	str	r3, [r4, #48]	; 0x30
1a003b20:	bd10      	pop	{r4, pc}
1a003b22:	bf00      	nop
1a003b24:	1a0045b5 	.word	0x1a0045b5
1a003b28:	1a0045d7 	.word	0x1a0045d7
1a003b2c:	1a00460f 	.word	0x1a00460f
1a003b30:	1a004633 	.word	0x1a004633

1a003b34 <_cleanup_r>:
1a003b34:	4901      	ldr	r1, [pc, #4]	; (1a003b3c <_cleanup_r+0x8>)
1a003b36:	f000 b8af 	b.w	1a003c98 <_fwalk_reent>
1a003b3a:	bf00      	nop
1a003b3c:	1a003a75 	.word	0x1a003a75

1a003b40 <__sfmoreglue>:
1a003b40:	b570      	push	{r4, r5, r6, lr}
1a003b42:	1e4a      	subs	r2, r1, #1
1a003b44:	2568      	movs	r5, #104	; 0x68
1a003b46:	4355      	muls	r5, r2
1a003b48:	460e      	mov	r6, r1
1a003b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003b4e:	f000 f94d 	bl	1a003dec <_malloc_r>
1a003b52:	4604      	mov	r4, r0
1a003b54:	b140      	cbz	r0, 1a003b68 <__sfmoreglue+0x28>
1a003b56:	2100      	movs	r1, #0
1a003b58:	e9c0 1600 	strd	r1, r6, [r0]
1a003b5c:	300c      	adds	r0, #12
1a003b5e:	60a0      	str	r0, [r4, #8]
1a003b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003b64:	f000 f8eb 	bl	1a003d3e <memset>
1a003b68:	4620      	mov	r0, r4
1a003b6a:	bd70      	pop	{r4, r5, r6, pc}

1a003b6c <__sfp_lock_acquire>:
1a003b6c:	4801      	ldr	r0, [pc, #4]	; (1a003b74 <__sfp_lock_acquire+0x8>)
1a003b6e:	f000 b8d6 	b.w	1a003d1e <__retarget_lock_acquire_recursive>
1a003b72:	bf00      	nop
1a003b74:	10002c20 	.word	0x10002c20

1a003b78 <__sfp_lock_release>:
1a003b78:	4801      	ldr	r0, [pc, #4]	; (1a003b80 <__sfp_lock_release+0x8>)
1a003b7a:	f000 b8d1 	b.w	1a003d20 <__retarget_lock_release_recursive>
1a003b7e:	bf00      	nop
1a003b80:	10002c20 	.word	0x10002c20

1a003b84 <__sinit_lock_acquire>:
1a003b84:	4801      	ldr	r0, [pc, #4]	; (1a003b8c <__sinit_lock_acquire+0x8>)
1a003b86:	f000 b8ca 	b.w	1a003d1e <__retarget_lock_acquire_recursive>
1a003b8a:	bf00      	nop
1a003b8c:	10002c1b 	.word	0x10002c1b

1a003b90 <__sinit_lock_release>:
1a003b90:	4801      	ldr	r0, [pc, #4]	; (1a003b98 <__sinit_lock_release+0x8>)
1a003b92:	f000 b8c5 	b.w	1a003d20 <__retarget_lock_release_recursive>
1a003b96:	bf00      	nop
1a003b98:	10002c1b 	.word	0x10002c1b

1a003b9c <__sinit>:
1a003b9c:	b510      	push	{r4, lr}
1a003b9e:	4604      	mov	r4, r0
1a003ba0:	f7ff fff0 	bl	1a003b84 <__sinit_lock_acquire>
1a003ba4:	69a3      	ldr	r3, [r4, #24]
1a003ba6:	b11b      	cbz	r3, 1a003bb0 <__sinit+0x14>
1a003ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003bac:	f7ff bff0 	b.w	1a003b90 <__sinit_lock_release>
1a003bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003bb4:	6523      	str	r3, [r4, #80]	; 0x50
1a003bb6:	4b13      	ldr	r3, [pc, #76]	; (1a003c04 <__sinit+0x68>)
1a003bb8:	4a13      	ldr	r2, [pc, #76]	; (1a003c08 <__sinit+0x6c>)
1a003bba:	681b      	ldr	r3, [r3, #0]
1a003bbc:	62a2      	str	r2, [r4, #40]	; 0x28
1a003bbe:	42a3      	cmp	r3, r4
1a003bc0:	bf04      	itt	eq
1a003bc2:	2301      	moveq	r3, #1
1a003bc4:	61a3      	streq	r3, [r4, #24]
1a003bc6:	4620      	mov	r0, r4
1a003bc8:	f000 f820 	bl	1a003c0c <__sfp>
1a003bcc:	6060      	str	r0, [r4, #4]
1a003bce:	4620      	mov	r0, r4
1a003bd0:	f000 f81c 	bl	1a003c0c <__sfp>
1a003bd4:	60a0      	str	r0, [r4, #8]
1a003bd6:	4620      	mov	r0, r4
1a003bd8:	f000 f818 	bl	1a003c0c <__sfp>
1a003bdc:	2200      	movs	r2, #0
1a003bde:	60e0      	str	r0, [r4, #12]
1a003be0:	2104      	movs	r1, #4
1a003be2:	6860      	ldr	r0, [r4, #4]
1a003be4:	f7ff ff82 	bl	1a003aec <std>
1a003be8:	2201      	movs	r2, #1
1a003bea:	2109      	movs	r1, #9
1a003bec:	68a0      	ldr	r0, [r4, #8]
1a003bee:	f7ff ff7d 	bl	1a003aec <std>
1a003bf2:	2202      	movs	r2, #2
1a003bf4:	2112      	movs	r1, #18
1a003bf6:	68e0      	ldr	r0, [r4, #12]
1a003bf8:	f7ff ff78 	bl	1a003aec <std>
1a003bfc:	2301      	movs	r3, #1
1a003bfe:	61a3      	str	r3, [r4, #24]
1a003c00:	e7d2      	b.n	1a003ba8 <__sinit+0xc>
1a003c02:	bf00      	nop
1a003c04:	1a0050a4 	.word	0x1a0050a4
1a003c08:	1a003b35 	.word	0x1a003b35

1a003c0c <__sfp>:
1a003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c0e:	4607      	mov	r7, r0
1a003c10:	f7ff ffac 	bl	1a003b6c <__sfp_lock_acquire>
1a003c14:	4b1e      	ldr	r3, [pc, #120]	; (1a003c90 <__sfp+0x84>)
1a003c16:	681e      	ldr	r6, [r3, #0]
1a003c18:	69b3      	ldr	r3, [r6, #24]
1a003c1a:	b913      	cbnz	r3, 1a003c22 <__sfp+0x16>
1a003c1c:	4630      	mov	r0, r6
1a003c1e:	f7ff ffbd 	bl	1a003b9c <__sinit>
1a003c22:	3648      	adds	r6, #72	; 0x48
1a003c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003c28:	3b01      	subs	r3, #1
1a003c2a:	d503      	bpl.n	1a003c34 <__sfp+0x28>
1a003c2c:	6833      	ldr	r3, [r6, #0]
1a003c2e:	b30b      	cbz	r3, 1a003c74 <__sfp+0x68>
1a003c30:	6836      	ldr	r6, [r6, #0]
1a003c32:	e7f7      	b.n	1a003c24 <__sfp+0x18>
1a003c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003c38:	b9d5      	cbnz	r5, 1a003c70 <__sfp+0x64>
1a003c3a:	4b16      	ldr	r3, [pc, #88]	; (1a003c94 <__sfp+0x88>)
1a003c3c:	60e3      	str	r3, [r4, #12]
1a003c3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003c42:	6665      	str	r5, [r4, #100]	; 0x64
1a003c44:	f000 f86a 	bl	1a003d1c <__retarget_lock_init_recursive>
1a003c48:	f7ff ff96 	bl	1a003b78 <__sfp_lock_release>
1a003c4c:	6025      	str	r5, [r4, #0]
1a003c4e:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a003c52:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003c56:	61a5      	str	r5, [r4, #24]
1a003c58:	2208      	movs	r2, #8
1a003c5a:	4629      	mov	r1, r5
1a003c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003c60:	f000 f86d 	bl	1a003d3e <memset>
1a003c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003c6c:	4620      	mov	r0, r4
1a003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c70:	3468      	adds	r4, #104	; 0x68
1a003c72:	e7d9      	b.n	1a003c28 <__sfp+0x1c>
1a003c74:	2104      	movs	r1, #4
1a003c76:	4638      	mov	r0, r7
1a003c78:	f7ff ff62 	bl	1a003b40 <__sfmoreglue>
1a003c7c:	4604      	mov	r4, r0
1a003c7e:	6030      	str	r0, [r6, #0]
1a003c80:	2800      	cmp	r0, #0
1a003c82:	d1d5      	bne.n	1a003c30 <__sfp+0x24>
1a003c84:	f7ff ff78 	bl	1a003b78 <__sfp_lock_release>
1a003c88:	230c      	movs	r3, #12
1a003c8a:	603b      	str	r3, [r7, #0]
1a003c8c:	e7ee      	b.n	1a003c6c <__sfp+0x60>
1a003c8e:	bf00      	nop
1a003c90:	1a0050a4 	.word	0x1a0050a4
1a003c94:	ffff0001 	.word	0xffff0001

1a003c98 <_fwalk_reent>:
1a003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003c9c:	4680      	mov	r8, r0
1a003c9e:	4689      	mov	r9, r1
1a003ca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003ca4:	2600      	movs	r6, #0
1a003ca6:	b914      	cbnz	r4, 1a003cae <_fwalk_reent+0x16>
1a003ca8:	4630      	mov	r0, r6
1a003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003cae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003cb2:	3f01      	subs	r7, #1
1a003cb4:	d501      	bpl.n	1a003cba <_fwalk_reent+0x22>
1a003cb6:	6824      	ldr	r4, [r4, #0]
1a003cb8:	e7f5      	b.n	1a003ca6 <_fwalk_reent+0xe>
1a003cba:	89ab      	ldrh	r3, [r5, #12]
1a003cbc:	2b01      	cmp	r3, #1
1a003cbe:	d907      	bls.n	1a003cd0 <_fwalk_reent+0x38>
1a003cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003cc4:	3301      	adds	r3, #1
1a003cc6:	d003      	beq.n	1a003cd0 <_fwalk_reent+0x38>
1a003cc8:	4629      	mov	r1, r5
1a003cca:	4640      	mov	r0, r8
1a003ccc:	47c8      	blx	r9
1a003cce:	4306      	orrs	r6, r0
1a003cd0:	3568      	adds	r5, #104	; 0x68
1a003cd2:	e7ee      	b.n	1a003cb2 <_fwalk_reent+0x1a>

1a003cd4 <__libc_init_array>:
1a003cd4:	b570      	push	{r4, r5, r6, lr}
1a003cd6:	4d0d      	ldr	r5, [pc, #52]	; (1a003d0c <__libc_init_array+0x38>)
1a003cd8:	4c0d      	ldr	r4, [pc, #52]	; (1a003d10 <__libc_init_array+0x3c>)
1a003cda:	1b64      	subs	r4, r4, r5
1a003cdc:	10a4      	asrs	r4, r4, #2
1a003cde:	2600      	movs	r6, #0
1a003ce0:	42a6      	cmp	r6, r4
1a003ce2:	d109      	bne.n	1a003cf8 <__libc_init_array+0x24>
1a003ce4:	4d0b      	ldr	r5, [pc, #44]	; (1a003d14 <__libc_init_array+0x40>)
1a003ce6:	4c0c      	ldr	r4, [pc, #48]	; (1a003d18 <__libc_init_array+0x44>)
1a003ce8:	f7fc fd2b 	bl	1a000742 <_init>
1a003cec:	1b64      	subs	r4, r4, r5
1a003cee:	10a4      	asrs	r4, r4, #2
1a003cf0:	2600      	movs	r6, #0
1a003cf2:	42a6      	cmp	r6, r4
1a003cf4:	d105      	bne.n	1a003d02 <__libc_init_array+0x2e>
1a003cf6:	bd70      	pop	{r4, r5, r6, pc}
1a003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
1a003cfc:	4798      	blx	r3
1a003cfe:	3601      	adds	r6, #1
1a003d00:	e7ee      	b.n	1a003ce0 <__libc_init_array+0xc>
1a003d02:	f855 3b04 	ldr.w	r3, [r5], #4
1a003d06:	4798      	blx	r3
1a003d08:	3601      	adds	r6, #1
1a003d0a:	e7f2      	b.n	1a003cf2 <__libc_init_array+0x1e>
1a003d0c:	1a0050dc 	.word	0x1a0050dc
1a003d10:	1a0050dc 	.word	0x1a0050dc
1a003d14:	1a0050dc 	.word	0x1a0050dc
1a003d18:	1a0050e0 	.word	0x1a0050e0

1a003d1c <__retarget_lock_init_recursive>:
1a003d1c:	4770      	bx	lr

1a003d1e <__retarget_lock_acquire_recursive>:
1a003d1e:	4770      	bx	lr

1a003d20 <__retarget_lock_release_recursive>:
1a003d20:	4770      	bx	lr

1a003d22 <memcpy>:
1a003d22:	440a      	add	r2, r1
1a003d24:	4291      	cmp	r1, r2
1a003d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003d2a:	d100      	bne.n	1a003d2e <memcpy+0xc>
1a003d2c:	4770      	bx	lr
1a003d2e:	b510      	push	{r4, lr}
1a003d30:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003d34:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003d38:	4291      	cmp	r1, r2
1a003d3a:	d1f9      	bne.n	1a003d30 <memcpy+0xe>
1a003d3c:	bd10      	pop	{r4, pc}

1a003d3e <memset>:
1a003d3e:	4402      	add	r2, r0
1a003d40:	4603      	mov	r3, r0
1a003d42:	4293      	cmp	r3, r2
1a003d44:	d100      	bne.n	1a003d48 <memset+0xa>
1a003d46:	4770      	bx	lr
1a003d48:	f803 1b01 	strb.w	r1, [r3], #1
1a003d4c:	e7f9      	b.n	1a003d42 <memset+0x4>
1a003d4e:	Address 0x000000001a003d4e is out of bounds.


1a003d50 <_free_r>:
1a003d50:	b538      	push	{r3, r4, r5, lr}
1a003d52:	4605      	mov	r5, r0
1a003d54:	2900      	cmp	r1, #0
1a003d56:	d045      	beq.n	1a003de4 <_free_r+0x94>
1a003d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003d5c:	1f0c      	subs	r4, r1, #4
1a003d5e:	2b00      	cmp	r3, #0
1a003d60:	bfb8      	it	lt
1a003d62:	18e4      	addlt	r4, r4, r3
1a003d64:	f000 fdfe 	bl	1a004964 <__malloc_lock>
1a003d68:	4a1f      	ldr	r2, [pc, #124]	; (1a003de8 <_free_r+0x98>)
1a003d6a:	6813      	ldr	r3, [r2, #0]
1a003d6c:	4610      	mov	r0, r2
1a003d6e:	b933      	cbnz	r3, 1a003d7e <_free_r+0x2e>
1a003d70:	6063      	str	r3, [r4, #4]
1a003d72:	6014      	str	r4, [r2, #0]
1a003d74:	4628      	mov	r0, r5
1a003d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003d7a:	f000 bdf9 	b.w	1a004970 <__malloc_unlock>
1a003d7e:	42a3      	cmp	r3, r4
1a003d80:	d90c      	bls.n	1a003d9c <_free_r+0x4c>
1a003d82:	6821      	ldr	r1, [r4, #0]
1a003d84:	1862      	adds	r2, r4, r1
1a003d86:	4293      	cmp	r3, r2
1a003d88:	bf04      	itt	eq
1a003d8a:	681a      	ldreq	r2, [r3, #0]
1a003d8c:	685b      	ldreq	r3, [r3, #4]
1a003d8e:	6063      	str	r3, [r4, #4]
1a003d90:	bf04      	itt	eq
1a003d92:	1852      	addeq	r2, r2, r1
1a003d94:	6022      	streq	r2, [r4, #0]
1a003d96:	6004      	str	r4, [r0, #0]
1a003d98:	e7ec      	b.n	1a003d74 <_free_r+0x24>
1a003d9a:	4613      	mov	r3, r2
1a003d9c:	685a      	ldr	r2, [r3, #4]
1a003d9e:	b10a      	cbz	r2, 1a003da4 <_free_r+0x54>
1a003da0:	42a2      	cmp	r2, r4
1a003da2:	d9fa      	bls.n	1a003d9a <_free_r+0x4a>
1a003da4:	6819      	ldr	r1, [r3, #0]
1a003da6:	1858      	adds	r0, r3, r1
1a003da8:	42a0      	cmp	r0, r4
1a003daa:	d10b      	bne.n	1a003dc4 <_free_r+0x74>
1a003dac:	6820      	ldr	r0, [r4, #0]
1a003dae:	4401      	add	r1, r0
1a003db0:	1858      	adds	r0, r3, r1
1a003db2:	4282      	cmp	r2, r0
1a003db4:	6019      	str	r1, [r3, #0]
1a003db6:	d1dd      	bne.n	1a003d74 <_free_r+0x24>
1a003db8:	6810      	ldr	r0, [r2, #0]
1a003dba:	6852      	ldr	r2, [r2, #4]
1a003dbc:	605a      	str	r2, [r3, #4]
1a003dbe:	4401      	add	r1, r0
1a003dc0:	6019      	str	r1, [r3, #0]
1a003dc2:	e7d7      	b.n	1a003d74 <_free_r+0x24>
1a003dc4:	d902      	bls.n	1a003dcc <_free_r+0x7c>
1a003dc6:	230c      	movs	r3, #12
1a003dc8:	602b      	str	r3, [r5, #0]
1a003dca:	e7d3      	b.n	1a003d74 <_free_r+0x24>
1a003dcc:	6820      	ldr	r0, [r4, #0]
1a003dce:	1821      	adds	r1, r4, r0
1a003dd0:	428a      	cmp	r2, r1
1a003dd2:	bf04      	itt	eq
1a003dd4:	6811      	ldreq	r1, [r2, #0]
1a003dd6:	6852      	ldreq	r2, [r2, #4]
1a003dd8:	6062      	str	r2, [r4, #4]
1a003dda:	bf04      	itt	eq
1a003ddc:	1809      	addeq	r1, r1, r0
1a003dde:	6021      	streq	r1, [r4, #0]
1a003de0:	605c      	str	r4, [r3, #4]
1a003de2:	e7c7      	b.n	1a003d74 <_free_r+0x24>
1a003de4:	bd38      	pop	{r3, r4, r5, pc}
1a003de6:	bf00      	nop
1a003de8:	10002af8 	.word	0x10002af8

1a003dec <_malloc_r>:
1a003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003dee:	1ccd      	adds	r5, r1, #3
1a003df0:	f025 0503 	bic.w	r5, r5, #3
1a003df4:	3508      	adds	r5, #8
1a003df6:	2d0c      	cmp	r5, #12
1a003df8:	bf38      	it	cc
1a003dfa:	250c      	movcc	r5, #12
1a003dfc:	2d00      	cmp	r5, #0
1a003dfe:	4606      	mov	r6, r0
1a003e00:	db01      	blt.n	1a003e06 <_malloc_r+0x1a>
1a003e02:	42a9      	cmp	r1, r5
1a003e04:	d903      	bls.n	1a003e0e <_malloc_r+0x22>
1a003e06:	230c      	movs	r3, #12
1a003e08:	6033      	str	r3, [r6, #0]
1a003e0a:	2000      	movs	r0, #0
1a003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003e0e:	f000 fda9 	bl	1a004964 <__malloc_lock>
1a003e12:	4921      	ldr	r1, [pc, #132]	; (1a003e98 <_malloc_r+0xac>)
1a003e14:	680a      	ldr	r2, [r1, #0]
1a003e16:	4614      	mov	r4, r2
1a003e18:	b99c      	cbnz	r4, 1a003e42 <_malloc_r+0x56>
1a003e1a:	4f20      	ldr	r7, [pc, #128]	; (1a003e9c <_malloc_r+0xb0>)
1a003e1c:	683b      	ldr	r3, [r7, #0]
1a003e1e:	b923      	cbnz	r3, 1a003e2a <_malloc_r+0x3e>
1a003e20:	4621      	mov	r1, r4
1a003e22:	4630      	mov	r0, r6
1a003e24:	f7fc fce2 	bl	1a0007ec <_sbrk_r>
1a003e28:	6038      	str	r0, [r7, #0]
1a003e2a:	4629      	mov	r1, r5
1a003e2c:	4630      	mov	r0, r6
1a003e2e:	f7fc fcdd 	bl	1a0007ec <_sbrk_r>
1a003e32:	1c43      	adds	r3, r0, #1
1a003e34:	d123      	bne.n	1a003e7e <_malloc_r+0x92>
1a003e36:	230c      	movs	r3, #12
1a003e38:	6033      	str	r3, [r6, #0]
1a003e3a:	4630      	mov	r0, r6
1a003e3c:	f000 fd98 	bl	1a004970 <__malloc_unlock>
1a003e40:	e7e3      	b.n	1a003e0a <_malloc_r+0x1e>
1a003e42:	6823      	ldr	r3, [r4, #0]
1a003e44:	1b5b      	subs	r3, r3, r5
1a003e46:	d417      	bmi.n	1a003e78 <_malloc_r+0x8c>
1a003e48:	2b0b      	cmp	r3, #11
1a003e4a:	d903      	bls.n	1a003e54 <_malloc_r+0x68>
1a003e4c:	6023      	str	r3, [r4, #0]
1a003e4e:	441c      	add	r4, r3
1a003e50:	6025      	str	r5, [r4, #0]
1a003e52:	e004      	b.n	1a003e5e <_malloc_r+0x72>
1a003e54:	6863      	ldr	r3, [r4, #4]
1a003e56:	42a2      	cmp	r2, r4
1a003e58:	bf0c      	ite	eq
1a003e5a:	600b      	streq	r3, [r1, #0]
1a003e5c:	6053      	strne	r3, [r2, #4]
1a003e5e:	4630      	mov	r0, r6
1a003e60:	f000 fd86 	bl	1a004970 <__malloc_unlock>
1a003e64:	f104 000b 	add.w	r0, r4, #11
1a003e68:	1d23      	adds	r3, r4, #4
1a003e6a:	f020 0007 	bic.w	r0, r0, #7
1a003e6e:	1ac2      	subs	r2, r0, r3
1a003e70:	d0cc      	beq.n	1a003e0c <_malloc_r+0x20>
1a003e72:	1a1b      	subs	r3, r3, r0
1a003e74:	50a3      	str	r3, [r4, r2]
1a003e76:	e7c9      	b.n	1a003e0c <_malloc_r+0x20>
1a003e78:	4622      	mov	r2, r4
1a003e7a:	6864      	ldr	r4, [r4, #4]
1a003e7c:	e7cc      	b.n	1a003e18 <_malloc_r+0x2c>
1a003e7e:	1cc4      	adds	r4, r0, #3
1a003e80:	f024 0403 	bic.w	r4, r4, #3
1a003e84:	42a0      	cmp	r0, r4
1a003e86:	d0e3      	beq.n	1a003e50 <_malloc_r+0x64>
1a003e88:	1a21      	subs	r1, r4, r0
1a003e8a:	4630      	mov	r0, r6
1a003e8c:	f7fc fcae 	bl	1a0007ec <_sbrk_r>
1a003e90:	3001      	adds	r0, #1
1a003e92:	d1dd      	bne.n	1a003e50 <_malloc_r+0x64>
1a003e94:	e7cf      	b.n	1a003e36 <_malloc_r+0x4a>
1a003e96:	bf00      	nop
1a003e98:	10002af8 	.word	0x10002af8
1a003e9c:	10002afc 	.word	0x10002afc

1a003ea0 <__sfputc_r>:
1a003ea0:	6893      	ldr	r3, [r2, #8]
1a003ea2:	3b01      	subs	r3, #1
1a003ea4:	2b00      	cmp	r3, #0
1a003ea6:	b410      	push	{r4}
1a003ea8:	6093      	str	r3, [r2, #8]
1a003eaa:	da08      	bge.n	1a003ebe <__sfputc_r+0x1e>
1a003eac:	6994      	ldr	r4, [r2, #24]
1a003eae:	42a3      	cmp	r3, r4
1a003eb0:	db01      	blt.n	1a003eb6 <__sfputc_r+0x16>
1a003eb2:	290a      	cmp	r1, #10
1a003eb4:	d103      	bne.n	1a003ebe <__sfputc_r+0x1e>
1a003eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003eba:	f000 bbbf 	b.w	1a00463c <__swbuf_r>
1a003ebe:	6813      	ldr	r3, [r2, #0]
1a003ec0:	1c58      	adds	r0, r3, #1
1a003ec2:	6010      	str	r0, [r2, #0]
1a003ec4:	7019      	strb	r1, [r3, #0]
1a003ec6:	4608      	mov	r0, r1
1a003ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003ecc:	4770      	bx	lr

1a003ece <__sfputs_r>:
1a003ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003ed0:	4606      	mov	r6, r0
1a003ed2:	460f      	mov	r7, r1
1a003ed4:	4614      	mov	r4, r2
1a003ed6:	18d5      	adds	r5, r2, r3
1a003ed8:	42ac      	cmp	r4, r5
1a003eda:	d101      	bne.n	1a003ee0 <__sfputs_r+0x12>
1a003edc:	2000      	movs	r0, #0
1a003ede:	e007      	b.n	1a003ef0 <__sfputs_r+0x22>
1a003ee0:	463a      	mov	r2, r7
1a003ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003ee6:	4630      	mov	r0, r6
1a003ee8:	f7ff ffda 	bl	1a003ea0 <__sfputc_r>
1a003eec:	1c43      	adds	r3, r0, #1
1a003eee:	d1f3      	bne.n	1a003ed8 <__sfputs_r+0xa>
1a003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003ef2:	Address 0x000000001a003ef2 is out of bounds.


1a003ef4 <_vfiprintf_r>:
1a003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003ef8:	460d      	mov	r5, r1
1a003efa:	b09d      	sub	sp, #116	; 0x74
1a003efc:	4614      	mov	r4, r2
1a003efe:	461e      	mov	r6, r3
1a003f00:	4607      	mov	r7, r0
1a003f02:	b118      	cbz	r0, 1a003f0c <_vfiprintf_r+0x18>
1a003f04:	6983      	ldr	r3, [r0, #24]
1a003f06:	b90b      	cbnz	r3, 1a003f0c <_vfiprintf_r+0x18>
1a003f08:	f7ff fe48 	bl	1a003b9c <__sinit>
1a003f0c:	4b85      	ldr	r3, [pc, #532]	; (1a004124 <_vfiprintf_r+0x230>)
1a003f0e:	429d      	cmp	r5, r3
1a003f10:	d11b      	bne.n	1a003f4a <_vfiprintf_r+0x56>
1a003f12:	687d      	ldr	r5, [r7, #4]
1a003f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003f16:	07d9      	lsls	r1, r3, #31
1a003f18:	d405      	bmi.n	1a003f26 <_vfiprintf_r+0x32>
1a003f1a:	89ab      	ldrh	r3, [r5, #12]
1a003f1c:	059a      	lsls	r2, r3, #22
1a003f1e:	d402      	bmi.n	1a003f26 <_vfiprintf_r+0x32>
1a003f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003f22:	f7ff fefc 	bl	1a003d1e <__retarget_lock_acquire_recursive>
1a003f26:	89ab      	ldrh	r3, [r5, #12]
1a003f28:	071b      	lsls	r3, r3, #28
1a003f2a:	d501      	bpl.n	1a003f30 <_vfiprintf_r+0x3c>
1a003f2c:	692b      	ldr	r3, [r5, #16]
1a003f2e:	b9eb      	cbnz	r3, 1a003f6c <_vfiprintf_r+0x78>
1a003f30:	4629      	mov	r1, r5
1a003f32:	4638      	mov	r0, r7
1a003f34:	f000 fbd4 	bl	1a0046e0 <__swsetup_r>
1a003f38:	b1c0      	cbz	r0, 1a003f6c <_vfiprintf_r+0x78>
1a003f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003f3c:	07d8      	lsls	r0, r3, #31
1a003f3e:	d50e      	bpl.n	1a003f5e <_vfiprintf_r+0x6a>
1a003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003f44:	b01d      	add	sp, #116	; 0x74
1a003f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003f4a:	4b77      	ldr	r3, [pc, #476]	; (1a004128 <_vfiprintf_r+0x234>)
1a003f4c:	429d      	cmp	r5, r3
1a003f4e:	d101      	bne.n	1a003f54 <_vfiprintf_r+0x60>
1a003f50:	68bd      	ldr	r5, [r7, #8]
1a003f52:	e7df      	b.n	1a003f14 <_vfiprintf_r+0x20>
1a003f54:	4b75      	ldr	r3, [pc, #468]	; (1a00412c <_vfiprintf_r+0x238>)
1a003f56:	429d      	cmp	r5, r3
1a003f58:	bf08      	it	eq
1a003f5a:	68fd      	ldreq	r5, [r7, #12]
1a003f5c:	e7da      	b.n	1a003f14 <_vfiprintf_r+0x20>
1a003f5e:	89ab      	ldrh	r3, [r5, #12]
1a003f60:	0599      	lsls	r1, r3, #22
1a003f62:	d4ed      	bmi.n	1a003f40 <_vfiprintf_r+0x4c>
1a003f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003f66:	f7ff fedb 	bl	1a003d20 <__retarget_lock_release_recursive>
1a003f6a:	e7e9      	b.n	1a003f40 <_vfiprintf_r+0x4c>
1a003f6c:	2300      	movs	r3, #0
1a003f6e:	9309      	str	r3, [sp, #36]	; 0x24
1a003f70:	2320      	movs	r3, #32
1a003f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003f76:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a004130 <_vfiprintf_r+0x23c>
1a003f7a:	9603      	str	r6, [sp, #12]
1a003f7c:	2330      	movs	r3, #48	; 0x30
1a003f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003f82:	f04f 0a01 	mov.w	sl, #1
1a003f86:	4623      	mov	r3, r4
1a003f88:	461e      	mov	r6, r3
1a003f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003f8e:	b10a      	cbz	r2, 1a003f94 <_vfiprintf_r+0xa0>
1a003f90:	2a25      	cmp	r2, #37	; 0x25
1a003f92:	d1f9      	bne.n	1a003f88 <_vfiprintf_r+0x94>
1a003f94:	ebb6 0b04 	subs.w	fp, r6, r4
1a003f98:	d00b      	beq.n	1a003fb2 <_vfiprintf_r+0xbe>
1a003f9a:	465b      	mov	r3, fp
1a003f9c:	4622      	mov	r2, r4
1a003f9e:	4629      	mov	r1, r5
1a003fa0:	4638      	mov	r0, r7
1a003fa2:	f7ff ff94 	bl	1a003ece <__sfputs_r>
1a003fa6:	3001      	adds	r0, #1
1a003fa8:	f000 80a3 	beq.w	1a0040f2 <_vfiprintf_r+0x1fe>
1a003fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fae:	445b      	add	r3, fp
1a003fb0:	9309      	str	r3, [sp, #36]	; 0x24
1a003fb2:	7833      	ldrb	r3, [r6, #0]
1a003fb4:	2b00      	cmp	r3, #0
1a003fb6:	f000 809c 	beq.w	1a0040f2 <_vfiprintf_r+0x1fe>
1a003fba:	2300      	movs	r3, #0
1a003fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003fc4:	3601      	adds	r6, #1
1a003fc6:	9304      	str	r3, [sp, #16]
1a003fc8:	9307      	str	r3, [sp, #28]
1a003fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003fce:	931a      	str	r3, [sp, #104]	; 0x68
1a003fd0:	4634      	mov	r4, r6
1a003fd2:	2205      	movs	r2, #5
1a003fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003fd8:	4855      	ldr	r0, [pc, #340]	; (1a004130 <_vfiprintf_r+0x23c>)
1a003fda:	f000 fc59 	bl	1a004890 <memchr>
1a003fde:	9b04      	ldr	r3, [sp, #16]
1a003fe0:	b9c0      	cbnz	r0, 1a004014 <_vfiprintf_r+0x120>
1a003fe2:	06da      	lsls	r2, r3, #27
1a003fe4:	bf44      	itt	mi
1a003fe6:	2220      	movmi	r2, #32
1a003fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003fec:	0718      	lsls	r0, r3, #28
1a003fee:	bf44      	itt	mi
1a003ff0:	222b      	movmi	r2, #43	; 0x2b
1a003ff2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003ff6:	7832      	ldrb	r2, [r6, #0]
1a003ff8:	2a2a      	cmp	r2, #42	; 0x2a
1a003ffa:	d013      	beq.n	1a004024 <_vfiprintf_r+0x130>
1a003ffc:	9a07      	ldr	r2, [sp, #28]
1a003ffe:	4634      	mov	r4, r6
1a004000:	2000      	movs	r0, #0
1a004002:	260a      	movs	r6, #10
1a004004:	4621      	mov	r1, r4
1a004006:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00400a:	3b30      	subs	r3, #48	; 0x30
1a00400c:	2b09      	cmp	r3, #9
1a00400e:	d94b      	bls.n	1a0040a8 <_vfiprintf_r+0x1b4>
1a004010:	b970      	cbnz	r0, 1a004030 <_vfiprintf_r+0x13c>
1a004012:	e014      	b.n	1a00403e <_vfiprintf_r+0x14a>
1a004014:	eba0 0009 	sub.w	r0, r0, r9
1a004018:	fa0a f000 	lsl.w	r0, sl, r0
1a00401c:	4318      	orrs	r0, r3
1a00401e:	9004      	str	r0, [sp, #16]
1a004020:	4626      	mov	r6, r4
1a004022:	e7d5      	b.n	1a003fd0 <_vfiprintf_r+0xdc>
1a004024:	9a03      	ldr	r2, [sp, #12]
1a004026:	1d11      	adds	r1, r2, #4
1a004028:	6812      	ldr	r2, [r2, #0]
1a00402a:	9103      	str	r1, [sp, #12]
1a00402c:	2a00      	cmp	r2, #0
1a00402e:	db01      	blt.n	1a004034 <_vfiprintf_r+0x140>
1a004030:	9207      	str	r2, [sp, #28]
1a004032:	e004      	b.n	1a00403e <_vfiprintf_r+0x14a>
1a004034:	4252      	negs	r2, r2
1a004036:	f043 0302 	orr.w	r3, r3, #2
1a00403a:	9207      	str	r2, [sp, #28]
1a00403c:	9304      	str	r3, [sp, #16]
1a00403e:	7823      	ldrb	r3, [r4, #0]
1a004040:	2b2e      	cmp	r3, #46	; 0x2e
1a004042:	d10c      	bne.n	1a00405e <_vfiprintf_r+0x16a>
1a004044:	7863      	ldrb	r3, [r4, #1]
1a004046:	2b2a      	cmp	r3, #42	; 0x2a
1a004048:	d133      	bne.n	1a0040b2 <_vfiprintf_r+0x1be>
1a00404a:	9b03      	ldr	r3, [sp, #12]
1a00404c:	1d1a      	adds	r2, r3, #4
1a00404e:	681b      	ldr	r3, [r3, #0]
1a004050:	9203      	str	r2, [sp, #12]
1a004052:	2b00      	cmp	r3, #0
1a004054:	bfb8      	it	lt
1a004056:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00405a:	3402      	adds	r4, #2
1a00405c:	9305      	str	r3, [sp, #20]
1a00405e:	4e35      	ldr	r6, [pc, #212]	; (1a004134 <_vfiprintf_r+0x240>)
1a004060:	7821      	ldrb	r1, [r4, #0]
1a004062:	2203      	movs	r2, #3
1a004064:	4630      	mov	r0, r6
1a004066:	f000 fc13 	bl	1a004890 <memchr>
1a00406a:	b138      	cbz	r0, 1a00407c <_vfiprintf_r+0x188>
1a00406c:	2340      	movs	r3, #64	; 0x40
1a00406e:	1b80      	subs	r0, r0, r6
1a004070:	fa03 f000 	lsl.w	r0, r3, r0
1a004074:	9b04      	ldr	r3, [sp, #16]
1a004076:	4303      	orrs	r3, r0
1a004078:	3401      	adds	r4, #1
1a00407a:	9304      	str	r3, [sp, #16]
1a00407c:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004080:	482d      	ldr	r0, [pc, #180]	; (1a004138 <_vfiprintf_r+0x244>)
1a004082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004086:	2206      	movs	r2, #6
1a004088:	f000 fc02 	bl	1a004890 <memchr>
1a00408c:	2800      	cmp	r0, #0
1a00408e:	d03f      	beq.n	1a004110 <_vfiprintf_r+0x21c>
1a004090:	4b2a      	ldr	r3, [pc, #168]	; (1a00413c <_vfiprintf_r+0x248>)
1a004092:	bb13      	cbnz	r3, 1a0040da <_vfiprintf_r+0x1e6>
1a004094:	9b03      	ldr	r3, [sp, #12]
1a004096:	3307      	adds	r3, #7
1a004098:	f023 0307 	bic.w	r3, r3, #7
1a00409c:	3308      	adds	r3, #8
1a00409e:	9303      	str	r3, [sp, #12]
1a0040a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0040a2:	4443      	add	r3, r8
1a0040a4:	9309      	str	r3, [sp, #36]	; 0x24
1a0040a6:	e76e      	b.n	1a003f86 <_vfiprintf_r+0x92>
1a0040a8:	fb06 3202 	mla	r2, r6, r2, r3
1a0040ac:	2001      	movs	r0, #1
1a0040ae:	460c      	mov	r4, r1
1a0040b0:	e7a8      	b.n	1a004004 <_vfiprintf_r+0x110>
1a0040b2:	2300      	movs	r3, #0
1a0040b4:	3401      	adds	r4, #1
1a0040b6:	9305      	str	r3, [sp, #20]
1a0040b8:	4619      	mov	r1, r3
1a0040ba:	260a      	movs	r6, #10
1a0040bc:	4620      	mov	r0, r4
1a0040be:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0040c2:	3a30      	subs	r2, #48	; 0x30
1a0040c4:	2a09      	cmp	r2, #9
1a0040c6:	d903      	bls.n	1a0040d0 <_vfiprintf_r+0x1dc>
1a0040c8:	2b00      	cmp	r3, #0
1a0040ca:	d0c8      	beq.n	1a00405e <_vfiprintf_r+0x16a>
1a0040cc:	9105      	str	r1, [sp, #20]
1a0040ce:	e7c6      	b.n	1a00405e <_vfiprintf_r+0x16a>
1a0040d0:	fb06 2101 	mla	r1, r6, r1, r2
1a0040d4:	2301      	movs	r3, #1
1a0040d6:	4604      	mov	r4, r0
1a0040d8:	e7f0      	b.n	1a0040bc <_vfiprintf_r+0x1c8>
1a0040da:	ab03      	add	r3, sp, #12
1a0040dc:	9300      	str	r3, [sp, #0]
1a0040de:	462a      	mov	r2, r5
1a0040e0:	4b17      	ldr	r3, [pc, #92]	; (1a004140 <_vfiprintf_r+0x24c>)
1a0040e2:	a904      	add	r1, sp, #16
1a0040e4:	4638      	mov	r0, r7
1a0040e6:	f3af 8000 	nop.w
1a0040ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0040ee:	4680      	mov	r8, r0
1a0040f0:	d1d6      	bne.n	1a0040a0 <_vfiprintf_r+0x1ac>
1a0040f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0040f4:	07d9      	lsls	r1, r3, #31
1a0040f6:	d405      	bmi.n	1a004104 <_vfiprintf_r+0x210>
1a0040f8:	89ab      	ldrh	r3, [r5, #12]
1a0040fa:	059a      	lsls	r2, r3, #22
1a0040fc:	d402      	bmi.n	1a004104 <_vfiprintf_r+0x210>
1a0040fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004100:	f7ff fe0e 	bl	1a003d20 <__retarget_lock_release_recursive>
1a004104:	89ab      	ldrh	r3, [r5, #12]
1a004106:	065b      	lsls	r3, r3, #25
1a004108:	f53f af1a 	bmi.w	1a003f40 <_vfiprintf_r+0x4c>
1a00410c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00410e:	e719      	b.n	1a003f44 <_vfiprintf_r+0x50>
1a004110:	ab03      	add	r3, sp, #12
1a004112:	9300      	str	r3, [sp, #0]
1a004114:	462a      	mov	r2, r5
1a004116:	4b0a      	ldr	r3, [pc, #40]	; (1a004140 <_vfiprintf_r+0x24c>)
1a004118:	a904      	add	r1, sp, #16
1a00411a:	4638      	mov	r0, r7
1a00411c:	f000 f888 	bl	1a004230 <_printf_i>
1a004120:	e7e3      	b.n	1a0040ea <_vfiprintf_r+0x1f6>
1a004122:	bf00      	nop
1a004124:	1a005064 	.word	0x1a005064
1a004128:	1a005084 	.word	0x1a005084
1a00412c:	1a005044 	.word	0x1a005044
1a004130:	1a0050a8 	.word	0x1a0050a8
1a004134:	1a0050ae 	.word	0x1a0050ae
1a004138:	1a0050b2 	.word	0x1a0050b2
1a00413c:	00000000 	.word	0x00000000
1a004140:	1a003ecf 	.word	0x1a003ecf

1a004144 <_printf_common>:
1a004144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004148:	4691      	mov	r9, r2
1a00414a:	461f      	mov	r7, r3
1a00414c:	688a      	ldr	r2, [r1, #8]
1a00414e:	690b      	ldr	r3, [r1, #16]
1a004150:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004154:	4293      	cmp	r3, r2
1a004156:	bfb8      	it	lt
1a004158:	4613      	movlt	r3, r2
1a00415a:	f8c9 3000 	str.w	r3, [r9]
1a00415e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004162:	4606      	mov	r6, r0
1a004164:	460c      	mov	r4, r1
1a004166:	b112      	cbz	r2, 1a00416e <_printf_common+0x2a>
1a004168:	3301      	adds	r3, #1
1a00416a:	f8c9 3000 	str.w	r3, [r9]
1a00416e:	6823      	ldr	r3, [r4, #0]
1a004170:	0699      	lsls	r1, r3, #26
1a004172:	bf42      	ittt	mi
1a004174:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004178:	3302      	addmi	r3, #2
1a00417a:	f8c9 3000 	strmi.w	r3, [r9]
1a00417e:	6825      	ldr	r5, [r4, #0]
1a004180:	f015 0506 	ands.w	r5, r5, #6
1a004184:	d107      	bne.n	1a004196 <_printf_common+0x52>
1a004186:	f104 0a19 	add.w	sl, r4, #25
1a00418a:	68e3      	ldr	r3, [r4, #12]
1a00418c:	f8d9 2000 	ldr.w	r2, [r9]
1a004190:	1a9b      	subs	r3, r3, r2
1a004192:	42ab      	cmp	r3, r5
1a004194:	dc28      	bgt.n	1a0041e8 <_printf_common+0xa4>
1a004196:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00419a:	6822      	ldr	r2, [r4, #0]
1a00419c:	3300      	adds	r3, #0
1a00419e:	bf18      	it	ne
1a0041a0:	2301      	movne	r3, #1
1a0041a2:	0692      	lsls	r2, r2, #26
1a0041a4:	d42d      	bmi.n	1a004202 <_printf_common+0xbe>
1a0041a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0041aa:	4639      	mov	r1, r7
1a0041ac:	4630      	mov	r0, r6
1a0041ae:	47c0      	blx	r8
1a0041b0:	3001      	adds	r0, #1
1a0041b2:	d020      	beq.n	1a0041f6 <_printf_common+0xb2>
1a0041b4:	6823      	ldr	r3, [r4, #0]
1a0041b6:	68e5      	ldr	r5, [r4, #12]
1a0041b8:	f8d9 2000 	ldr.w	r2, [r9]
1a0041bc:	f003 0306 	and.w	r3, r3, #6
1a0041c0:	2b04      	cmp	r3, #4
1a0041c2:	bf08      	it	eq
1a0041c4:	1aad      	subeq	r5, r5, r2
1a0041c6:	68a3      	ldr	r3, [r4, #8]
1a0041c8:	6922      	ldr	r2, [r4, #16]
1a0041ca:	bf0c      	ite	eq
1a0041cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0041d0:	2500      	movne	r5, #0
1a0041d2:	4293      	cmp	r3, r2
1a0041d4:	bfc4      	itt	gt
1a0041d6:	1a9b      	subgt	r3, r3, r2
1a0041d8:	18ed      	addgt	r5, r5, r3
1a0041da:	f04f 0900 	mov.w	r9, #0
1a0041de:	341a      	adds	r4, #26
1a0041e0:	454d      	cmp	r5, r9
1a0041e2:	d11a      	bne.n	1a00421a <_printf_common+0xd6>
1a0041e4:	2000      	movs	r0, #0
1a0041e6:	e008      	b.n	1a0041fa <_printf_common+0xb6>
1a0041e8:	2301      	movs	r3, #1
1a0041ea:	4652      	mov	r2, sl
1a0041ec:	4639      	mov	r1, r7
1a0041ee:	4630      	mov	r0, r6
1a0041f0:	47c0      	blx	r8
1a0041f2:	3001      	adds	r0, #1
1a0041f4:	d103      	bne.n	1a0041fe <_printf_common+0xba>
1a0041f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0041fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0041fe:	3501      	adds	r5, #1
1a004200:	e7c3      	b.n	1a00418a <_printf_common+0x46>
1a004202:	18e1      	adds	r1, r4, r3
1a004204:	1c5a      	adds	r2, r3, #1
1a004206:	2030      	movs	r0, #48	; 0x30
1a004208:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a00420c:	4422      	add	r2, r4
1a00420e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004216:	3302      	adds	r3, #2
1a004218:	e7c5      	b.n	1a0041a6 <_printf_common+0x62>
1a00421a:	2301      	movs	r3, #1
1a00421c:	4622      	mov	r2, r4
1a00421e:	4639      	mov	r1, r7
1a004220:	4630      	mov	r0, r6
1a004222:	47c0      	blx	r8
1a004224:	3001      	adds	r0, #1
1a004226:	d0e6      	beq.n	1a0041f6 <_printf_common+0xb2>
1a004228:	f109 0901 	add.w	r9, r9, #1
1a00422c:	e7d8      	b.n	1a0041e0 <_printf_common+0x9c>
1a00422e:	Address 0x000000001a00422e is out of bounds.


1a004230 <_printf_i>:
1a004230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004234:	4606      	mov	r6, r0
1a004236:	460c      	mov	r4, r1
1a004238:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a00423c:	7e09      	ldrb	r1, [r1, #24]
1a00423e:	b085      	sub	sp, #20
1a004240:	296e      	cmp	r1, #110	; 0x6e
1a004242:	4698      	mov	r8, r3
1a004244:	4617      	mov	r7, r2
1a004246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004248:	f000 80ba 	beq.w	1a0043c0 <_printf_i+0x190>
1a00424c:	d824      	bhi.n	1a004298 <_printf_i+0x68>
1a00424e:	2963      	cmp	r1, #99	; 0x63
1a004250:	d039      	beq.n	1a0042c6 <_printf_i+0x96>
1a004252:	d80a      	bhi.n	1a00426a <_printf_i+0x3a>
1a004254:	2900      	cmp	r1, #0
1a004256:	f000 80c3 	beq.w	1a0043e0 <_printf_i+0x1b0>
1a00425a:	2958      	cmp	r1, #88	; 0x58
1a00425c:	f000 8091 	beq.w	1a004382 <_printf_i+0x152>
1a004260:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004264:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004268:	e035      	b.n	1a0042d6 <_printf_i+0xa6>
1a00426a:	2964      	cmp	r1, #100	; 0x64
1a00426c:	d001      	beq.n	1a004272 <_printf_i+0x42>
1a00426e:	2969      	cmp	r1, #105	; 0x69
1a004270:	d1f6      	bne.n	1a004260 <_printf_i+0x30>
1a004272:	6825      	ldr	r5, [r4, #0]
1a004274:	681a      	ldr	r2, [r3, #0]
1a004276:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00427a:	f102 0104 	add.w	r1, r2, #4
1a00427e:	d02c      	beq.n	1a0042da <_printf_i+0xaa>
1a004280:	6812      	ldr	r2, [r2, #0]
1a004282:	6019      	str	r1, [r3, #0]
1a004284:	2a00      	cmp	r2, #0
1a004286:	da03      	bge.n	1a004290 <_printf_i+0x60>
1a004288:	232d      	movs	r3, #45	; 0x2d
1a00428a:	4252      	negs	r2, r2
1a00428c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004290:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a004450 <_printf_i+0x220>
1a004294:	230a      	movs	r3, #10
1a004296:	e03f      	b.n	1a004318 <_printf_i+0xe8>
1a004298:	2973      	cmp	r1, #115	; 0x73
1a00429a:	f000 80a5 	beq.w	1a0043e8 <_printf_i+0x1b8>
1a00429e:	d808      	bhi.n	1a0042b2 <_printf_i+0x82>
1a0042a0:	296f      	cmp	r1, #111	; 0x6f
1a0042a2:	d021      	beq.n	1a0042e8 <_printf_i+0xb8>
1a0042a4:	2970      	cmp	r1, #112	; 0x70
1a0042a6:	d1db      	bne.n	1a004260 <_printf_i+0x30>
1a0042a8:	6822      	ldr	r2, [r4, #0]
1a0042aa:	f042 0220 	orr.w	r2, r2, #32
1a0042ae:	6022      	str	r2, [r4, #0]
1a0042b0:	e003      	b.n	1a0042ba <_printf_i+0x8a>
1a0042b2:	2975      	cmp	r1, #117	; 0x75
1a0042b4:	d018      	beq.n	1a0042e8 <_printf_i+0xb8>
1a0042b6:	2978      	cmp	r1, #120	; 0x78
1a0042b8:	d1d2      	bne.n	1a004260 <_printf_i+0x30>
1a0042ba:	2278      	movs	r2, #120	; 0x78
1a0042bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a0042c0:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a004454 <_printf_i+0x224>
1a0042c4:	e061      	b.n	1a00438a <_printf_i+0x15a>
1a0042c6:	681a      	ldr	r2, [r3, #0]
1a0042c8:	1d11      	adds	r1, r2, #4
1a0042ca:	6019      	str	r1, [r3, #0]
1a0042cc:	6813      	ldr	r3, [r2, #0]
1a0042ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0042d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0042d6:	2301      	movs	r3, #1
1a0042d8:	e093      	b.n	1a004402 <_printf_i+0x1d2>
1a0042da:	6812      	ldr	r2, [r2, #0]
1a0042dc:	6019      	str	r1, [r3, #0]
1a0042de:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0042e2:	bf18      	it	ne
1a0042e4:	b212      	sxthne	r2, r2
1a0042e6:	e7cd      	b.n	1a004284 <_printf_i+0x54>
1a0042e8:	f8d4 c000 	ldr.w	ip, [r4]
1a0042ec:	681a      	ldr	r2, [r3, #0]
1a0042ee:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0042f2:	f102 0504 	add.w	r5, r2, #4
1a0042f6:	601d      	str	r5, [r3, #0]
1a0042f8:	d001      	beq.n	1a0042fe <_printf_i+0xce>
1a0042fa:	6812      	ldr	r2, [r2, #0]
1a0042fc:	e003      	b.n	1a004306 <_printf_i+0xd6>
1a0042fe:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004302:	d0fa      	beq.n	1a0042fa <_printf_i+0xca>
1a004304:	8812      	ldrh	r2, [r2, #0]
1a004306:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a004450 <_printf_i+0x220>
1a00430a:	296f      	cmp	r1, #111	; 0x6f
1a00430c:	bf0c      	ite	eq
1a00430e:	2308      	moveq	r3, #8
1a004310:	230a      	movne	r3, #10
1a004312:	2100      	movs	r1, #0
1a004314:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004318:	6865      	ldr	r5, [r4, #4]
1a00431a:	60a5      	str	r5, [r4, #8]
1a00431c:	2d00      	cmp	r5, #0
1a00431e:	bfa2      	ittt	ge
1a004320:	6821      	ldrge	r1, [r4, #0]
1a004322:	f021 0104 	bicge.w	r1, r1, #4
1a004326:	6021      	strge	r1, [r4, #0]
1a004328:	b90a      	cbnz	r2, 1a00432e <_printf_i+0xfe>
1a00432a:	2d00      	cmp	r5, #0
1a00432c:	d046      	beq.n	1a0043bc <_printf_i+0x18c>
1a00432e:	4605      	mov	r5, r0
1a004330:	fbb2 f1f3 	udiv	r1, r2, r3
1a004334:	fb03 2e11 	mls	lr, r3, r1, r2
1a004338:	4293      	cmp	r3, r2
1a00433a:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00433e:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a004342:	d939      	bls.n	1a0043b8 <_printf_i+0x188>
1a004344:	2b08      	cmp	r3, #8
1a004346:	d10b      	bne.n	1a004360 <_printf_i+0x130>
1a004348:	6823      	ldr	r3, [r4, #0]
1a00434a:	07da      	lsls	r2, r3, #31
1a00434c:	d508      	bpl.n	1a004360 <_printf_i+0x130>
1a00434e:	6923      	ldr	r3, [r4, #16]
1a004350:	6862      	ldr	r2, [r4, #4]
1a004352:	429a      	cmp	r2, r3
1a004354:	bfde      	ittt	le
1a004356:	2330      	movle	r3, #48	; 0x30
1a004358:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00435c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a004360:	1b40      	subs	r0, r0, r5
1a004362:	6120      	str	r0, [r4, #16]
1a004364:	f8cd 8000 	str.w	r8, [sp]
1a004368:	463b      	mov	r3, r7
1a00436a:	aa03      	add	r2, sp, #12
1a00436c:	4621      	mov	r1, r4
1a00436e:	4630      	mov	r0, r6
1a004370:	f7ff fee8 	bl	1a004144 <_printf_common>
1a004374:	3001      	adds	r0, #1
1a004376:	d149      	bne.n	1a00440c <_printf_i+0x1dc>
1a004378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00437c:	b005      	add	sp, #20
1a00437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004382:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a004450 <_printf_i+0x220>
1a004386:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00438a:	681d      	ldr	r5, [r3, #0]
1a00438c:	6821      	ldr	r1, [r4, #0]
1a00438e:	f855 2b04 	ldr.w	r2, [r5], #4
1a004392:	601d      	str	r5, [r3, #0]
1a004394:	060d      	lsls	r5, r1, #24
1a004396:	d50b      	bpl.n	1a0043b0 <_printf_i+0x180>
1a004398:	07cd      	lsls	r5, r1, #31
1a00439a:	bf44      	itt	mi
1a00439c:	f041 0120 	orrmi.w	r1, r1, #32
1a0043a0:	6021      	strmi	r1, [r4, #0]
1a0043a2:	b91a      	cbnz	r2, 1a0043ac <_printf_i+0x17c>
1a0043a4:	6823      	ldr	r3, [r4, #0]
1a0043a6:	f023 0320 	bic.w	r3, r3, #32
1a0043aa:	6023      	str	r3, [r4, #0]
1a0043ac:	2310      	movs	r3, #16
1a0043ae:	e7b0      	b.n	1a004312 <_printf_i+0xe2>
1a0043b0:	064b      	lsls	r3, r1, #25
1a0043b2:	bf48      	it	mi
1a0043b4:	b292      	uxthmi	r2, r2
1a0043b6:	e7ef      	b.n	1a004398 <_printf_i+0x168>
1a0043b8:	460a      	mov	r2, r1
1a0043ba:	e7b9      	b.n	1a004330 <_printf_i+0x100>
1a0043bc:	4605      	mov	r5, r0
1a0043be:	e7c1      	b.n	1a004344 <_printf_i+0x114>
1a0043c0:	681a      	ldr	r2, [r3, #0]
1a0043c2:	f8d4 c000 	ldr.w	ip, [r4]
1a0043c6:	6961      	ldr	r1, [r4, #20]
1a0043c8:	1d15      	adds	r5, r2, #4
1a0043ca:	601d      	str	r5, [r3, #0]
1a0043cc:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0043d0:	6813      	ldr	r3, [r2, #0]
1a0043d2:	d001      	beq.n	1a0043d8 <_printf_i+0x1a8>
1a0043d4:	6019      	str	r1, [r3, #0]
1a0043d6:	e003      	b.n	1a0043e0 <_printf_i+0x1b0>
1a0043d8:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0043dc:	d0fa      	beq.n	1a0043d4 <_printf_i+0x1a4>
1a0043de:	8019      	strh	r1, [r3, #0]
1a0043e0:	2300      	movs	r3, #0
1a0043e2:	6123      	str	r3, [r4, #16]
1a0043e4:	4605      	mov	r5, r0
1a0043e6:	e7bd      	b.n	1a004364 <_printf_i+0x134>
1a0043e8:	681a      	ldr	r2, [r3, #0]
1a0043ea:	1d11      	adds	r1, r2, #4
1a0043ec:	6019      	str	r1, [r3, #0]
1a0043ee:	6815      	ldr	r5, [r2, #0]
1a0043f0:	6862      	ldr	r2, [r4, #4]
1a0043f2:	2100      	movs	r1, #0
1a0043f4:	4628      	mov	r0, r5
1a0043f6:	f000 fa4b 	bl	1a004890 <memchr>
1a0043fa:	b108      	cbz	r0, 1a004400 <_printf_i+0x1d0>
1a0043fc:	1b40      	subs	r0, r0, r5
1a0043fe:	6060      	str	r0, [r4, #4]
1a004400:	6863      	ldr	r3, [r4, #4]
1a004402:	6123      	str	r3, [r4, #16]
1a004404:	2300      	movs	r3, #0
1a004406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00440a:	e7ab      	b.n	1a004364 <_printf_i+0x134>
1a00440c:	6923      	ldr	r3, [r4, #16]
1a00440e:	462a      	mov	r2, r5
1a004410:	4639      	mov	r1, r7
1a004412:	4630      	mov	r0, r6
1a004414:	47c0      	blx	r8
1a004416:	3001      	adds	r0, #1
1a004418:	d0ae      	beq.n	1a004378 <_printf_i+0x148>
1a00441a:	6823      	ldr	r3, [r4, #0]
1a00441c:	079b      	lsls	r3, r3, #30
1a00441e:	d413      	bmi.n	1a004448 <_printf_i+0x218>
1a004420:	68e0      	ldr	r0, [r4, #12]
1a004422:	9b03      	ldr	r3, [sp, #12]
1a004424:	4298      	cmp	r0, r3
1a004426:	bfb8      	it	lt
1a004428:	4618      	movlt	r0, r3
1a00442a:	e7a7      	b.n	1a00437c <_printf_i+0x14c>
1a00442c:	2301      	movs	r3, #1
1a00442e:	464a      	mov	r2, r9
1a004430:	4639      	mov	r1, r7
1a004432:	4630      	mov	r0, r6
1a004434:	47c0      	blx	r8
1a004436:	3001      	adds	r0, #1
1a004438:	d09e      	beq.n	1a004378 <_printf_i+0x148>
1a00443a:	3501      	adds	r5, #1
1a00443c:	68e3      	ldr	r3, [r4, #12]
1a00443e:	9a03      	ldr	r2, [sp, #12]
1a004440:	1a9b      	subs	r3, r3, r2
1a004442:	42ab      	cmp	r3, r5
1a004444:	dcf2      	bgt.n	1a00442c <_printf_i+0x1fc>
1a004446:	e7eb      	b.n	1a004420 <_printf_i+0x1f0>
1a004448:	2500      	movs	r5, #0
1a00444a:	f104 0919 	add.w	r9, r4, #25
1a00444e:	e7f5      	b.n	1a00443c <_printf_i+0x20c>
1a004450:	1a0050b9 	.word	0x1a0050b9
1a004454:	1a0050ca 	.word	0x1a0050ca

1a004458 <iprintf>:
1a004458:	b40f      	push	{r0, r1, r2, r3}
1a00445a:	4b0a      	ldr	r3, [pc, #40]	; (1a004484 <iprintf+0x2c>)
1a00445c:	b513      	push	{r0, r1, r4, lr}
1a00445e:	681c      	ldr	r4, [r3, #0]
1a004460:	b124      	cbz	r4, 1a00446c <iprintf+0x14>
1a004462:	69a3      	ldr	r3, [r4, #24]
1a004464:	b913      	cbnz	r3, 1a00446c <iprintf+0x14>
1a004466:	4620      	mov	r0, r4
1a004468:	f7ff fb98 	bl	1a003b9c <__sinit>
1a00446c:	ab05      	add	r3, sp, #20
1a00446e:	9a04      	ldr	r2, [sp, #16]
1a004470:	68a1      	ldr	r1, [r4, #8]
1a004472:	9301      	str	r3, [sp, #4]
1a004474:	4620      	mov	r0, r4
1a004476:	f7ff fd3d 	bl	1a003ef4 <_vfiprintf_r>
1a00447a:	b002      	add	sp, #8
1a00447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004480:	b004      	add	sp, #16
1a004482:	4770      	bx	lr
1a004484:	10000040 	.word	0x10000040

1a004488 <_puts_r>:
1a004488:	b570      	push	{r4, r5, r6, lr}
1a00448a:	460e      	mov	r6, r1
1a00448c:	4605      	mov	r5, r0
1a00448e:	b118      	cbz	r0, 1a004498 <_puts_r+0x10>
1a004490:	6983      	ldr	r3, [r0, #24]
1a004492:	b90b      	cbnz	r3, 1a004498 <_puts_r+0x10>
1a004494:	f7ff fb82 	bl	1a003b9c <__sinit>
1a004498:	69ab      	ldr	r3, [r5, #24]
1a00449a:	68ac      	ldr	r4, [r5, #8]
1a00449c:	b913      	cbnz	r3, 1a0044a4 <_puts_r+0x1c>
1a00449e:	4628      	mov	r0, r5
1a0044a0:	f7ff fb7c 	bl	1a003b9c <__sinit>
1a0044a4:	4b2c      	ldr	r3, [pc, #176]	; (1a004558 <_puts_r+0xd0>)
1a0044a6:	429c      	cmp	r4, r3
1a0044a8:	d120      	bne.n	1a0044ec <_puts_r+0x64>
1a0044aa:	686c      	ldr	r4, [r5, #4]
1a0044ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0044ae:	07db      	lsls	r3, r3, #31
1a0044b0:	d405      	bmi.n	1a0044be <_puts_r+0x36>
1a0044b2:	89a3      	ldrh	r3, [r4, #12]
1a0044b4:	0598      	lsls	r0, r3, #22
1a0044b6:	d402      	bmi.n	1a0044be <_puts_r+0x36>
1a0044b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0044ba:	f7ff fc30 	bl	1a003d1e <__retarget_lock_acquire_recursive>
1a0044be:	89a3      	ldrh	r3, [r4, #12]
1a0044c0:	0719      	lsls	r1, r3, #28
1a0044c2:	d51d      	bpl.n	1a004500 <_puts_r+0x78>
1a0044c4:	6923      	ldr	r3, [r4, #16]
1a0044c6:	b1db      	cbz	r3, 1a004500 <_puts_r+0x78>
1a0044c8:	3e01      	subs	r6, #1
1a0044ca:	68a3      	ldr	r3, [r4, #8]
1a0044cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0044d0:	3b01      	subs	r3, #1
1a0044d2:	60a3      	str	r3, [r4, #8]
1a0044d4:	bb39      	cbnz	r1, 1a004526 <_puts_r+0x9e>
1a0044d6:	2b00      	cmp	r3, #0
1a0044d8:	da38      	bge.n	1a00454c <_puts_r+0xc4>
1a0044da:	4622      	mov	r2, r4
1a0044dc:	210a      	movs	r1, #10
1a0044de:	4628      	mov	r0, r5
1a0044e0:	f000 f8ac 	bl	1a00463c <__swbuf_r>
1a0044e4:	3001      	adds	r0, #1
1a0044e6:	d011      	beq.n	1a00450c <_puts_r+0x84>
1a0044e8:	250a      	movs	r5, #10
1a0044ea:	e011      	b.n	1a004510 <_puts_r+0x88>
1a0044ec:	4b1b      	ldr	r3, [pc, #108]	; (1a00455c <_puts_r+0xd4>)
1a0044ee:	429c      	cmp	r4, r3
1a0044f0:	d101      	bne.n	1a0044f6 <_puts_r+0x6e>
1a0044f2:	68ac      	ldr	r4, [r5, #8]
1a0044f4:	e7da      	b.n	1a0044ac <_puts_r+0x24>
1a0044f6:	4b1a      	ldr	r3, [pc, #104]	; (1a004560 <_puts_r+0xd8>)
1a0044f8:	429c      	cmp	r4, r3
1a0044fa:	bf08      	it	eq
1a0044fc:	68ec      	ldreq	r4, [r5, #12]
1a0044fe:	e7d5      	b.n	1a0044ac <_puts_r+0x24>
1a004500:	4621      	mov	r1, r4
1a004502:	4628      	mov	r0, r5
1a004504:	f000 f8ec 	bl	1a0046e0 <__swsetup_r>
1a004508:	2800      	cmp	r0, #0
1a00450a:	d0dd      	beq.n	1a0044c8 <_puts_r+0x40>
1a00450c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a004510:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004512:	07da      	lsls	r2, r3, #31
1a004514:	d405      	bmi.n	1a004522 <_puts_r+0x9a>
1a004516:	89a3      	ldrh	r3, [r4, #12]
1a004518:	059b      	lsls	r3, r3, #22
1a00451a:	d402      	bmi.n	1a004522 <_puts_r+0x9a>
1a00451c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00451e:	f7ff fbff 	bl	1a003d20 <__retarget_lock_release_recursive>
1a004522:	4628      	mov	r0, r5
1a004524:	bd70      	pop	{r4, r5, r6, pc}
1a004526:	2b00      	cmp	r3, #0
1a004528:	da04      	bge.n	1a004534 <_puts_r+0xac>
1a00452a:	69a2      	ldr	r2, [r4, #24]
1a00452c:	429a      	cmp	r2, r3
1a00452e:	dc06      	bgt.n	1a00453e <_puts_r+0xb6>
1a004530:	290a      	cmp	r1, #10
1a004532:	d004      	beq.n	1a00453e <_puts_r+0xb6>
1a004534:	6823      	ldr	r3, [r4, #0]
1a004536:	1c5a      	adds	r2, r3, #1
1a004538:	6022      	str	r2, [r4, #0]
1a00453a:	7019      	strb	r1, [r3, #0]
1a00453c:	e7c5      	b.n	1a0044ca <_puts_r+0x42>
1a00453e:	4622      	mov	r2, r4
1a004540:	4628      	mov	r0, r5
1a004542:	f000 f87b 	bl	1a00463c <__swbuf_r>
1a004546:	3001      	adds	r0, #1
1a004548:	d1bf      	bne.n	1a0044ca <_puts_r+0x42>
1a00454a:	e7df      	b.n	1a00450c <_puts_r+0x84>
1a00454c:	6823      	ldr	r3, [r4, #0]
1a00454e:	250a      	movs	r5, #10
1a004550:	1c5a      	adds	r2, r3, #1
1a004552:	6022      	str	r2, [r4, #0]
1a004554:	701d      	strb	r5, [r3, #0]
1a004556:	e7db      	b.n	1a004510 <_puts_r+0x88>
1a004558:	1a005064 	.word	0x1a005064
1a00455c:	1a005084 	.word	0x1a005084
1a004560:	1a005044 	.word	0x1a005044

1a004564 <puts>:
1a004564:	4b02      	ldr	r3, [pc, #8]	; (1a004570 <puts+0xc>)
1a004566:	4601      	mov	r1, r0
1a004568:	6818      	ldr	r0, [r3, #0]
1a00456a:	f7ff bf8d 	b.w	1a004488 <_puts_r>
1a00456e:	bf00      	nop
1a004570:	10000040 	.word	0x10000040

1a004574 <siprintf>:
1a004574:	b40e      	push	{r1, r2, r3}
1a004576:	b500      	push	{lr}
1a004578:	b09c      	sub	sp, #112	; 0x70
1a00457a:	ab1d      	add	r3, sp, #116	; 0x74
1a00457c:	9002      	str	r0, [sp, #8]
1a00457e:	9006      	str	r0, [sp, #24]
1a004580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a004584:	4809      	ldr	r0, [pc, #36]	; (1a0045ac <siprintf+0x38>)
1a004586:	9107      	str	r1, [sp, #28]
1a004588:	9104      	str	r1, [sp, #16]
1a00458a:	4909      	ldr	r1, [pc, #36]	; (1a0045b0 <siprintf+0x3c>)
1a00458c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004590:	9105      	str	r1, [sp, #20]
1a004592:	6800      	ldr	r0, [r0, #0]
1a004594:	9301      	str	r3, [sp, #4]
1a004596:	a902      	add	r1, sp, #8
1a004598:	f000 fa72 	bl	1a004a80 <_svfiprintf_r>
1a00459c:	9b02      	ldr	r3, [sp, #8]
1a00459e:	2200      	movs	r2, #0
1a0045a0:	701a      	strb	r2, [r3, #0]
1a0045a2:	b01c      	add	sp, #112	; 0x70
1a0045a4:	f85d eb04 	ldr.w	lr, [sp], #4
1a0045a8:	b003      	add	sp, #12
1a0045aa:	4770      	bx	lr
1a0045ac:	10000040 	.word	0x10000040
1a0045b0:	ffff0208 	.word	0xffff0208

1a0045b4 <__sread>:
1a0045b4:	b510      	push	{r4, lr}
1a0045b6:	460c      	mov	r4, r1
1a0045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0045bc:	f7fc f8da 	bl	1a000774 <_read_r>
1a0045c0:	2800      	cmp	r0, #0
1a0045c2:	bfab      	itete	ge
1a0045c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0045c6:	89a3      	ldrhlt	r3, [r4, #12]
1a0045c8:	181b      	addge	r3, r3, r0
1a0045ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0045ce:	bfac      	ite	ge
1a0045d0:	6563      	strge	r3, [r4, #84]	; 0x54
1a0045d2:	81a3      	strhlt	r3, [r4, #12]
1a0045d4:	bd10      	pop	{r4, pc}

1a0045d6 <__swrite>:
1a0045d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0045da:	461f      	mov	r7, r3
1a0045dc:	898b      	ldrh	r3, [r1, #12]
1a0045de:	05db      	lsls	r3, r3, #23
1a0045e0:	4605      	mov	r5, r0
1a0045e2:	460c      	mov	r4, r1
1a0045e4:	4616      	mov	r6, r2
1a0045e6:	d505      	bpl.n	1a0045f4 <__swrite+0x1e>
1a0045e8:	2302      	movs	r3, #2
1a0045ea:	2200      	movs	r2, #0
1a0045ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0045f0:	f7fc f8bb 	bl	1a00076a <_lseek_r>
1a0045f4:	89a3      	ldrh	r3, [r4, #12]
1a0045f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0045fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0045fe:	81a3      	strh	r3, [r4, #12]
1a004600:	4632      	mov	r2, r6
1a004602:	463b      	mov	r3, r7
1a004604:	4628      	mov	r0, r5
1a004606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00460a:	f7fc b8da 	b.w	1a0007c2 <_write_r>

1a00460e <__sseek>:
1a00460e:	b510      	push	{r4, lr}
1a004610:	460c      	mov	r4, r1
1a004612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004616:	f7fc f8a8 	bl	1a00076a <_lseek_r>
1a00461a:	1c43      	adds	r3, r0, #1
1a00461c:	89a3      	ldrh	r3, [r4, #12]
1a00461e:	bf15      	itete	ne
1a004620:	6560      	strne	r0, [r4, #84]	; 0x54
1a004622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00462a:	81a3      	strheq	r3, [r4, #12]
1a00462c:	bf18      	it	ne
1a00462e:	81a3      	strhne	r3, [r4, #12]
1a004630:	bd10      	pop	{r4, pc}

1a004632 <__sclose>:
1a004632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004636:	f7fc b885 	b.w	1a000744 <_close_r>
1a00463a:	Address 0x000000001a00463a is out of bounds.


1a00463c <__swbuf_r>:
1a00463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00463e:	460e      	mov	r6, r1
1a004640:	4614      	mov	r4, r2
1a004642:	4605      	mov	r5, r0
1a004644:	b118      	cbz	r0, 1a00464e <__swbuf_r+0x12>
1a004646:	6983      	ldr	r3, [r0, #24]
1a004648:	b90b      	cbnz	r3, 1a00464e <__swbuf_r+0x12>
1a00464a:	f7ff faa7 	bl	1a003b9c <__sinit>
1a00464e:	4b21      	ldr	r3, [pc, #132]	; (1a0046d4 <__swbuf_r+0x98>)
1a004650:	429c      	cmp	r4, r3
1a004652:	d12b      	bne.n	1a0046ac <__swbuf_r+0x70>
1a004654:	686c      	ldr	r4, [r5, #4]
1a004656:	69a3      	ldr	r3, [r4, #24]
1a004658:	60a3      	str	r3, [r4, #8]
1a00465a:	89a3      	ldrh	r3, [r4, #12]
1a00465c:	071a      	lsls	r2, r3, #28
1a00465e:	d52f      	bpl.n	1a0046c0 <__swbuf_r+0x84>
1a004660:	6923      	ldr	r3, [r4, #16]
1a004662:	b36b      	cbz	r3, 1a0046c0 <__swbuf_r+0x84>
1a004664:	6923      	ldr	r3, [r4, #16]
1a004666:	6820      	ldr	r0, [r4, #0]
1a004668:	1ac0      	subs	r0, r0, r3
1a00466a:	6963      	ldr	r3, [r4, #20]
1a00466c:	b2f6      	uxtb	r6, r6
1a00466e:	4283      	cmp	r3, r0
1a004670:	4637      	mov	r7, r6
1a004672:	dc04      	bgt.n	1a00467e <__swbuf_r+0x42>
1a004674:	4621      	mov	r1, r4
1a004676:	4628      	mov	r0, r5
1a004678:	f7ff f9fc 	bl	1a003a74 <_fflush_r>
1a00467c:	bb30      	cbnz	r0, 1a0046cc <__swbuf_r+0x90>
1a00467e:	68a3      	ldr	r3, [r4, #8]
1a004680:	3b01      	subs	r3, #1
1a004682:	60a3      	str	r3, [r4, #8]
1a004684:	6823      	ldr	r3, [r4, #0]
1a004686:	1c5a      	adds	r2, r3, #1
1a004688:	6022      	str	r2, [r4, #0]
1a00468a:	701e      	strb	r6, [r3, #0]
1a00468c:	6963      	ldr	r3, [r4, #20]
1a00468e:	3001      	adds	r0, #1
1a004690:	4283      	cmp	r3, r0
1a004692:	d004      	beq.n	1a00469e <__swbuf_r+0x62>
1a004694:	89a3      	ldrh	r3, [r4, #12]
1a004696:	07db      	lsls	r3, r3, #31
1a004698:	d506      	bpl.n	1a0046a8 <__swbuf_r+0x6c>
1a00469a:	2e0a      	cmp	r6, #10
1a00469c:	d104      	bne.n	1a0046a8 <__swbuf_r+0x6c>
1a00469e:	4621      	mov	r1, r4
1a0046a0:	4628      	mov	r0, r5
1a0046a2:	f7ff f9e7 	bl	1a003a74 <_fflush_r>
1a0046a6:	b988      	cbnz	r0, 1a0046cc <__swbuf_r+0x90>
1a0046a8:	4638      	mov	r0, r7
1a0046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0046ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0046d8 <__swbuf_r+0x9c>)
1a0046ae:	429c      	cmp	r4, r3
1a0046b0:	d101      	bne.n	1a0046b6 <__swbuf_r+0x7a>
1a0046b2:	68ac      	ldr	r4, [r5, #8]
1a0046b4:	e7cf      	b.n	1a004656 <__swbuf_r+0x1a>
1a0046b6:	4b09      	ldr	r3, [pc, #36]	; (1a0046dc <__swbuf_r+0xa0>)
1a0046b8:	429c      	cmp	r4, r3
1a0046ba:	bf08      	it	eq
1a0046bc:	68ec      	ldreq	r4, [r5, #12]
1a0046be:	e7ca      	b.n	1a004656 <__swbuf_r+0x1a>
1a0046c0:	4621      	mov	r1, r4
1a0046c2:	4628      	mov	r0, r5
1a0046c4:	f000 f80c 	bl	1a0046e0 <__swsetup_r>
1a0046c8:	2800      	cmp	r0, #0
1a0046ca:	d0cb      	beq.n	1a004664 <__swbuf_r+0x28>
1a0046cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0046d0:	e7ea      	b.n	1a0046a8 <__swbuf_r+0x6c>
1a0046d2:	bf00      	nop
1a0046d4:	1a005064 	.word	0x1a005064
1a0046d8:	1a005084 	.word	0x1a005084
1a0046dc:	1a005044 	.word	0x1a005044

1a0046e0 <__swsetup_r>:
1a0046e0:	4b32      	ldr	r3, [pc, #200]	; (1a0047ac <__swsetup_r+0xcc>)
1a0046e2:	b570      	push	{r4, r5, r6, lr}
1a0046e4:	681d      	ldr	r5, [r3, #0]
1a0046e6:	4606      	mov	r6, r0
1a0046e8:	460c      	mov	r4, r1
1a0046ea:	b125      	cbz	r5, 1a0046f6 <__swsetup_r+0x16>
1a0046ec:	69ab      	ldr	r3, [r5, #24]
1a0046ee:	b913      	cbnz	r3, 1a0046f6 <__swsetup_r+0x16>
1a0046f0:	4628      	mov	r0, r5
1a0046f2:	f7ff fa53 	bl	1a003b9c <__sinit>
1a0046f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0047b0 <__swsetup_r+0xd0>)
1a0046f8:	429c      	cmp	r4, r3
1a0046fa:	d10f      	bne.n	1a00471c <__swsetup_r+0x3c>
1a0046fc:	686c      	ldr	r4, [r5, #4]
1a0046fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004702:	b29a      	uxth	r2, r3
1a004704:	0715      	lsls	r5, r2, #28
1a004706:	d42c      	bmi.n	1a004762 <__swsetup_r+0x82>
1a004708:	06d0      	lsls	r0, r2, #27
1a00470a:	d411      	bmi.n	1a004730 <__swsetup_r+0x50>
1a00470c:	2209      	movs	r2, #9
1a00470e:	6032      	str	r2, [r6, #0]
1a004710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004714:	81a3      	strh	r3, [r4, #12]
1a004716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00471a:	e03e      	b.n	1a00479a <__swsetup_r+0xba>
1a00471c:	4b25      	ldr	r3, [pc, #148]	; (1a0047b4 <__swsetup_r+0xd4>)
1a00471e:	429c      	cmp	r4, r3
1a004720:	d101      	bne.n	1a004726 <__swsetup_r+0x46>
1a004722:	68ac      	ldr	r4, [r5, #8]
1a004724:	e7eb      	b.n	1a0046fe <__swsetup_r+0x1e>
1a004726:	4b24      	ldr	r3, [pc, #144]	; (1a0047b8 <__swsetup_r+0xd8>)
1a004728:	429c      	cmp	r4, r3
1a00472a:	bf08      	it	eq
1a00472c:	68ec      	ldreq	r4, [r5, #12]
1a00472e:	e7e6      	b.n	1a0046fe <__swsetup_r+0x1e>
1a004730:	0751      	lsls	r1, r2, #29
1a004732:	d512      	bpl.n	1a00475a <__swsetup_r+0x7a>
1a004734:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004736:	b141      	cbz	r1, 1a00474a <__swsetup_r+0x6a>
1a004738:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00473c:	4299      	cmp	r1, r3
1a00473e:	d002      	beq.n	1a004746 <__swsetup_r+0x66>
1a004740:	4630      	mov	r0, r6
1a004742:	f7ff fb05 	bl	1a003d50 <_free_r>
1a004746:	2300      	movs	r3, #0
1a004748:	6363      	str	r3, [r4, #52]	; 0x34
1a00474a:	89a3      	ldrh	r3, [r4, #12]
1a00474c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004750:	81a3      	strh	r3, [r4, #12]
1a004752:	2300      	movs	r3, #0
1a004754:	6063      	str	r3, [r4, #4]
1a004756:	6923      	ldr	r3, [r4, #16]
1a004758:	6023      	str	r3, [r4, #0]
1a00475a:	89a3      	ldrh	r3, [r4, #12]
1a00475c:	f043 0308 	orr.w	r3, r3, #8
1a004760:	81a3      	strh	r3, [r4, #12]
1a004762:	6923      	ldr	r3, [r4, #16]
1a004764:	b94b      	cbnz	r3, 1a00477a <__swsetup_r+0x9a>
1a004766:	89a3      	ldrh	r3, [r4, #12]
1a004768:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a00476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004770:	d003      	beq.n	1a00477a <__swsetup_r+0x9a>
1a004772:	4621      	mov	r1, r4
1a004774:	4630      	mov	r0, r6
1a004776:	f000 f845 	bl	1a004804 <__smakebuf_r>
1a00477a:	89a2      	ldrh	r2, [r4, #12]
1a00477c:	f012 0301 	ands.w	r3, r2, #1
1a004780:	d00c      	beq.n	1a00479c <__swsetup_r+0xbc>
1a004782:	2300      	movs	r3, #0
1a004784:	60a3      	str	r3, [r4, #8]
1a004786:	6963      	ldr	r3, [r4, #20]
1a004788:	425b      	negs	r3, r3
1a00478a:	61a3      	str	r3, [r4, #24]
1a00478c:	6923      	ldr	r3, [r4, #16]
1a00478e:	b953      	cbnz	r3, 1a0047a6 <__swsetup_r+0xc6>
1a004790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004794:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004798:	d1ba      	bne.n	1a004710 <__swsetup_r+0x30>
1a00479a:	bd70      	pop	{r4, r5, r6, pc}
1a00479c:	0792      	lsls	r2, r2, #30
1a00479e:	bf58      	it	pl
1a0047a0:	6963      	ldrpl	r3, [r4, #20]
1a0047a2:	60a3      	str	r3, [r4, #8]
1a0047a4:	e7f2      	b.n	1a00478c <__swsetup_r+0xac>
1a0047a6:	2000      	movs	r0, #0
1a0047a8:	e7f7      	b.n	1a00479a <__swsetup_r+0xba>
1a0047aa:	bf00      	nop
1a0047ac:	10000040 	.word	0x10000040
1a0047b0:	1a005064 	.word	0x1a005064
1a0047b4:	1a005084 	.word	0x1a005084
1a0047b8:	1a005044 	.word	0x1a005044

1a0047bc <__swhatbuf_r>:
1a0047bc:	b570      	push	{r4, r5, r6, lr}
1a0047be:	460e      	mov	r6, r1
1a0047c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0047c4:	2900      	cmp	r1, #0
1a0047c6:	b096      	sub	sp, #88	; 0x58
1a0047c8:	4614      	mov	r4, r2
1a0047ca:	461d      	mov	r5, r3
1a0047cc:	da07      	bge.n	1a0047de <__swhatbuf_r+0x22>
1a0047ce:	2300      	movs	r3, #0
1a0047d0:	602b      	str	r3, [r5, #0]
1a0047d2:	89b3      	ldrh	r3, [r6, #12]
1a0047d4:	061a      	lsls	r2, r3, #24
1a0047d6:	d410      	bmi.n	1a0047fa <__swhatbuf_r+0x3e>
1a0047d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0047dc:	e00e      	b.n	1a0047fc <__swhatbuf_r+0x40>
1a0047de:	466a      	mov	r2, sp
1a0047e0:	f7fb ffb5 	bl	1a00074e <_fstat_r>
1a0047e4:	2800      	cmp	r0, #0
1a0047e6:	dbf2      	blt.n	1a0047ce <__swhatbuf_r+0x12>
1a0047e8:	9a01      	ldr	r2, [sp, #4]
1a0047ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0047ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0047f2:	425a      	negs	r2, r3
1a0047f4:	415a      	adcs	r2, r3
1a0047f6:	602a      	str	r2, [r5, #0]
1a0047f8:	e7ee      	b.n	1a0047d8 <__swhatbuf_r+0x1c>
1a0047fa:	2340      	movs	r3, #64	; 0x40
1a0047fc:	2000      	movs	r0, #0
1a0047fe:	6023      	str	r3, [r4, #0]
1a004800:	b016      	add	sp, #88	; 0x58
1a004802:	bd70      	pop	{r4, r5, r6, pc}

1a004804 <__smakebuf_r>:
1a004804:	898b      	ldrh	r3, [r1, #12]
1a004806:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004808:	079d      	lsls	r5, r3, #30
1a00480a:	4606      	mov	r6, r0
1a00480c:	460c      	mov	r4, r1
1a00480e:	d507      	bpl.n	1a004820 <__smakebuf_r+0x1c>
1a004810:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004814:	6023      	str	r3, [r4, #0]
1a004816:	6123      	str	r3, [r4, #16]
1a004818:	2301      	movs	r3, #1
1a00481a:	6163      	str	r3, [r4, #20]
1a00481c:	b002      	add	sp, #8
1a00481e:	bd70      	pop	{r4, r5, r6, pc}
1a004820:	ab01      	add	r3, sp, #4
1a004822:	466a      	mov	r2, sp
1a004824:	f7ff ffca 	bl	1a0047bc <__swhatbuf_r>
1a004828:	9900      	ldr	r1, [sp, #0]
1a00482a:	4605      	mov	r5, r0
1a00482c:	4630      	mov	r0, r6
1a00482e:	f7ff fadd 	bl	1a003dec <_malloc_r>
1a004832:	b948      	cbnz	r0, 1a004848 <__smakebuf_r+0x44>
1a004834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004838:	059a      	lsls	r2, r3, #22
1a00483a:	d4ef      	bmi.n	1a00481c <__smakebuf_r+0x18>
1a00483c:	f023 0303 	bic.w	r3, r3, #3
1a004840:	f043 0302 	orr.w	r3, r3, #2
1a004844:	81a3      	strh	r3, [r4, #12]
1a004846:	e7e3      	b.n	1a004810 <__smakebuf_r+0xc>
1a004848:	4b0d      	ldr	r3, [pc, #52]	; (1a004880 <__smakebuf_r+0x7c>)
1a00484a:	62b3      	str	r3, [r6, #40]	; 0x28
1a00484c:	89a3      	ldrh	r3, [r4, #12]
1a00484e:	6020      	str	r0, [r4, #0]
1a004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004854:	81a3      	strh	r3, [r4, #12]
1a004856:	9b00      	ldr	r3, [sp, #0]
1a004858:	6163      	str	r3, [r4, #20]
1a00485a:	9b01      	ldr	r3, [sp, #4]
1a00485c:	6120      	str	r0, [r4, #16]
1a00485e:	b15b      	cbz	r3, 1a004878 <__smakebuf_r+0x74>
1a004860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004864:	4630      	mov	r0, r6
1a004866:	f7fb ff77 	bl	1a000758 <_isatty_r>
1a00486a:	b128      	cbz	r0, 1a004878 <__smakebuf_r+0x74>
1a00486c:	89a3      	ldrh	r3, [r4, #12]
1a00486e:	f023 0303 	bic.w	r3, r3, #3
1a004872:	f043 0301 	orr.w	r3, r3, #1
1a004876:	81a3      	strh	r3, [r4, #12]
1a004878:	89a3      	ldrh	r3, [r4, #12]
1a00487a:	431d      	orrs	r5, r3
1a00487c:	81a5      	strh	r5, [r4, #12]
1a00487e:	e7cd      	b.n	1a00481c <__smakebuf_r+0x18>
1a004880:	1a003b35 	.word	0x1a003b35
1a004884:	ffffffff 	.word	0xffffffff
1a004888:	ffffffff 	.word	0xffffffff
1a00488c:	ffffffff 	.word	0xffffffff

1a004890 <memchr>:
1a004890:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004894:	2a10      	cmp	r2, #16
1a004896:	db2b      	blt.n	1a0048f0 <memchr+0x60>
1a004898:	f010 0f07 	tst.w	r0, #7
1a00489c:	d008      	beq.n	1a0048b0 <memchr+0x20>
1a00489e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0048a2:	3a01      	subs	r2, #1
1a0048a4:	428b      	cmp	r3, r1
1a0048a6:	d02d      	beq.n	1a004904 <memchr+0x74>
1a0048a8:	f010 0f07 	tst.w	r0, #7
1a0048ac:	b342      	cbz	r2, 1a004900 <memchr+0x70>
1a0048ae:	d1f6      	bne.n	1a00489e <memchr+0xe>
1a0048b0:	b4f0      	push	{r4, r5, r6, r7}
1a0048b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0048b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0048ba:	f022 0407 	bic.w	r4, r2, #7
1a0048be:	f07f 0700 	mvns.w	r7, #0
1a0048c2:	2300      	movs	r3, #0
1a0048c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0048c8:	3c08      	subs	r4, #8
1a0048ca:	ea85 0501 	eor.w	r5, r5, r1
1a0048ce:	ea86 0601 	eor.w	r6, r6, r1
1a0048d2:	fa85 f547 	uadd8	r5, r5, r7
1a0048d6:	faa3 f587 	sel	r5, r3, r7
1a0048da:	fa86 f647 	uadd8	r6, r6, r7
1a0048de:	faa5 f687 	sel	r6, r5, r7
1a0048e2:	b98e      	cbnz	r6, 1a004908 <memchr+0x78>
1a0048e4:	d1ee      	bne.n	1a0048c4 <memchr+0x34>
1a0048e6:	bcf0      	pop	{r4, r5, r6, r7}
1a0048e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0048ec:	f002 0207 	and.w	r2, r2, #7
1a0048f0:	b132      	cbz	r2, 1a004900 <memchr+0x70>
1a0048f2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0048f6:	3a01      	subs	r2, #1
1a0048f8:	ea83 0301 	eor.w	r3, r3, r1
1a0048fc:	b113      	cbz	r3, 1a004904 <memchr+0x74>
1a0048fe:	d1f8      	bne.n	1a0048f2 <memchr+0x62>
1a004900:	2000      	movs	r0, #0
1a004902:	4770      	bx	lr
1a004904:	3801      	subs	r0, #1
1a004906:	4770      	bx	lr
1a004908:	2d00      	cmp	r5, #0
1a00490a:	bf06      	itte	eq
1a00490c:	4635      	moveq	r5, r6
1a00490e:	3803      	subeq	r0, #3
1a004910:	3807      	subne	r0, #7
1a004912:	f015 0f01 	tst.w	r5, #1
1a004916:	d107      	bne.n	1a004928 <memchr+0x98>
1a004918:	3001      	adds	r0, #1
1a00491a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00491e:	bf02      	ittt	eq
1a004920:	3001      	addeq	r0, #1
1a004922:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004926:	3001      	addeq	r0, #1
1a004928:	bcf0      	pop	{r4, r5, r6, r7}
1a00492a:	3801      	subs	r0, #1
1a00492c:	4770      	bx	lr
1a00492e:	bf00      	nop

1a004930 <memmove>:
1a004930:	4288      	cmp	r0, r1
1a004932:	b510      	push	{r4, lr}
1a004934:	eb01 0302 	add.w	r3, r1, r2
1a004938:	d902      	bls.n	1a004940 <memmove+0x10>
1a00493a:	4283      	cmp	r3, r0
1a00493c:	461c      	mov	r4, r3
1a00493e:	d807      	bhi.n	1a004950 <memmove+0x20>
1a004940:	1e42      	subs	r2, r0, #1
1a004942:	4299      	cmp	r1, r3
1a004944:	d008      	beq.n	1a004958 <memmove+0x28>
1a004946:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00494a:	f802 4f01 	strb.w	r4, [r2, #1]!
1a00494e:	e7f8      	b.n	1a004942 <memmove+0x12>
1a004950:	1883      	adds	r3, r0, r2
1a004952:	1a9a      	subs	r2, r3, r2
1a004954:	429a      	cmp	r2, r3
1a004956:	d100      	bne.n	1a00495a <memmove+0x2a>
1a004958:	bd10      	pop	{r4, pc}
1a00495a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a00495e:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a004962:	e7f7      	b.n	1a004954 <memmove+0x24>

1a004964 <__malloc_lock>:
1a004964:	4801      	ldr	r0, [pc, #4]	; (1a00496c <__malloc_lock+0x8>)
1a004966:	f7ff b9da 	b.w	1a003d1e <__retarget_lock_acquire_recursive>
1a00496a:	bf00      	nop
1a00496c:	10002c1c 	.word	0x10002c1c

1a004970 <__malloc_unlock>:
1a004970:	4801      	ldr	r0, [pc, #4]	; (1a004978 <__malloc_unlock+0x8>)
1a004972:	f7ff b9d5 	b.w	1a003d20 <__retarget_lock_release_recursive>
1a004976:	bf00      	nop
1a004978:	10002c1c 	.word	0x10002c1c

1a00497c <_realloc_r>:
1a00497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00497e:	4607      	mov	r7, r0
1a004980:	4614      	mov	r4, r2
1a004982:	460e      	mov	r6, r1
1a004984:	b921      	cbnz	r1, 1a004990 <_realloc_r+0x14>
1a004986:	4611      	mov	r1, r2
1a004988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00498c:	f7ff ba2e 	b.w	1a003dec <_malloc_r>
1a004990:	b922      	cbnz	r2, 1a00499c <_realloc_r+0x20>
1a004992:	f7ff f9dd 	bl	1a003d50 <_free_r>
1a004996:	4625      	mov	r5, r4
1a004998:	4628      	mov	r0, r5
1a00499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00499c:	f000 f968 	bl	1a004c70 <_malloc_usable_size_r>
1a0049a0:	42a0      	cmp	r0, r4
1a0049a2:	d20f      	bcs.n	1a0049c4 <_realloc_r+0x48>
1a0049a4:	4621      	mov	r1, r4
1a0049a6:	4638      	mov	r0, r7
1a0049a8:	f7ff fa20 	bl	1a003dec <_malloc_r>
1a0049ac:	4605      	mov	r5, r0
1a0049ae:	2800      	cmp	r0, #0
1a0049b0:	d0f2      	beq.n	1a004998 <_realloc_r+0x1c>
1a0049b2:	4631      	mov	r1, r6
1a0049b4:	4622      	mov	r2, r4
1a0049b6:	f7ff f9b4 	bl	1a003d22 <memcpy>
1a0049ba:	4631      	mov	r1, r6
1a0049bc:	4638      	mov	r0, r7
1a0049be:	f7ff f9c7 	bl	1a003d50 <_free_r>
1a0049c2:	e7e9      	b.n	1a004998 <_realloc_r+0x1c>
1a0049c4:	4635      	mov	r5, r6
1a0049c6:	e7e7      	b.n	1a004998 <_realloc_r+0x1c>

1a0049c8 <__ssputs_r>:
1a0049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0049cc:	688e      	ldr	r6, [r1, #8]
1a0049ce:	429e      	cmp	r6, r3
1a0049d0:	4682      	mov	sl, r0
1a0049d2:	460c      	mov	r4, r1
1a0049d4:	4691      	mov	r9, r2
1a0049d6:	4698      	mov	r8, r3
1a0049d8:	d838      	bhi.n	1a004a4c <__ssputs_r+0x84>
1a0049da:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a0049de:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a0049e2:	d031      	beq.n	1a004a48 <__ssputs_r+0x80>
1a0049e4:	6962      	ldr	r2, [r4, #20]
1a0049e6:	6825      	ldr	r5, [r4, #0]
1a0049e8:	6909      	ldr	r1, [r1, #16]
1a0049ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0049ee:	1a6f      	subs	r7, r5, r1
1a0049f0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a0049f4:	3301      	adds	r3, #1
1a0049f6:	1055      	asrs	r5, r2, #1
1a0049f8:	443b      	add	r3, r7
1a0049fa:	429d      	cmp	r5, r3
1a0049fc:	bf38      	it	cc
1a0049fe:	461d      	movcc	r5, r3
1a004a00:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a004a04:	d030      	beq.n	1a004a68 <__ssputs_r+0xa0>
1a004a06:	4629      	mov	r1, r5
1a004a08:	f7ff f9f0 	bl	1a003dec <_malloc_r>
1a004a0c:	4606      	mov	r6, r0
1a004a0e:	b950      	cbnz	r0, 1a004a26 <__ssputs_r+0x5e>
1a004a10:	230c      	movs	r3, #12
1a004a12:	f8ca 3000 	str.w	r3, [sl]
1a004a16:	89a3      	ldrh	r3, [r4, #12]
1a004a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a1c:	81a3      	strh	r3, [r4, #12]
1a004a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a26:	463a      	mov	r2, r7
1a004a28:	6921      	ldr	r1, [r4, #16]
1a004a2a:	f7ff f97a 	bl	1a003d22 <memcpy>
1a004a2e:	89a3      	ldrh	r3, [r4, #12]
1a004a30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004a38:	81a3      	strh	r3, [r4, #12]
1a004a3a:	6126      	str	r6, [r4, #16]
1a004a3c:	6165      	str	r5, [r4, #20]
1a004a3e:	443e      	add	r6, r7
1a004a40:	1bed      	subs	r5, r5, r7
1a004a42:	6026      	str	r6, [r4, #0]
1a004a44:	60a5      	str	r5, [r4, #8]
1a004a46:	4646      	mov	r6, r8
1a004a48:	4546      	cmp	r6, r8
1a004a4a:	d900      	bls.n	1a004a4e <__ssputs_r+0x86>
1a004a4c:	4646      	mov	r6, r8
1a004a4e:	4632      	mov	r2, r6
1a004a50:	4649      	mov	r1, r9
1a004a52:	6820      	ldr	r0, [r4, #0]
1a004a54:	f7ff ff6c 	bl	1a004930 <memmove>
1a004a58:	68a3      	ldr	r3, [r4, #8]
1a004a5a:	1b9b      	subs	r3, r3, r6
1a004a5c:	60a3      	str	r3, [r4, #8]
1a004a5e:	6823      	ldr	r3, [r4, #0]
1a004a60:	441e      	add	r6, r3
1a004a62:	6026      	str	r6, [r4, #0]
1a004a64:	2000      	movs	r0, #0
1a004a66:	e7dc      	b.n	1a004a22 <__ssputs_r+0x5a>
1a004a68:	462a      	mov	r2, r5
1a004a6a:	f7ff ff87 	bl	1a00497c <_realloc_r>
1a004a6e:	4606      	mov	r6, r0
1a004a70:	2800      	cmp	r0, #0
1a004a72:	d1e2      	bne.n	1a004a3a <__ssputs_r+0x72>
1a004a74:	6921      	ldr	r1, [r4, #16]
1a004a76:	4650      	mov	r0, sl
1a004a78:	f7ff f96a 	bl	1a003d50 <_free_r>
1a004a7c:	e7c8      	b.n	1a004a10 <__ssputs_r+0x48>
1a004a7e:	Address 0x000000001a004a7e is out of bounds.


1a004a80 <_svfiprintf_r>:
1a004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004a84:	461e      	mov	r6, r3
1a004a86:	898b      	ldrh	r3, [r1, #12]
1a004a88:	061b      	lsls	r3, r3, #24
1a004a8a:	b09d      	sub	sp, #116	; 0x74
1a004a8c:	4607      	mov	r7, r0
1a004a8e:	460d      	mov	r5, r1
1a004a90:	4614      	mov	r4, r2
1a004a92:	d50e      	bpl.n	1a004ab2 <_svfiprintf_r+0x32>
1a004a94:	690b      	ldr	r3, [r1, #16]
1a004a96:	b963      	cbnz	r3, 1a004ab2 <_svfiprintf_r+0x32>
1a004a98:	2140      	movs	r1, #64	; 0x40
1a004a9a:	f7ff f9a7 	bl	1a003dec <_malloc_r>
1a004a9e:	6028      	str	r0, [r5, #0]
1a004aa0:	6128      	str	r0, [r5, #16]
1a004aa2:	b920      	cbnz	r0, 1a004aae <_svfiprintf_r+0x2e>
1a004aa4:	230c      	movs	r3, #12
1a004aa6:	603b      	str	r3, [r7, #0]
1a004aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004aac:	e0c9      	b.n	1a004c42 <_svfiprintf_r+0x1c2>
1a004aae:	2340      	movs	r3, #64	; 0x40
1a004ab0:	616b      	str	r3, [r5, #20]
1a004ab2:	2300      	movs	r3, #0
1a004ab4:	9309      	str	r3, [sp, #36]	; 0x24
1a004ab6:	2320      	movs	r3, #32
1a004ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004abc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a004c5c <_svfiprintf_r+0x1dc>
1a004ac0:	9603      	str	r6, [sp, #12]
1a004ac2:	2330      	movs	r3, #48	; 0x30
1a004ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004ac8:	f04f 0a01 	mov.w	sl, #1
1a004acc:	4623      	mov	r3, r4
1a004ace:	461e      	mov	r6, r3
1a004ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004ad4:	b10a      	cbz	r2, 1a004ada <_svfiprintf_r+0x5a>
1a004ad6:	2a25      	cmp	r2, #37	; 0x25
1a004ad8:	d1f9      	bne.n	1a004ace <_svfiprintf_r+0x4e>
1a004ada:	ebb6 0b04 	subs.w	fp, r6, r4
1a004ade:	d00b      	beq.n	1a004af8 <_svfiprintf_r+0x78>
1a004ae0:	465b      	mov	r3, fp
1a004ae2:	4622      	mov	r2, r4
1a004ae4:	4629      	mov	r1, r5
1a004ae6:	4638      	mov	r0, r7
1a004ae8:	f7ff ff6e 	bl	1a0049c8 <__ssputs_r>
1a004aec:	3001      	adds	r0, #1
1a004aee:	f000 80a3 	beq.w	1a004c38 <_svfiprintf_r+0x1b8>
1a004af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004af4:	445b      	add	r3, fp
1a004af6:	9309      	str	r3, [sp, #36]	; 0x24
1a004af8:	7833      	ldrb	r3, [r6, #0]
1a004afa:	2b00      	cmp	r3, #0
1a004afc:	f000 809c 	beq.w	1a004c38 <_svfiprintf_r+0x1b8>
1a004b00:	2300      	movs	r3, #0
1a004b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004b0a:	3601      	adds	r6, #1
1a004b0c:	9304      	str	r3, [sp, #16]
1a004b0e:	9307      	str	r3, [sp, #28]
1a004b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004b14:	931a      	str	r3, [sp, #104]	; 0x68
1a004b16:	4634      	mov	r4, r6
1a004b18:	2205      	movs	r2, #5
1a004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004b1e:	484f      	ldr	r0, [pc, #316]	; (1a004c5c <_svfiprintf_r+0x1dc>)
1a004b20:	f7ff feb6 	bl	1a004890 <memchr>
1a004b24:	9b04      	ldr	r3, [sp, #16]
1a004b26:	b9c0      	cbnz	r0, 1a004b5a <_svfiprintf_r+0xda>
1a004b28:	06d9      	lsls	r1, r3, #27
1a004b2a:	bf44      	itt	mi
1a004b2c:	2220      	movmi	r2, #32
1a004b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004b32:	071a      	lsls	r2, r3, #28
1a004b34:	bf44      	itt	mi
1a004b36:	222b      	movmi	r2, #43	; 0x2b
1a004b38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004b3c:	7832      	ldrb	r2, [r6, #0]
1a004b3e:	2a2a      	cmp	r2, #42	; 0x2a
1a004b40:	d013      	beq.n	1a004b6a <_svfiprintf_r+0xea>
1a004b42:	9a07      	ldr	r2, [sp, #28]
1a004b44:	4634      	mov	r4, r6
1a004b46:	2000      	movs	r0, #0
1a004b48:	260a      	movs	r6, #10
1a004b4a:	4621      	mov	r1, r4
1a004b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004b50:	3b30      	subs	r3, #48	; 0x30
1a004b52:	2b09      	cmp	r3, #9
1a004b54:	d94b      	bls.n	1a004bee <_svfiprintf_r+0x16e>
1a004b56:	b970      	cbnz	r0, 1a004b76 <_svfiprintf_r+0xf6>
1a004b58:	e014      	b.n	1a004b84 <_svfiprintf_r+0x104>
1a004b5a:	eba0 0009 	sub.w	r0, r0, r9
1a004b5e:	fa0a f000 	lsl.w	r0, sl, r0
1a004b62:	4318      	orrs	r0, r3
1a004b64:	9004      	str	r0, [sp, #16]
1a004b66:	4626      	mov	r6, r4
1a004b68:	e7d5      	b.n	1a004b16 <_svfiprintf_r+0x96>
1a004b6a:	9a03      	ldr	r2, [sp, #12]
1a004b6c:	1d11      	adds	r1, r2, #4
1a004b6e:	6812      	ldr	r2, [r2, #0]
1a004b70:	9103      	str	r1, [sp, #12]
1a004b72:	2a00      	cmp	r2, #0
1a004b74:	db01      	blt.n	1a004b7a <_svfiprintf_r+0xfa>
1a004b76:	9207      	str	r2, [sp, #28]
1a004b78:	e004      	b.n	1a004b84 <_svfiprintf_r+0x104>
1a004b7a:	4252      	negs	r2, r2
1a004b7c:	f043 0302 	orr.w	r3, r3, #2
1a004b80:	9207      	str	r2, [sp, #28]
1a004b82:	9304      	str	r3, [sp, #16]
1a004b84:	7823      	ldrb	r3, [r4, #0]
1a004b86:	2b2e      	cmp	r3, #46	; 0x2e
1a004b88:	d10c      	bne.n	1a004ba4 <_svfiprintf_r+0x124>
1a004b8a:	7863      	ldrb	r3, [r4, #1]
1a004b8c:	2b2a      	cmp	r3, #42	; 0x2a
1a004b8e:	d133      	bne.n	1a004bf8 <_svfiprintf_r+0x178>
1a004b90:	9b03      	ldr	r3, [sp, #12]
1a004b92:	1d1a      	adds	r2, r3, #4
1a004b94:	681b      	ldr	r3, [r3, #0]
1a004b96:	9203      	str	r2, [sp, #12]
1a004b98:	2b00      	cmp	r3, #0
1a004b9a:	bfb8      	it	lt
1a004b9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004ba0:	3402      	adds	r4, #2
1a004ba2:	9305      	str	r3, [sp, #20]
1a004ba4:	4e2e      	ldr	r6, [pc, #184]	; (1a004c60 <_svfiprintf_r+0x1e0>)
1a004ba6:	7821      	ldrb	r1, [r4, #0]
1a004ba8:	2203      	movs	r2, #3
1a004baa:	4630      	mov	r0, r6
1a004bac:	f7ff fe70 	bl	1a004890 <memchr>
1a004bb0:	b138      	cbz	r0, 1a004bc2 <_svfiprintf_r+0x142>
1a004bb2:	2340      	movs	r3, #64	; 0x40
1a004bb4:	1b80      	subs	r0, r0, r6
1a004bb6:	fa03 f000 	lsl.w	r0, r3, r0
1a004bba:	9b04      	ldr	r3, [sp, #16]
1a004bbc:	4303      	orrs	r3, r0
1a004bbe:	3401      	adds	r4, #1
1a004bc0:	9304      	str	r3, [sp, #16]
1a004bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004bc6:	4827      	ldr	r0, [pc, #156]	; (1a004c64 <_svfiprintf_r+0x1e4>)
1a004bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004bcc:	2206      	movs	r2, #6
1a004bce:	f7ff fe5f 	bl	1a004890 <memchr>
1a004bd2:	2800      	cmp	r0, #0
1a004bd4:	d038      	beq.n	1a004c48 <_svfiprintf_r+0x1c8>
1a004bd6:	4b24      	ldr	r3, [pc, #144]	; (1a004c68 <_svfiprintf_r+0x1e8>)
1a004bd8:	bb13      	cbnz	r3, 1a004c20 <_svfiprintf_r+0x1a0>
1a004bda:	9b03      	ldr	r3, [sp, #12]
1a004bdc:	3307      	adds	r3, #7
1a004bde:	f023 0307 	bic.w	r3, r3, #7
1a004be2:	3308      	adds	r3, #8
1a004be4:	9303      	str	r3, [sp, #12]
1a004be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004be8:	4443      	add	r3, r8
1a004bea:	9309      	str	r3, [sp, #36]	; 0x24
1a004bec:	e76e      	b.n	1a004acc <_svfiprintf_r+0x4c>
1a004bee:	fb06 3202 	mla	r2, r6, r2, r3
1a004bf2:	2001      	movs	r0, #1
1a004bf4:	460c      	mov	r4, r1
1a004bf6:	e7a8      	b.n	1a004b4a <_svfiprintf_r+0xca>
1a004bf8:	2300      	movs	r3, #0
1a004bfa:	3401      	adds	r4, #1
1a004bfc:	9305      	str	r3, [sp, #20]
1a004bfe:	4619      	mov	r1, r3
1a004c00:	260a      	movs	r6, #10
1a004c02:	4620      	mov	r0, r4
1a004c04:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004c08:	3a30      	subs	r2, #48	; 0x30
1a004c0a:	2a09      	cmp	r2, #9
1a004c0c:	d903      	bls.n	1a004c16 <_svfiprintf_r+0x196>
1a004c0e:	2b00      	cmp	r3, #0
1a004c10:	d0c8      	beq.n	1a004ba4 <_svfiprintf_r+0x124>
1a004c12:	9105      	str	r1, [sp, #20]
1a004c14:	e7c6      	b.n	1a004ba4 <_svfiprintf_r+0x124>
1a004c16:	fb06 2101 	mla	r1, r6, r1, r2
1a004c1a:	2301      	movs	r3, #1
1a004c1c:	4604      	mov	r4, r0
1a004c1e:	e7f0      	b.n	1a004c02 <_svfiprintf_r+0x182>
1a004c20:	ab03      	add	r3, sp, #12
1a004c22:	9300      	str	r3, [sp, #0]
1a004c24:	462a      	mov	r2, r5
1a004c26:	4b11      	ldr	r3, [pc, #68]	; (1a004c6c <_svfiprintf_r+0x1ec>)
1a004c28:	a904      	add	r1, sp, #16
1a004c2a:	4638      	mov	r0, r7
1a004c2c:	f3af 8000 	nop.w
1a004c30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004c34:	4680      	mov	r8, r0
1a004c36:	d1d6      	bne.n	1a004be6 <_svfiprintf_r+0x166>
1a004c38:	89ab      	ldrh	r3, [r5, #12]
1a004c3a:	065b      	lsls	r3, r3, #25
1a004c3c:	f53f af34 	bmi.w	1a004aa8 <_svfiprintf_r+0x28>
1a004c40:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004c42:	b01d      	add	sp, #116	; 0x74
1a004c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004c48:	ab03      	add	r3, sp, #12
1a004c4a:	9300      	str	r3, [sp, #0]
1a004c4c:	462a      	mov	r2, r5
1a004c4e:	4b07      	ldr	r3, [pc, #28]	; (1a004c6c <_svfiprintf_r+0x1ec>)
1a004c50:	a904      	add	r1, sp, #16
1a004c52:	4638      	mov	r0, r7
1a004c54:	f7ff faec 	bl	1a004230 <_printf_i>
1a004c58:	e7ea      	b.n	1a004c30 <_svfiprintf_r+0x1b0>
1a004c5a:	bf00      	nop
1a004c5c:	1a0050a8 	.word	0x1a0050a8
1a004c60:	1a0050ae 	.word	0x1a0050ae
1a004c64:	1a0050b2 	.word	0x1a0050b2
1a004c68:	00000000 	.word	0x00000000
1a004c6c:	1a0049c9 	.word	0x1a0049c9

1a004c70 <_malloc_usable_size_r>:
1a004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004c74:	1f18      	subs	r0, r3, #4
1a004c76:	2b00      	cmp	r3, #0
1a004c78:	bfbc      	itt	lt
1a004c7a:	580b      	ldrlt	r3, [r1, r0]
1a004c7c:	18c0      	addlt	r0, r0, r3
1a004c7e:	4770      	bx	lr
1a004c80:	65726174 	.word	0x65726174
1a004c84:	00615f61 	.word	0x00615f61
1a004c88:	65726174 	.word	0x65726174
1a004c8c:	00625f61 	.word	0x00625f61
1a004c90:	65726174 	.word	0x65726174
1a004c94:	00635f61 	.word	0x00635f61
1a004c98:	2044454c 	.word	0x2044454c
1a004c9c:	ff004e4f 	.word	0xff004e4f
1a004ca0:	736e654d 	.word	0x736e654d
1a004ca4:	3a656a61 	.word	0x3a656a61
1a004ca8:	0d732520 	.word	0x0d732520
1a004cac:	ffff000a 	.word	0xffff000a
1a004cb0:	78434554 	.word	0x78434554
1a004cb4:	30255420 	.word	0x30255420
1a004cb8:	0a0d6434 	.word	0x0a0d6434
1a004cbc:	00000000 	.word	0x00000000
1a004cc0:	78434554 	.word	0x78434554
1a004cc4:	79795420 	.word	0x79795420
1a004cc8:	0a0d7979 	.word	0x0a0d7979
1a004ccc:	ffffff00 	.word	0xffffff00
1a004cd0:	6c707041 	.word	0x6c707041
1a004cd4:	74616369 	.word	0x74616369
1a004cd8:	206e6f69 	.word	0x206e6f69
1a004cdc:	6c6c614d 	.word	0x6c6c614d
1a004ce0:	4620636f 	.word	0x4620636f
1a004ce4:	656c6961 	.word	0x656c6961
1a004ce8:	6f482064 	.word	0x6f482064
1a004cec:	0d216b6f 	.word	0x0d216b6f
1a004cf0:	00000000 	.word	0x00000000
1a004cf4:	7362696c 	.word	0x7362696c
1a004cf8:	6572662f 	.word	0x6572662f
1a004cfc:	6f747265 	.word	0x6f747265
1a004d00:	6f732f73 	.word	0x6f732f73
1a004d04:	65637275 	.word	0x65637275
1a004d08:	6f6f682f 	.word	0x6f6f682f
1a004d0c:	632e736b 	.word	0x632e736b
1a004d10:	ffffff00 	.word	0xffffff00
1a004d14:	70410a0d 	.word	0x70410a0d
1a004d18:	63696c70 	.word	0x63696c70
1a004d1c:	6f697461 	.word	0x6f697461
1a004d20:	7453206e 	.word	0x7453206e
1a004d24:	206b6361 	.word	0x206b6361
1a004d28:	7265764f 	.word	0x7265764f
1a004d2c:	776f6c66 	.word	0x776f6c66
1a004d30:	6f202121 	.word	0x6f202121
1a004d34:	6154206e 	.word	0x6154206e
1a004d38:	203a6b73 	.word	0x203a6b73
1a004d3c:	0a0d7325 	.word	0x0a0d7325
1a004d40:	ffffff00 	.word	0xffffff00
1a004d44:	41760a0d 	.word	0x41760a0d
1a004d48:	72657373 	.word	0x72657373
1a004d4c:	6c614374 	.word	0x6c614374
1a004d50:	2864656c 	.word	0x2864656c
1a004d54:	200a0d29 	.word	0x200a0d29
1a004d58:	4c4c2020 	.word	0x4c4c2020
1a004d5c:	20656e69 	.word	0x20656e69
1a004d60:	626d754e 	.word	0x626d754e
1a004d64:	3d207265 	.word	0x3d207265
1a004d68:	0d642520 	.word	0x0d642520
1a004d6c:	2020200a 	.word	0x2020200a
1a004d70:	656c6946 	.word	0x656c6946
1a004d74:	6d614e20 	.word	0x6d614e20
1a004d78:	203d2065 	.word	0x203d2065
1a004d7c:	0a0d7325 	.word	0x0a0d7325
1a004d80:	ff000a0d 	.word	0xff000a0d
1a004d84:	454c4449 	.word	0x454c4449
1a004d88:	ffffff00 	.word	0xffffff00
1a004d8c:	51726d54 	.word	0x51726d54
1a004d90:	ffffff00 	.word	0xffffff00
1a004d94:	20726d54 	.word	0x20726d54
1a004d98:	00637653 	.word	0x00637653

1a004d9c <ExtRateIn>:
1a004d9c:	00000000                                ....

1a004da0 <GpioButtons>:
1a004da0:	08000400 09010900                       ........

1a004da8 <GpioLeds>:
1a004da8:	01050005 0e000205 0c010b01              ............

1a004db4 <GpioPorts>:
1a004db4:	03030003 0f050403 05031005 07030603     ................
1a004dc4:	ffff0802                                ....

1a004dc8 <OscRateIn>:
1a004dc8:	00b71b00                                ....

1a004dcc <InitClkStates>:
1a004dcc:	01010f01                                ....

1a004dd0 <pinmuxing>:
1a004dd0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004de0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004df0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004e00:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004e10:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004e20:	00d50301 00d50401 00160107 00560207     ..............V.
1a004e30:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004e40:	00570206                                ..W.

1a004e44 <UART_BClock>:
1a004e44:	01a201c2 01620182                       ......b.

1a004e4c <UART_PClock>:
1a004e4c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004e5c:	000000ff                                ....

1a004e60 <periph_to_base>:
1a004e60:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004e70:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004e80:	000100e0 01000100 01200003 00060120     .......... . ...
1a004e90:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004ea0:	01820013 00120182 01a201a2 01c20011     ................
1a004eb0:	001001c2 01e201e2 0202000f 000e0202     ................
1a004ec0:	02220222 0223000d 001c0223              "."...#.#...

1a004ecc <InitClkStates>:
1a004ecc:	00010100 00010909 0001090a 01010701     ................
1a004edc:	00010902 00010906 0101090c 0001090d     ................
1a004eec:	0001090e 0001090f 00010910 00010911     ................
1a004efc:	00010912 00010913 00011114 00011119     ................
1a004f0c:	0001111a 0001111b                       ........

1a004f14 <lpcUarts>:
1a004f14:	40081000 06020406 00180205 40081000     ...@...........@
1a004f24:	09070509 00180706 40082000 00000000     ......... .@....
1a004f34:	00190000 400c1000 07060107 001a0602     .......@........
1a004f44:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004f54:	02020302 001b0204                       ........

1a004f5c <gpioPinsInit>:
1a004f5c:	02000104 00050701 05010d03 04080100     ................
1a004f6c:	02020002 02000304 00000403 04070002     ................
1a004f7c:	030c0300 09050402 05040103 04030208     ................
1a004f8c:	04020305 06040504 0802000c 03000b06     ................
1a004f9c:	00090607 07060503 060f0504 03030004     ................
1a004fac:	02000404 00050404 06040502 04060200     ................
1a004fbc:	0c050408 05040a04 0003010e 14010a00     ................
1a004fcc:	010f0000 0d000012 00001101 0010010c     ................
1a004fdc:	07070300 000f0300 01000001 00000000     ................
1a004fec:	000a0600 08060603 06100504 04030005     ................
1a004ffc:	03000106 04090400 04010d05 010b0000     ................
1a00500c:	0200000f 00000001 00010104 02010800     ................
1a00501c:	01090000 09010006 05040002 04010200     ................
1a00502c:	02020105 02020504 0e00000a 01000b02     ................
1a00503c:	000c020b ffff0c01                       ........

1a005044 <__sf_fake_stderr>:
	...

1a005064 <__sf_fake_stdin>:
	...

1a005084 <__sf_fake_stdout>:
	...

1a0050a4 <_global_impure_ptr>:
1a0050a4:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a0050b4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a0050c4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a0050d4:	64636261 ff006665                       abcdef..
