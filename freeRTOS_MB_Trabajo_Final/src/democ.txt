/*
 * FreeModbus Libary: BARE Demo Application
 * Copyright (C) 2006 Christian Walter <wolti@sil.at>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * File: $Id: demo.c,v 1.1 2006/08/22 21:35:13 wolti Exp $
 */

/* ----------------------- System includes ----------------------------------*/
#include <FreeRTOS.h>
#include <task.h>

/* ----------------------- Modbus includes ----------------------------------*/
#include "board.h"
//#include "ritimer_18xx_43xx.h"
#include "mb.h"
#include "sapi.h"
#include "stdint.h"
#include "mbport.h"
//#include "chip.h"

/* ----------------------- Defines ------------------------------------------*/
#define REG_INPUT_START                 ( 1000 )
#define REG_INPUT_NREGS                 ( 64 )

#define REG_HOLDING_START               ( 1 )
#define REG_HOLDING_NREGS               ( 32 )

#define TASK_MODBUS_STACK_SIZE          configMINIMAL_STACK_SIZE*2//( 256 )
#define TASK_MODBUS_PRIORITY            ( tskIDLE_PRIORITY + 1 )

#define TASK_APPL_STACK_SIZE            configMINIMAL_STACK_SIZE*2//( 256 )
#define TASK_APPL_PRIORITY              ( tskIDLE_PRIORITY + 1 )


/* ----------------------- Static functions ---------------------------------*/
static void     vTaskApplication( void *pvArg );
static void     vTaskMODBUS( void *pvArg );

/* ----------------------- Static variables ---------------------------------*/
static USHORT   usRegInputStart = REG_INPUT_START;
static USHORT   usRegInputBuf[REG_INPUT_NREGS];
static USHORT   usRegHoldingStart = REG_HOLDING_START;
static USHORT   usRegHoldingBuf[REG_HOLDING_NREGS];


/* ----------------------- Start implementation -----------------------------*/
/*int
main( void )
{
	uint32_t indice = 0;
	Board_Init();
    eMBErrorCode    eStatus;
    //Init ModBUs (Mode, Address, ucport, Baudrate, Parity)
    // Mode:MB_ASCII/MB_RTU
    // Address: Address for slave device.
    // ucport: not used.
    // Baudrate: baudrate of serial transmission.
    // Parity:MB_PAR_NONE/MB_PAR_ODD/MB_PAR_EVEN.
    // Possible configurations: ASCII: 7'E'1, 7'O'1, 7'N'2 --RTU: 8'E'1, 8'O'1, 8'N'2
    eStatus = eMBInit( MB_ASCII, 0x0A, 7, 9600, MB_PAR_EVEN );//( MB_RTU, 0x0A, 7, 115200, MB_PAR_NONE );
    //xMBPortSerialInit( 0, 38400, 8, MB_PAR_NONE );MB_ASCII
    //vMBPortSerialEnable( TRUE, TRUE );
    // Enable the Modbus Protocol Stack.
    eStatus = eMBEnable(  );
	//xMBPortTimersInit( 20000 );
	//vMBPortTimersEnable( );
    for(indice = 0;indice < REG_INPUT_NREGS; indice++)
    	usRegInputBuf[indice] = indice;
    for( ;; )
    {
        ( void )eMBPoll(  );

        // Here we simply count the number of poll cycles.
        usRegInputBuf[0]++;


    }
}
*/
/* ----------------------- Start implementation -----------------------------*/
int
main( void )
{
	Board_Init();

    xTaskCreate( vTaskMODBUS, "MODBUS", TASK_MODBUS_STACK_SIZE, NULL, TASK_MODBUS_PRIORITY, NULL );


    //xTaskCreate( vTaskApplication, "APPL", TASK_APPL_STACK_SIZE, NULL, TASK_APPL_PRIORITY, NULL );


    vTaskStartScheduler(  );
    while(1){

    }
    return 1;
}

static void
vTaskMODBUS( void *pvArg )
{
    eMBErrorCode    eStatus;
	uint32_t indice = 0;
    eStatus = eMBInit( MB_ASCII, 0x0A, 7, 9600, MB_PAR_EVEN );
    eStatus = eMBEnable(  );
    for(indice = 0;indice < REG_INPUT_NREGS; indice++)
    	usRegInputBuf[indice] = indice;

    for( ;; )
    {
    	( void )eMBPoll(  );
            // Here we simply count the number of poll cycles.
        usRegInputBuf[0]++;
        vTaskDelay( 5 / portTICK_RATE_MS );
    }
}

static void
vTaskApplication( void *pvArg )
{
    for( ;; )
    {
        vTaskDelay( 1000 / portTICK_RATE_MS);
    }
}
/*
void
vApplicationStackOverflowHook( xTaskHandle * pxTask, signed char *pcTaskName )
{
    ( void )pxTask;
    ( void )pcTaskName;
    for( ;; );
}

void
vApplicationIdleHook( void )
{
}

void
vApplicationTickHook( void )
{
}
*/
eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
    }

    return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) && ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
        {
        case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( unsigned char )( usRegHoldingBuf[iRegIndex] >> 8 );
                *pucRegBuffer++ = ( unsigned char )( usRegHoldingBuf[iRegIndex] & 0xFF );
                iRegIndex++;
                usNRegs--;
            }
            break;

        case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
                usNRegs--;
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}

eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
